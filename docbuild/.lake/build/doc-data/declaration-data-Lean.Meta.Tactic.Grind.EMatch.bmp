{"name":"Lean.Meta.Tactic.Grind.EMatch","instances":[{"typeNames":["Lean.Meta.Grind.EMatch.Cnstr"],"name":"Lean.Meta.Grind.EMatch.instInhabitedCnstr","className":"Inhabited"},{"typeNames":["Lean.Meta.Grind.EMatch.Choice"],"name":"Lean.Meta.Grind.EMatch.instInhabitedChoice","className":"Inhabited"},{"typeNames":["Lean.Meta.Grind.EMatch.Context"],"name":"Lean.Meta.Grind.EMatch.instInhabitedContext","className":"Inhabited"},{"typeNames":["Lean.Meta.Grind.EMatch.SearchState"],"name":"Lean.Meta.Grind.EMatch.instInhabitedSearchState","className":"Inhabited"}],"imports":["Lean.Meta.Tactic.Grind.Types","Lean.Meta.Tactic.Grind.Intro","Lean.Meta.Tactic.Grind.MatchDiscrOnly","Lean.Meta.Tactic.Grind.MatchCond","Lean.Meta.Tactic.Grind.Core"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L572-L576","name":"Lean.Meta.Grind.ematch","line":572,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.ematch","doc":"Performs one round of E-matching, and returns `true` if new instances were generated. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.ematch\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ematch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L549-L550","name":"Lean.Meta.Grind.EMatch.ematchTheorems","line":549,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.ematchTheorems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.ematchTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">ematchTheorems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thms</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.EMatchTheorem\">EMatchTheorem</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L542-L547","name":"Lean.Meta.Grind.EMatch.ematchTheorem.tryAll","line":542,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.ematchTheorem.tryAll","doc":"When using the mod-time optimization with multi-patterns,\nwe must start ematching at each different pattern. That is,\nif we have `[p₁, p₂, p₃]`, we must execute\n- `main p₁ [.continue p₂, .continue p₃]`\n- `main p₂ [.continue p₁, .continue p₃]`\n- `main p₃ [.continue p₁, .continue p₂]`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.ematchTheorem.tryAll\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">ematchTheorem</span>.<span class=\"name\">tryAll</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Cnstr\">Cnstr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L524-L547","name":"Lean.Meta.Grind.EMatch.ematchTheorem","line":524,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.ematchTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.ematchTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">ematchTheorem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thm</span> : <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.EMatchTheorem\">EMatchTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L125-L128","name":"Lean.Meta.Grind.GenPatternInfo.assign?","line":125,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.GenPatternInfo.assign?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.GenPatternInfo.assign?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">GenPatternInfo</span>.<span class=\"name\">assign?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">genInfo</span> : <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.GenPatternInfo\">GenPatternInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Choice\">EMatch.Choice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Choice\">EMatch.Choice</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L74-L75","name":"Lean.Meta.Grind.EMatch.M.run'","line":74,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.M.run'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.M.run'\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">M</span>.<span class=\"name\">run'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.M\">M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L72-L72","name":"Lean.Meta.Grind.EMatch.M","line":72,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L70-L70","name":"Lean.Meta.Grind.EMatch.instInhabitedSearchState","line":70,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.instInhabitedSearchState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.instInhabitedSearchState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">instInhabitedSearchState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.SearchState\">SearchState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L69-L69","name":"Lean.Meta.Grind.EMatch.SearchState.choiceStack","line":69,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.SearchState.choiceStack","doc":"Choices that still have to be processed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.SearchState.choiceStack\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">SearchState</span>.<span class=\"name\">choiceStack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.SearchState\">SearchState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Choice\">Choice</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L67-L67","name":"Lean.Meta.Grind.EMatch.SearchState.mk","line":67,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.SearchState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.SearchState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">SearchState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">choiceStack</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Choice\">Choice</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.SearchState\">SearchState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L66-L70","name":"Lean.Meta.Grind.EMatch.SearchState","line":66,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.SearchState","doc":"State for the E-matching monad "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.SearchState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">SearchState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L64-L64","name":"Lean.Meta.Grind.EMatch.instInhabitedContext","line":64,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.instInhabitedContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.instInhabitedContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">instInhabitedContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Context\">Context</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L63-L63","name":"Lean.Meta.Grind.EMatch.Context.initApp","line":63,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Context.initApp","doc":"Initial application used to start E-matching "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Context.initApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">Context</span>.<span class=\"name\">initApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L61-L61","name":"Lean.Meta.Grind.EMatch.Context.thm","line":61,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Context.thm","doc":"`EMatchTheorem` being processed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Context.thm\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">Context</span>.<span class=\"name\">thm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.EMatchTheorem\">EMatchTheorem</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L59-L59","name":"Lean.Meta.Grind.EMatch.Context.useMT","line":59,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Context.useMT","doc":"`useMT` is `true` if we are using the mod-time optimization. It is always set to false for new `EMatchTheorem`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Context.useMT\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">Context</span>.<span class=\"name\">useMT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L57-L57","name":"Lean.Meta.Grind.EMatch.Context.mk","line":57,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">useMT</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thm</span> : <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.EMatchTheorem\">EMatchTheorem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">initApp</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L56-L64","name":"Lean.Meta.Grind.EMatch.Context","line":56,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Context","doc":"Context for the E-matching monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L54-L54","name":"Lean.Meta.Grind.EMatch.instInhabitedChoice","line":54,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.instInhabitedChoice","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.instInhabitedChoice\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">instInhabitedChoice</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Choice\">Choice</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L53-L53","name":"Lean.Meta.Grind.EMatch.Choice.assignment","line":53,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Choice.assignment","doc":"Partial assignment so far. Recall that pattern variables are encoded as de-Bruijn variables. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Choice.assignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">Choice</span>.<span class=\"name\">assignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Choice\">Choice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L51-L51","name":"Lean.Meta.Grind.EMatch.Choice.gen","line":51,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Choice.gen","doc":"Maximum term generation found so far. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Choice.gen\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">Choice</span>.<span class=\"name\">gen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Choice\">Choice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L49-L49","name":"Lean.Meta.Grind.EMatch.Choice.cnstrs","line":49,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Choice.cnstrs","doc":"Constraints to be processed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Choice.cnstrs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">Choice</span>.<span class=\"name\">cnstrs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Choice\">Choice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Cnstr\">Cnstr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L47-L47","name":"Lean.Meta.Grind.EMatch.Choice.mk","line":47,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Choice.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Choice.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">Choice</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cnstrs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Cnstr\">Cnstr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">gen</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignment</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Choice\">Choice</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L43-L54","name":"Lean.Meta.Grind.EMatch.Choice","line":43,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Choice","doc":"Choice point for the backtracking search.\nThe state of the procedure contains a stack of choices.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Choice\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">Choice</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L25-L25","name":"Lean.Meta.Grind.EMatch.instInhabitedCnstr","line":25,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.instInhabitedCnstr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.instInhabitedCnstr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">instInhabitedCnstr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Cnstr\">Cnstr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L23-L24","name":"Lean.Meta.Grind.EMatch.Cnstr.continue","line":23,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Cnstr.continue","doc":"This constraint is used to encode multi-patterns. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Cnstr.continue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">Cnstr</span>.<span class=\"name\">continue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Cnstr\">Cnstr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L21-L22","name":"Lean.Meta.Grind.EMatch.Cnstr.offset","line":21,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Cnstr.offset","doc":"Matches offset pattern `pat+k` with term `e` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Cnstr.offset\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">Cnstr</span>.<span class=\"name\">offset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">gen?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.GenPatternInfo\">GenPatternInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Cnstr\">Cnstr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L19-L20","name":"Lean.Meta.Grind.EMatch.Cnstr.match","line":19,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Cnstr.match","doc":"Matches pattern `pat` with term `e` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Cnstr.match\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">Cnstr</span>.<span class=\"name\">match</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">gen?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.GenPatternInfo\">GenPatternInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat </span><span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Cnstr\">Cnstr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/EMatch.lean#L17-L25","name":"Lean.Meta.Grind.EMatch.Cnstr","line":17,"kind":"inductive","docLink":"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Cnstr","doc":"We represent an `E-matching` problem as a list of constraints. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EMatch.html#Lean.Meta.Grind.EMatch.Cnstr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">Cnstr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}