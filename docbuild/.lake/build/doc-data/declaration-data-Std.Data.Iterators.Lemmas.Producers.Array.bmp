{"name":"Std.Data.Iterators.Lemmas.Producers.Array","instances":[],"imports":["Std.Data.Iterators.Lemmas.Consumers.Collect","Std.Data.Iterators.Lemmas.Producers.Monadic.Array"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Lemmas/Producers/Array.lean#L82-L85","name":"Array.toListRev_toIter","line":82,"kind":"theorem","docLink":"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.toListRev_toIter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.toListRev_toIter\"><span class=\"name\">Array</span>.<span class=\"name\">toListRev_toIter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iter\">iter</a></span>.<a href=\"./Std/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toListRev\">toListRev</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Init/Data/Array/Lemmas.html#Array.toListRev\">toListRev</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Lemmas/Producers/Array.lean#L77-L80","name":"Array.toListRev_iterFromIdx","line":77,"kind":"theorem","docLink":"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.toListRev_iterFromIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.toListRev_iterFromIdx\"><span class=\"name\">Array</span>.<span class=\"name\">toListRev_iterFromIdx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iterFromIdx\">iterFromIdx</a></span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Std/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toListRev\">toListRev</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">pos</span> <span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Lemmas/Producers/Array.lean#L72-L75","name":"Array.toArray_toIter","line":72,"kind":"theorem","docLink":"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.toArray_toIter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.toArray_toIter\"><span class=\"name\">Array</span>.<span class=\"name\">toArray_toIter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iter\">iter</a></span>.<a href=\"./Std/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toArray\">toArray</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">array</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Lemmas/Producers/Array.lean#L67-L70","name":"Array.toArray_iterFromIdx","line":67,"kind":"theorem","docLink":"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.toArray_iterFromIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.toArray_iterFromIdx\"><span class=\"name\">Array</span>.<span class=\"name\">toArray_iterFromIdx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iterFromIdx\">iterFromIdx</a></span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Std/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toArray\">toArray</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Init/Prelude.html#Array.extract\">extract</a></span> <span class=\"fn\">pos</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Lemmas/Producers/Array.lean#L62-L65","name":"Array.toList_iter","line":62,"kind":"theorem","docLink":"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.toList_iter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.toList_iter\"><span class=\"name\">Array</span>.<span class=\"name\">toList_iter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iter\">iter</a></span>.<a href=\"./Std/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Lemmas/Producers/Array.lean#L55-L60","name":"Array.toList_iterFromIdx","line":55,"kind":"theorem","docLink":"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.toList_iterFromIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.toList_iterFromIdx\"><span class=\"name\">Array</span>.<span class=\"name\">toList_iterFromIdx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iterFromIdx\">iterFromIdx</a></span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Std/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">pos</span> <span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Lemmas/Producers/Array.lean#L45-L53","name":"Array.step_iter","line":45,"kind":"theorem","docLink":"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.step_iter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.step_iter\"><span class=\"name\">Array</span>.<span class=\"name\">step_iter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iter\">iter</a></span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.step\">step</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">if h : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> then <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.yield\">Std.Iterators.PlausibleIterStep.yield</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iterFromIdx\">iterFromIdx</a></span> <span class=\"fn\">1</span>)</span> <span class=\"fn\">array</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">0</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <span class=\"fn\">⋯</span></span>\n  else <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.done\">Std.Iterators.PlausibleIterStep.done</a> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Lemmas/Producers/Array.lean#L33-L43","name":"Array.step_iterFromIdx","line":33,"kind":"theorem","docLink":"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.step_iterFromIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.step_iterFromIdx\"><span class=\"name\">Array</span>.<span class=\"name\">step_iterFromIdx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iterFromIdx\">iterFromIdx</a></span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.step\">step</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">if h : <span class=\"fn\">pos</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> then <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.yield\">Std.Iterators.PlausibleIterStep.yield</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iterFromIdx\">iterFromIdx</a></span> (<span class=\"fn\">pos</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span> <span class=\"fn\">array</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">pos</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <span class=\"fn\">⋯</span></span>\n  else <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.done\">Std.Iterators.PlausibleIterStep.done</a> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Lemmas/Producers/Array.lean#L29-L31","name":"Array.iterFromIdx_eq_toIter_iterFromIdxM","line":29,"kind":"theorem","docLink":"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.iterFromIdx_eq_toIter_iterFromIdxM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.iterFromIdx_eq_toIter_iterFromIdxM\"><span class=\"name\">Array</span>.<span class=\"name\">iterFromIdx_eq_toIter_iterFromIdxM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iterFromIdx\">iterFromIdx</a></span> <span class=\"fn\">pos</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Array.iterFromIdxM\">iterFromIdxM</a></span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">pos</span>)</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.toIter\">toIter</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Lemmas/Producers/Array.lean#L25-L27","name":"Array.iter_eq_iterFromIdx","line":25,"kind":"theorem","docLink":"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.iter_eq_iterFromIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.iter_eq_iterFromIdx\"><span class=\"name\">Array</span>.<span class=\"name\">iter_eq_iterFromIdx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iter\">iter</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iterFromIdx\">iterFromIdx</a></span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Lemmas/Producers/Array.lean#L21-L23","name":"Array.iter_eq_toIter_iterM","line":21,"kind":"theorem","docLink":"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.iter_eq_toIter_iterM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.iter_eq_toIter_iterM\"><span class=\"name\">Array</span>.<span class=\"name\">iter_eq_toIter_iterM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iter\">iter</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Array.iterM\">iterM</a></span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.toIter\">toIter</a></span></div></div>"}]}