{"name":"Std.Data.HashSet.RawLemmas","instances":[{"typeNames":["Std.HashSet.Raw.Equiv","Std.HashSet.Raw.Equiv","Std.HashSet.Raw.Equiv"],"name":"Std.HashSet.Raw.Equiv.instTrans","className":"Trans"}],"imports":["Std.Data.HashMap.RawLemmas","Std.Data.HashSet.Raw"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L969-L972","name":"Std.HashSet.Raw.getD_filter","line":969,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_filter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_filter\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.filter\">filter</a> <span class=\"fn\">f</span> <span class=\"fn\">m</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Option/Basic.html#Option.filter\">Option.filter</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L964-L967","name":"Std.HashSet.Raw.get!_filter","line":964,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_filter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_filter\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.filter\">filter</a> <span class=\"fn\">f</span> <span class=\"fn\">m</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Option/Basic.html#Option.filter\">Option.filter</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/BasicAux.html#Option.get!\">get!</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L958-L962","name":"Std.HashSet.Raw.get_filter","line":958,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get_filter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get_filter\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get_filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.filter\">filter</a> <span class=\"fn\">f</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.filter\">filter</a> <span class=\"fn\">f</span> <span class=\"fn\">m</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L952-L956","name":"Std.HashSet.Raw.get?_filter","line":952,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_filter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_filter\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.filter\">filter</a> <span class=\"fn\">f</span> <span class=\"fn\">m</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Option/Basic.html#Option.filter\">Option.filter</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L946-L950","name":"Std.HashSet.Raw.filter_equiv_self_iff","line":946,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.filter_equiv_self_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.filter_equiv_self_iff\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">filter_equiv_self_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.filter\">filter</a> <span class=\"fn\">f</span> <span class=\"fn\">m</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get\">get</a></span> <span class=\"fn\">a</span> <span class=\"fn\">h</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L941-L944","name":"Std.HashSet.Raw.size_filter_eq_size_iff","line":941,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_filter_eq_size_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_filter_eq_size_iff\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_filter_eq_size_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.filter\">filter</a> <span class=\"fn\">f</span> <span class=\"fn\">m</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">h</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">h</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L934-L937","name":"Std.HashSet.Raw.size_filter_le_size","line":934,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_filter_le_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_filter_le_size\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_filter_le_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.filter\">filter</a> <span class=\"fn\">f</span> <span class=\"fn\">m</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L929-L932","name":"Std.HashSet.Raw.mem_of_mem_filter","line":929,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_of_mem_filter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_of_mem_filter\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_of_mem_filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.filter\">filter</a> <span class=\"fn\">f</span> <span class=\"fn\">m</span></span> → <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L923-L927","name":"Std.HashSet.Raw.mem_filter","line":923,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_filter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_filter\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.filter\">filter</a> <span class=\"fn\">f</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h'</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">h'</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L915-L919","name":"Std.HashSet.Raw.isEmpty_filter_eq_false_iff","line":915,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_filter_eq_false_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_filter_eq_false_iff\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_filter_eq_false_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.filter\">filter</a> <span class=\"fn\">f</span> <span class=\"fn\">m</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">k</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">h</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L909-L913","name":"Std.HashSet.Raw.isEmpty_filter_iff","line":909,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_filter_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_filter_iff\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_filter_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.filter\">filter</a> <span class=\"fn\">f</span> <span class=\"fn\">m</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">h</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">h</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L905-L907","name":"Std.HashSet.Raw.toList_filter","line":905,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.toList_filter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.toList_filter\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">toList_filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.filter\">filter</a> <span class=\"fn\">f</span> <span class=\"fn\">m</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.filter\">List.filter</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.toList\">toList</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L899-L901","name":"Std.HashSet.Raw.equiv_iff_toList_perm","line":899,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.equiv_iff_toList_perm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.equiv_iff_toList_perm\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">equiv_iff_toList_perm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L896-L897","name":"Std.HashSet.Raw.equiv_emptyc_iff_isEmpty","line":896,"kind":"def","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.equiv_emptyc_iff_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.equiv_emptyc_iff_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">equiv_emptyc_iff_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L891-L893","name":"Std.HashSet.Raw.equiv_empty_iff_isEmpty","line":891,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.equiv_empty_iff_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.equiv_empty_iff_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">equiv_empty_iff_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L886-L889","name":"Std.HashSet.Raw.equiv_emptyWithCapacity_iff_isEmpty","line":886,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.equiv_emptyWithCapacity_iff_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.equiv_emptyWithCapacity_iff_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">equiv_emptyWithCapacity_iff_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.emptyWithCapacity\">emptyWithCapacity</a> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L880-L882","name":"Std.HashSet.Raw.Equiv.of_forall_mem_iff","line":880,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.of_forall_mem_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.of_forall_mem_iff\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">of_forall_mem_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>), <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m₁</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L876-L878","name":"Std.HashSet.Raw.Equiv.of_forall_contains_eq","line":876,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.of_forall_contains_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.of_forall_contains_eq\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">of_forall_contains_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L872-L874","name":"Std.HashSet.Raw.Equiv.of_forall_get?_eq","line":872,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.of_forall_get?_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.of_forall_get?_eq\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">of_forall_get?_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">k</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L868-L870","name":"Std.HashSet.Raw.Equiv.filter","line":868,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.filter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.filter\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.filter\">Raw.filter</a> <span class=\"fn\">f</span> <span class=\"fn\">m₁</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.filter\">Raw.filter</a> <span class=\"fn\">f</span> <span class=\"fn\">m₂</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L864-L866","name":"Std.HashSet.Raw.Equiv.insertMany_list","line":864,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L860-L862","name":"Std.HashSet.Raw.Equiv.erase","line":860,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.erase\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L856-L858","name":"Std.HashSet.Raw.Equiv.insert","line":856,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.insert\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\">insert</a></span> <span class=\"fn\">k</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L852-L854","name":"Std.HashSet.Raw.Equiv.getD_eq","line":852,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.getD_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.getD_eq\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">getD_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L848-L850","name":"Std.HashSet.Raw.Equiv.get!_eq","line":848,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.get!_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.get!_eq\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">get!_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L844-L846","name":"Std.HashSet.Raw.Equiv.get_eq","line":844,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.get_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.get_eq\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">get_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hk</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">hk</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L840-L842","name":"Std.HashSet.Raw.Equiv.get?_eq","line":840,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.get?_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.get?_eq\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">get?_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L836-L838","name":"Std.HashSet.Raw.Equiv.mem_iff","line":836,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.mem_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.mem_iff\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">mem_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m₁</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L832-L834","name":"Std.HashSet.Raw.Equiv.contains_eq","line":832,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.contains_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.contains_eq\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">contains_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L828-L830","name":"Std.HashSet.Raw.Equiv.size_eq","line":828,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.size_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.size_eq\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">size_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L824-L826","name":"Std.HashSet.Raw.Equiv.isEmpty_eq","line":824,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.isEmpty_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.isEmpty_eq\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">isEmpty_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L817-L818","name":"Std.HashSet.Raw.Equiv.of_toList_perm","line":817,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.of_toList_perm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.of_toList_perm\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">of_toList_perm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.toList\">toList</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L814-L815","name":"Std.HashSet.Raw.Equiv.toList_perm","line":814,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.toList_perm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.toList_perm\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">toList_perm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L811-L812","name":"Std.HashSet.Raw.Equiv.congr_right","line":811,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.congr_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.congr_right\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">congr_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂ </span><span class=\"fn\">m₃</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₃</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₃</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L810-L810","name":"Std.HashSet.Raw.Equiv.congr_left","line":810,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.congr_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.congr_left\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">congr_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂ </span><span class=\"fn\">m₃</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₃</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₃</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L809-L809","name":"Std.HashSet.Raw.Equiv.comm","line":809,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.comm\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L807-L807","name":"Std.HashSet.Raw.Equiv.instTrans","line":807,"kind":"instance","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.instTrans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.instTrans\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">instTrans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Trans\">Trans</a> <a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a> <a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a> <a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L804-L805","name":"Std.HashSet.Raw.Equiv.trans","line":804,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.trans\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂ </span><span class=\"fn\">m₃</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₃</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₃</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L802-L803","name":"Std.HashSet.Raw.Equiv.symm","line":802,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.symm\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L801-L801","name":"Std.HashSet.Raw.Equiv.rfl","line":801,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.rfl\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L800-L800","name":"Std.HashSet.Raw.Equiv.refl","line":800,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.Equiv.refl\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L787-L791","name":"Std.HashSet.Raw.isEmpty_ofList","line":787,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_ofList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_ofList\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.isEmpty\">isEmpty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L780-L783","name":"Std.HashSet.Raw.size_ofList_le","line":780,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_ofList_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_ofList_le\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_ofList_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L774-L778","name":"Std.HashSet.Raw.size_ofList","line":774,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_ofList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_ofList\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L767-L772","name":"Std.HashSet.Raw.getD_ofList_of_mem","line":767,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_ofList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_ofList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_ofList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k' </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L761-L765","name":"Std.HashSet.Raw.getD_ofList_of_contains_eq_false","line":761,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_ofList_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_ofList_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_ofList_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L754-L759","name":"Std.HashSet.Raw.get!_ofList_of_mem","line":754,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_ofList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_ofList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_ofList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L748-L752","name":"Std.HashSet.Raw.get!_ofList_of_contains_eq_false","line":748,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_ofList_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_ofList_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_ofList_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L740-L746","name":"Std.HashSet.Raw.get_ofList_of_mem","line":740,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get_ofList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get_ofList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get_ofList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.ofList\">ofList</a> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get\">get</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L734-L738","name":"Std.HashSet.Raw.get?_ofList_of_mem","line":734,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_ofList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_ofList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_ofList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L729-L732","name":"Std.HashSet.Raw.get?_ofList_of_contains_eq_false","line":729,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_ofList_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_ofList_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_ofList_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L723-L727","name":"Std.HashSet.Raw.mem_ofList","line":723,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_ofList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_ofList\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.ofList\">ofList</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L717-L721","name":"Std.HashSet.Raw.contains_ofList","line":717,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_ofList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_ofList\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L712-L715","name":"Std.HashSet.Raw.ofList_cons","line":712,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.ofList_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.ofList_cons\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">ofList_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hd</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tl</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.ofList\">ofList</a> (<span class=\"fn\">hd</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">tl</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\">insert</a></span> <span class=\"fn\">hd</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">tl</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L707-L710","name":"Std.HashSet.Raw.ofList_singleton","line":707,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.ofList_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.ofList_singleton\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">ofList_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.ofList\">ofList</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\">insert</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L702-L705","name":"Std.HashSet.Raw.ofList_nil","line":702,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.ofList_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.ofList_nil\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">ofList_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.ofList\">ofList</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L698-L700","name":"Std.HashSet.Raw.isEmpty_of_isEmpty_insertMany","line":698,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_of_isEmpty_insertMany","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_of_isEmpty_insertMany\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_of_isEmpty_insertMany</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">ρ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\">ρ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L692-L696","name":"Std.HashSet.Raw.isEmpty_insertMany_list","line":692,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.isEmpty\">isEmpty</a></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L685-L688","name":"Std.HashSet.Raw.size_insertMany_list_le","line":685,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_insertMany_list_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_insertMany_list_le\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_insertMany_list_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L679-L681","name":"Std.HashSet.Raw.size_le_size_insertMany","line":679,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_le_size_insertMany","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_le_size_insertMany\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_le_size_insertMany</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">ρ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\">ρ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L674-L677","name":"Std.HashSet.Raw.size_le_size_insertMany_list","line":674,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_le_size_insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_le_size_insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_le_size_insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L667-L672","name":"Std.HashSet.Raw.size_insertMany_list","line":667,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L662-L665","name":"Std.HashSet.Raw.getD_insertMany_list_of_mem","line":662,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_insertMany_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_insertMany_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_insertMany_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L654-L660","name":"Std.HashSet.Raw.getD_insertMany_list_of_not_mem_of_mem","line":654,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_insertMany_list_of_not_mem_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_insertMany_list_of_not_mem_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_insertMany_list_of_not_mem_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k' </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">not_mem</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L647-L652","name":"Std.HashSet.Raw.getD_insertMany_list_of_not_mem_of_contains_eq_false","line":647,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_insertMany_list_of_not_mem_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_insertMany_list_of_not_mem_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_insertMany_list_of_not_mem_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">not_mem</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L642-L645","name":"Std.HashSet.Raw.get!_insertMany_list_of_mem","line":642,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_insertMany_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_insertMany_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_insertMany_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L634-L640","name":"Std.HashSet.Raw.get!_insertMany_list_of_not_mem_of_mem","line":634,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_insertMany_list_of_not_mem_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_insertMany_list_of_not_mem_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_insertMany_list_of_not_mem_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">not_mem</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L627-L632","name":"Std.HashSet.Raw.get!_insertMany_list_of_not_mem_of_contains_eq_false","line":627,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_insertMany_list_of_not_mem_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_insertMany_list_of_not_mem_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_insertMany_list_of_not_mem_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">not_mem</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L622-L625","name":"Std.HashSet.Raw.get_insertMany_list_of_mem","line":622,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get_insertMany_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get_insertMany_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get_insertMany_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₃</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">h₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">mem</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L613-L620","name":"Std.HashSet.Raw.get_insertMany_list_of_not_mem_of_mem","line":613,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get_insertMany_list_of_not_mem_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get_insertMany_list_of_not_mem_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get_insertMany_list_of_not_mem_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">not_mem</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get\">get</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L608-L611","name":"Std.HashSet.Raw.get?_insertMany_list_of_mem","line":608,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_insertMany_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_insertMany_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_insertMany_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L600-L606","name":"Std.HashSet.Raw.get?_insertMany_list_of_not_mem_of_mem","line":600,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_insertMany_list_of_not_mem_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_insertMany_list_of_not_mem_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_insertMany_list_of_not_mem_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">not_mem</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L593-L598","name":"Std.HashSet.Raw.get?_insertMany_list_of_not_mem_of_contains_eq_false","line":593,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_insertMany_list_of_not_mem_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_insertMany_list_of_not_mem_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_insertMany_list_of_not_mem_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">not_mem</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L589-L591","name":"Std.HashSet.Raw.mem_insertMany_of_mem","line":589,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_insertMany_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_insertMany_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_insertMany_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">ρ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\">ρ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L584-L587","name":"Std.HashSet.Raw.mem_of_mem_insertMany_list","line":584,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_of_mem_insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_of_mem_insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_of_mem_insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span></span> → <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L578-L582","name":"Std.HashSet.Raw.mem_insertMany_list","line":578,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L572-L576","name":"Std.HashSet.Raw.contains_insertMany_list","line":572,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L565-L570","name":"Std.HashSet.Raw.insertMany_ind","line":565,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.insertMany_ind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.insertMany_ind\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">insertMany_ind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">ρ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">motive</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">insert</span> : <span class=\"fn\">∀ (<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">m</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\">insert</a></span> <span class=\"fn\">a</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L557-L563","name":"Std.HashSet.Raw.insertMany_append","line":557,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.insertMany_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.insertMany_append\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">insertMany_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> (<span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l₁</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L552-L555","name":"Std.HashSet.Raw.insertMany_cons","line":552,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.insertMany_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.insertMany_cons\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">insertMany_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L547-L550","name":"Std.HashSet.Raw.insertMany_list_singleton","line":547,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.insertMany_list_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.insertMany_list_singleton\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">insertMany_list_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\">insert</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L542-L545","name":"Std.HashSet.Raw.insertMany_nil","line":542,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.insertMany_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.insertMany_nil\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">insertMany_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insertMany\">insertMany</a></span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L533-L536","name":"Std.HashSet.Raw.forIn_eq_forIn_toList","line":533,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.forIn_eq_forIn_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.forIn_eq_forIn_toList\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">forIn_eq_forIn_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m'</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">m'</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">δ</span>)</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">ForIn.forIn</a> <span class=\"fn\">m</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">ForIn.forIn</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.toList\">toList</a></span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L528-L531","name":"Std.HashSet.Raw.forIn_eq_forIn","line":528,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.forIn_eq_forIn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.forIn_eq_forIn\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">forIn_eq_forIn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m'</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">m'</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">δ</span>)</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.forIn\">forIn</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">ForIn.forIn</a> <span class=\"fn\">m</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L523-L525","name":"Std.HashSet.Raw.forM_eq_forM_toList","line":523,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.forM_eq_forM_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.forM_eq_forM_toList\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">forM_eq_forM_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m'</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m'</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Basic.html#ForM.forM\">ForM.forM</a> <span class=\"fn\">m</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Control/Basic.html#ForM.forM\">ForM.forM</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.toList\">toList</a></span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L519-L521","name":"Std.HashSet.Raw.forM_eq_forM","line":519,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.forM_eq_forM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.forM_eq_forM\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">forM_eq_forM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m'</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m'</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.forM\">forM</a> <span class=\"fn\">f</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Control/Basic.html#ForM.forM\">ForM.forM</a> <span class=\"fn\">m</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L514-L516","name":"Std.HashSet.Raw.fold_eq_foldl_toList","line":514,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.fold_eq_foldl_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.fold_eq_foldl_toList\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">fold_eq_foldl_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">δ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.fold\">fold</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L509-L512","name":"Std.HashSet.Raw.foldM_eq_foldlM_toList","line":509,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.foldM_eq_foldlM_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.foldM_eq_foldlM_toList\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">foldM_eq_foldlM_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m'</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m'</span> <span class=\"fn\">δ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.foldM\">foldM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Control.html#List.foldlM\">List.foldlM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L501-L503","name":"Std.HashSet.Raw.distinct_toList","line":501,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.distinct_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.distinct_toList\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">distinct_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L496-L499","name":"Std.HashSet.Raw.mem_toList","line":496,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_toList\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.toList\">toList</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L491-L494","name":"Std.HashSet.Raw.contains_toList","line":491,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_toList\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L486-L489","name":"Std.HashSet.Raw.isEmpty_toList","line":486,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_toList\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L481-L484","name":"Std.HashSet.Raw.length_toList","line":481,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.length_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.length_toList\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">length_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.toList\">toList</a></span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L477-L479","name":"Std.HashSet.Raw.containsThenInsert_snd","line":477,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.containsThenInsert_snd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.containsThenInsert_snd\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">containsThenInsert_snd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.containsThenInsert\">containsThenInsert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\">insert</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L473-L475","name":"Std.HashSet.Raw.containsThenInsert_fst","line":473,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.containsThenInsert_fst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.containsThenInsert_fst\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">containsThenInsert_fst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.containsThenInsert\">containsThenInsert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L469-L471","name":"Std.HashSet.Raw.getD_eq_of_mem","line":469,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_eq_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_eq_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_eq_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L465-L467","name":"Std.HashSet.Raw.getD_eq_of_contains","line":465,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_eq_of_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_eq_of_contains\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_eq_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L461-L463","name":"Std.HashSet.Raw.getD_congr","line":461,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_congr\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k' </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L456-L459","name":"Std.HashSet.Raw.get!_eq_getD_default","line":456,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_eq_getD_default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_eq_getD_default\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_eq_getD_default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L452-L454","name":"Std.HashSet.Raw.get_eq_getD","line":452,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get_eq_getD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get_eq_getD\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get_eq_getD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get\">get</a></span> <span class=\"fn\">a</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L448-L450","name":"Std.HashSet.Raw.getD_eq_getD_get?","line":448,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_eq_getD_get?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_eq_getD_get?\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_eq_getD_get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L444-L446","name":"Std.HashSet.Raw.get?_eq_some_getD","line":444,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_eq_some_getD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_eq_some_getD\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_eq_some_getD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L440-L442","name":"Std.HashSet.Raw.get?_eq_some_getD_of_contains","line":440,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_eq_some_getD_of_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_eq_some_getD_of_contains\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_eq_some_getD_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L435-L438","name":"Std.HashSet.Raw.getD_erase_self","line":435,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_erase_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_erase_self\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_erase_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L431-L433","name":"Std.HashSet.Raw.getD_erase","line":431,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_erase\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">fallback</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L427-L429","name":"Std.HashSet.Raw.getD_eq_fallback","line":427,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_eq_fallback","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_eq_fallback\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_eq_fallback</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L422-L425","name":"Std.HashSet.Raw.getD_eq_fallback_of_contains_eq_false","line":422,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_eq_fallback_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_eq_fallback_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_eq_fallback_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L418-L420","name":"Std.HashSet.Raw.getD_insert","line":418,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_insert\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L414-L416","name":"Std.HashSet.Raw.getD_of_isEmpty","line":414,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_of_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_of_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L411-L412","name":"Std.HashSet.Raw.getD_emptyc","line":411,"kind":"def","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L406-L408","name":"Std.HashSet.Raw.getD_empty","line":406,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_empty\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L402-L404","name":"Std.HashSet.Raw.getD_emptyWithCapacity","line":402,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_emptyWithCapacity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.getD_emptyWithCapacity\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_emptyWithCapacity</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.emptyWithCapacity\">emptyWithCapacity</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L399-L400","name":"Std.HashSet.Raw.get!_eq_of_mem","line":399,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_eq_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_eq_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_eq_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L395-L397","name":"Std.HashSet.Raw.get!_eq_of_contains","line":395,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_eq_of_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_eq_of_contains\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_eq_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L391-L393","name":"Std.HashSet.Raw.get!_congr","line":391,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_congr\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">k'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L387-L389","name":"Std.HashSet.Raw.get_eq_get!","line":387,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get_eq_get!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get_eq_get!\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get_eq_get!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get\">get</a></span> <span class=\"fn\">a</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L383-L385","name":"Std.HashSet.Raw.get!_eq_get!_get?","line":383,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_eq_get!_get?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_eq_get!_get?\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_eq_get!_get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Data/Option/BasicAux.html#Option.get!\">get!</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L379-L381","name":"Std.HashSet.Raw.get?_eq_some_get!","line":379,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_eq_some_get!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_eq_some_get!\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_eq_some_get!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">a</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L375-L377","name":"Std.HashSet.Raw.get?_eq_some_get!_of_contains","line":375,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_eq_some_get!_of_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_eq_some_get!_of_contains\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_eq_some_get!_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">a</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L370-L373","name":"Std.HashSet.Raw.get!_erase_self","line":370,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_erase_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_erase_self\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_erase_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L366-L368","name":"Std.HashSet.Raw.get!_erase","line":366,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_erase\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L362-L364","name":"Std.HashSet.Raw.get!_eq_default","line":362,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_eq_default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_eq_default\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_eq_default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L357-L360","name":"Std.HashSet.Raw.get!_eq_default_of_contains_eq_false","line":357,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_eq_default_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_eq_default_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_eq_default_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L353-L355","name":"Std.HashSet.Raw.get!_insert","line":353,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_insert\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L349-L351","name":"Std.HashSet.Raw.get!_of_isEmpty","line":349,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_of_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_of_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L346-L347","name":"Std.HashSet.Raw.get!_emptyc","line":346,"kind":"def","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L341-L343","name":"Std.HashSet.Raw.get!_empty","line":341,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_empty\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L337-L339","name":"Std.HashSet.Raw.get!_emptyWithCapacity","line":337,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_emptyWithCapacity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get!_emptyWithCapacity\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_emptyWithCapacity</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.emptyWithCapacity\">emptyWithCapacity</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L332-L335","name":"Std.HashSet.Raw.get_eq","line":332,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get_eq\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L327-L330","name":"Std.HashSet.Raw.get_congr","line":327,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get_congr\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k₁ </span><span class=\"fn\">k₂</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : (<span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k₂</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get\">get</a></span> <span class=\"fn\">k₁</span> <span class=\"fn\">h₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get\">get</a></span> <span class=\"fn\">k₂</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L323-L325","name":"Std.HashSet.Raw.get_beq","line":323,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get_beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get_beq\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get_beq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L318-L321","name":"Std.HashSet.Raw.get?_erase_self","line":318,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_erase_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_erase_self\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_erase_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L314-L316","name":"Std.HashSet.Raw.get_get?","line":314,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get_get?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get_get?\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get_get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L310-L312","name":"Std.HashSet.Raw.get_eq_get_get?","line":310,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get_eq_get_get?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get_eq_get_get?\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get_eq_get_get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L306-L308","name":"Std.HashSet.Raw.get?_eq_some_get","line":306,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_eq_some_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_eq_some_get\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_eq_some_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get\">get</a></span> <span class=\"fn\">a</span> <span class=\"fn\">h'</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L301-L304","name":"Std.HashSet.Raw.get_erase","line":301,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get_erase\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.erase\">erase</a></span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get\">get</a></span> <span class=\"fn\">a</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get\">get</a></span> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L296-L299","name":"Std.HashSet.Raw.get_insert","line":296,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get_insert\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\">insert</a></span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get\">get</a></span> <span class=\"fn\">a</span> <span class=\"fn\">h₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if h₂ : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> then <span class=\"fn\">k</span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get\">get</a></span> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L292-L294","name":"Std.HashSet.Raw.get?_eq_some","line":292,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_eq_some","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_eq_some\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_eq_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L288-L290","name":"Std.HashSet.Raw.get?_eq_some_of_contains","line":288,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_eq_some_of_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_eq_some_of_contains\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_eq_some_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L284-L286","name":"Std.HashSet.Raw.get?_congr","line":284,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_congr\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">k'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L280-L282","name":"Std.HashSet.Raw.get?_beq","line":280,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_beq\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_beq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Option/Basic.html#Option.all\">Option.all</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L276-L278","name":"Std.HashSet.Raw.get?_erase","line":276,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_erase\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#Option.none\">none</a> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L272-L274","name":"Std.HashSet.Raw.get?_eq_none","line":272,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_eq_none","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_eq_none\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_eq_none</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L268-L270","name":"Std.HashSet.Raw.get?_eq_none_of_contains_eq_false","line":268,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_eq_none_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_eq_none_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_eq_none_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L263-L266","name":"Std.HashSet.Raw.isSome_get?_iff_mem","line":263,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isSome_get?_iff_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isSome_get?_iff_mem\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isSome_get?_iff_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L259-L261","name":"Std.HashSet.Raw.mem_iff_isSome_get?","line":259,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_iff_isSome_get?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_iff_isSome_get?\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_iff_isSome_get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L254-L257","name":"Std.HashSet.Raw.isSome_get?_eq_contains","line":254,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isSome_get?_eq_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isSome_get?_eq_contains\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isSome_get?_eq_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L250-L252","name":"Std.HashSet.Raw.contains_eq_isSome_get?","line":250,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_eq_isSome_get?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_eq_isSome_get?\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_eq_isSome_get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L246-L248","name":"Std.HashSet.Raw.get?_insert","line":246,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_insert\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L242-L244","name":"Std.HashSet.Raw.get?_of_isEmpty","line":242,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_of_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_of_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L239-L240","name":"Std.HashSet.Raw.get?_emptyc","line":239,"kind":"def","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L234-L236","name":"Std.HashSet.Raw.get?_empty","line":234,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_empty\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L230-L232","name":"Std.HashSet.Raw.get?_emptyWithCapacity","line":230,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_emptyWithCapacity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.get?_emptyWithCapacity\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_emptyWithCapacity</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.emptyWithCapacity\">emptyWithCapacity</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L226-L228","name":"Std.HashSet.Raw.size_le_size_erase","line":226,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_le_size_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_le_size_erase\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_le_size_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L222-L224","name":"Std.HashSet.Raw.size_erase_le","line":222,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_erase_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_erase_le\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_erase_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L217-L220","name":"Std.HashSet.Raw.size_erase","line":217,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_erase\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L213-L215","name":"Std.HashSet.Raw.mem_of_mem_erase","line":213,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_of_mem_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_of_mem_erase\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_of_mem_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.erase\">erase</a></span> <span class=\"fn\">k</span></span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L209-L211","name":"Std.HashSet.Raw.contains_of_contains_erase","line":209,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_of_contains_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_of_contains_erase\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_of_contains_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L204-L207","name":"Std.HashSet.Raw.mem_erase","line":204,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_erase\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.erase\">erase</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L199-L202","name":"Std.HashSet.Raw.contains_erase","line":199,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_erase\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L194-L197","name":"Std.HashSet.Raw.isEmpty_erase","line":194,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_erase\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L191-L192","name":"Std.HashSet.Raw.erase_emptyc","line":191,"kind":"def","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.erase_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.erase_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">erase_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.erase\">erase</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L186-L188","name":"Std.HashSet.Raw.erase_empty","line":186,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.erase_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.erase_empty\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">erase_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.erase\">erase</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L182-L184","name":"Std.HashSet.Raw.erase_emptyWithCapacity","line":182,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.erase_emptyWithCapacity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.erase_emptyWithCapacity\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">erase_emptyWithCapacity</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.emptyWithCapacity\">emptyWithCapacity</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.erase\">erase</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.emptyWithCapacity\">emptyWithCapacity</a> <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L178-L180","name":"Std.HashSet.Raw.size_insert_le","line":178,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_insert_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_insert_le\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_insert_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L174-L176","name":"Std.HashSet.Raw.size_le_size_insert","line":174,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_le_size_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_le_size_insert\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_le_size_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L170-L172","name":"Std.HashSet.Raw.size_insert","line":170,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_insert\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L166-L168","name":"Std.HashSet.Raw.mem_insert_self","line":166,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_insert_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_insert_self\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\">insert</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L161-L164","name":"Std.HashSet.Raw.contains_insert_self","line":161,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_insert_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_insert_self\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L155-L159","name":"Std.HashSet.Raw.mem_of_mem_insert'","line":155,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_of_mem_insert'","doc":"This is a restatement of `mem_insert` that is written to exactly match the proof obligation\nin the statement of `get_insert`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_of_mem_insert'\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_of_mem_insert'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\">insert</a></span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a>((<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>) → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L149-L153","name":"Std.HashSet.Raw.contains_of_contains_insert'","line":149,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_of_contains_insert'","doc":"This is a restatement of `contains_insert` that is written to exactly match the proof\nobligation in the statement of `get_insert`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_of_contains_insert'\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_of_contains_insert'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a>((<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L145-L147","name":"Std.HashSet.Raw.mem_of_mem_insert","line":145,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_of_mem_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_of_mem_insert\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_of_mem_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\">insert</a></span> <span class=\"fn\">k</span></span> → <span class=\"fn\">(<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L141-L143","name":"Std.HashSet.Raw.contains_of_contains_insert","line":141,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_of_contains_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_of_contains_insert\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_of_contains_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">(<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L136-L139","name":"Std.HashSet.Raw.mem_insert","line":136,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_insert\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\">insert</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L131-L134","name":"Std.HashSet.Raw.contains_insert","line":131,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_insert\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\">insert</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L129-L129","name":"Std.HashSet.Raw.singleton_eq_insert","line":129,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.singleton_eq_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.singleton_eq_insert\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">singleton_eq_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">a</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\">insert</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L127-L127","name":"Std.HashSet.Raw.insert_eq_insert","line":127,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.insert_eq_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.insert_eq_insert\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">insert_eq_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">Insert.insert</a> <span class=\"fn\">a</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\">insert</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L123-L125","name":"Std.HashSet.Raw.isEmpty_iff_forall_not_mem","line":123,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_iff_forall_not_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_iff_forall_not_mem\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_iff_forall_not_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L119-L121","name":"Std.HashSet.Raw.isEmpty_iff_forall_contains","line":119,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_iff_forall_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_iff_forall_contains\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_iff_forall_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L115-L117","name":"Std.HashSet.Raw.isEmpty_eq_false_iff_exists_mem","line":115,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_eq_false_iff_exists_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_eq_false_iff_exists_mem\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_eq_false_iff_exists_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L111-L113","name":"Std.HashSet.Raw.isEmpty_eq_false_iff_exists_contains_eq_true","line":111,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_eq_false_iff_exists_contains_eq_true","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_eq_false_iff_exists_contains_eq_true\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_eq_false_iff_exists_contains_eq_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L107-L109","name":"Std.HashSet.Raw.not_mem_of_isEmpty","line":107,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.not_mem_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.not_mem_of_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">not_mem_of_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L103-L105","name":"Std.HashSet.Raw.contains_of_isEmpty","line":103,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_of_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_of_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L100-L101","name":"Std.HashSet.Raw.not_mem_emptyc","line":100,"kind":"def","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.not_mem_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.not_mem_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">not_mem_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L96-L97","name":"Std.HashSet.Raw.not_mem_empty","line":96,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.not_mem_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.not_mem_empty\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">not_mem_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L93-L94","name":"Std.HashSet.Raw.contains_emptyc","line":93,"kind":"def","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L89-L90","name":"Std.HashSet.Raw.contains_empty","line":89,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_empty\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L86-L87","name":"Std.HashSet.Raw.not_mem_emptyWithCapacity","line":86,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.not_mem_emptyWithCapacity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.not_mem_emptyWithCapacity\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">not_mem_emptyWithCapacity</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.emptyWithCapacity\">emptyWithCapacity</a> <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L83-L84","name":"Std.HashSet.Raw.contains_emptyWithCapacity","line":83,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_emptyWithCapacity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_emptyWithCapacity\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_emptyWithCapacity</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.emptyWithCapacity\">emptyWithCapacity</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L79-L81","name":"Std.HashSet.Raw.mem_congr","line":79,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_congr\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L75-L77","name":"Std.HashSet.Raw.contains_congr","line":75,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_congr\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L71-L73","name":"Std.HashSet.Raw.contains_iff_mem","line":71,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_iff_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.contains_iff_mem\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_iff_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L68-L69","name":"Std.HashSet.Raw.mem_iff_contains","line":68,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_iff_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.mem_iff_contains\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_iff_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L63-L66","name":"Std.HashSet.Raw.isEmpty_insert","line":63,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_insert\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.insert\">insert</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L60-L61","name":"Std.HashSet.Raw.isEmpty_emptyc","line":60,"kind":"def","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L55-L57","name":"Std.HashSet.Raw.isEmpty_empty","line":55,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_empty\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L51-L53","name":"Std.HashSet.Raw.isEmpty_emptyWithCapacity","line":51,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_emptyWithCapacity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_emptyWithCapacity\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_emptyWithCapacity</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.emptyWithCapacity\">emptyWithCapacity</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L46-L47","name":"Std.HashSet.Raw.isEmpty_eq_size_eq_zero","line":46,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_eq_size_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.isEmpty_eq_size_eq_zero\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_eq_size_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw\">Raw</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">0</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L43-L44","name":"Std.HashSet.Raw.size_emptyc","line":43,"kind":"def","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L38-L40","name":"Std.HashSet.Raw.size_empty","line":38,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_empty\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/HashSet/RawLemmas.lean#L34-L36","name":"Std.HashSet.Raw.size_emptyWithCapacity","line":34,"kind":"theorem","docLink":"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_emptyWithCapacity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashSet/RawLemmas.html#Std.HashSet.Raw.size_emptyWithCapacity\"><span class=\"name\">Std</span>.<span class=\"name\">HashSet</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_emptyWithCapacity</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.emptyWithCapacity\">emptyWithCapacity</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Std/Data/HashSet/Raw.html#Std.HashSet.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"}]}