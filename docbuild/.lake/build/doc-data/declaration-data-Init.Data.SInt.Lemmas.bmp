{"name":"Init.Data.SInt.Lemmas","instances":[{"typeNames":[],"name":"instAssociativeInt8HAdd","className":"Std.Associative"},{"typeNames":[],"name":"instAssociativeInt16HAdd","className":"Std.Associative"},{"typeNames":[],"name":"instAssociativeInt32HAdd","className":"Std.Associative"},{"typeNames":[],"name":"instAssociativeInt64HAdd","className":"Std.Associative"},{"typeNames":[],"name":"instAssociativeISizeHAdd","className":"Std.Associative"},{"typeNames":[],"name":"instCommutativeInt8HAdd","className":"Std.Commutative"},{"typeNames":[],"name":"instCommutativeInt16HAdd","className":"Std.Commutative"},{"typeNames":[],"name":"instCommutativeInt32HAdd","className":"Std.Commutative"},{"typeNames":[],"name":"instCommutativeInt64HAdd","className":"Std.Commutative"},{"typeNames":[],"name":"instCommutativeISizeHAdd","className":"Std.Commutative"},{"typeNames":["OfNat.ofNat"],"name":"instLawfulIdentityInt8HAddOfNat","className":"Std.LawfulIdentity"},{"typeNames":["OfNat.ofNat"],"name":"instLawfulIdentityInt16HAddOfNat","className":"Std.LawfulIdentity"},{"typeNames":["OfNat.ofNat"],"name":"instLawfulIdentityInt32HAddOfNat","className":"Std.LawfulIdentity"},{"typeNames":["OfNat.ofNat"],"name":"instLawfulIdentityInt64HAddOfNat","className":"Std.LawfulIdentity"},{"typeNames":["OfNat.ofNat"],"name":"instLawfulIdentityISizeHAddOfNat","className":"Std.LawfulIdentity"},{"typeNames":[],"name":"instCommutativeInt8HMul","className":"Std.Commutative"},{"typeNames":[],"name":"instCommutativeInt16HMul","className":"Std.Commutative"},{"typeNames":[],"name":"instCommutativeInt32HMul","className":"Std.Commutative"},{"typeNames":[],"name":"instCommutativeInt64HMul","className":"Std.Commutative"},{"typeNames":[],"name":"instCommutativeISizeHMul","className":"Std.Commutative"},{"typeNames":[],"name":"instAssociativeInt8HMul","className":"Std.Associative"},{"typeNames":[],"name":"instAssociativeInt16HMul","className":"Std.Associative"},{"typeNames":[],"name":"instAssociativeInt32HMul","className":"Std.Associative"},{"typeNames":[],"name":"instAssociativeInt64HMul","className":"Std.Associative"},{"typeNames":[],"name":"instAssociativeISizeHMul","className":"Std.Associative"},{"typeNames":["OfNat.ofNat"],"name":"instLawfulCommIdentityInt8HMulOfNat","className":"Std.LawfulCommIdentity"},{"typeNames":["OfNat.ofNat"],"name":"instLawfulCommIdentityInt16HMulOfNat","className":"Std.LawfulCommIdentity"},{"typeNames":["OfNat.ofNat"],"name":"instLawfulCommIdentityInt32HMulOfNat","className":"Std.LawfulCommIdentity"},{"typeNames":["OfNat.ofNat"],"name":"instLawfulCommIdentityInt64HMulOfNat","className":"Std.LawfulCommIdentity"},{"typeNames":["OfNat.ofNat"],"name":"instLawfulCommIdentityISizeHMulOfNat","className":"Std.LawfulCommIdentity"}],"imports":["Init.Data.Nat.Bitwise.Basic","Init.Data.SInt.Basic","Init.Data.BitVec.Basic","Init.Data.BitVec.Bitblast","Init.Data.BitVec.Lemmas","Init.Data.Int.LemmasAux","Init.Data.UInt.Basic","Init.Data.UInt.Lemmas","Init.System.Platform"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3411-L3419","name":"ISize.ofNat_mod","line":3411,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofNat_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofNat_mod\"><span class=\"name\">ISize</span>.<span class=\"name\">ofNat_mod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>))</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>))</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3405-L3410","name":"Int64.ofNat_mod","line":3405,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofNat_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofNat_mod\"><span class=\"name\">Int64</span>.<span class=\"name\">ofNat_mod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3399-L3404","name":"Int32.ofNat_mod","line":3399,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofNat_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofNat_mod\"><span class=\"name\">Int32</span>.<span class=\"name\">ofNat_mod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3393-L3398","name":"Int16.ofNat_mod","line":3393,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofNat_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofNat_mod\"><span class=\"name\">Int16</span>.<span class=\"name\">ofNat_mod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">15</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">15</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3387-L3392","name":"Int8.ofNat_mod","line":3387,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofNat_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofNat_mod\"><span class=\"name\">Int8</span>.<span class=\"name\">ofNat_mod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">7</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">7</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3383-L3385","name":"ISize.ofInt_eq_ofIntLE_mod","line":3383,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofInt_eq_ofIntLE_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofInt_eq_ofIntLE_mod\"><span class=\"name\">ISize</span>.<span class=\"name\">ofInt_eq_ofIntLE_mod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tmod\">tmod</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ofIntLE</a> <span class=\"fn\">a</span> <span class=\"fn\">ha₁</span> <span class=\"fn\">ha₂</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ofIntLE</a> <span class=\"fn\">b</span> <span class=\"fn\">hb₁</span> <span class=\"fn\">hb₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3380-L3382","name":"Int64.ofInt_eq_ofIntLE_mod","line":3380,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofInt_eq_ofIntLE_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofInt_eq_ofIntLE_mod\"><span class=\"name\">Int64</span>.<span class=\"name\">ofInt_eq_ofIntLE_mod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tmod\">tmod</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">ofIntLE</a> <span class=\"fn\">a</span> <span class=\"fn\">ha₁</span> <span class=\"fn\">ha₂</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">ofIntLE</a> <span class=\"fn\">b</span> <span class=\"fn\">hb₁</span> <span class=\"fn\">hb₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3377-L3379","name":"Int32.ofInt_eq_ofIntLE_mod","line":3377,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofInt_eq_ofIntLE_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofInt_eq_ofIntLE_mod\"><span class=\"name\">Int32</span>.<span class=\"name\">ofInt_eq_ofIntLE_mod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tmod\">tmod</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">ofIntLE</a> <span class=\"fn\">a</span> <span class=\"fn\">ha₁</span> <span class=\"fn\">ha₂</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">ofIntLE</a> <span class=\"fn\">b</span> <span class=\"fn\">hb₁</span> <span class=\"fn\">hb₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3374-L3376","name":"Int16.ofInt_eq_ofIntLE_mod","line":3374,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofInt_eq_ofIntLE_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofInt_eq_ofIntLE_mod\"><span class=\"name\">Int16</span>.<span class=\"name\">ofInt_eq_ofIntLE_mod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tmod\">tmod</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\">ofIntLE</a> <span class=\"fn\">a</span> <span class=\"fn\">ha₁</span> <span class=\"fn\">ha₂</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\">ofIntLE</a> <span class=\"fn\">b</span> <span class=\"fn\">hb₁</span> <span class=\"fn\">hb₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3371-L3373","name":"Int8.ofInt_eq_ofIntLE_mod","line":3371,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofInt_eq_ofIntLE_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofInt_eq_ofIntLE_mod\"><span class=\"name\">Int8</span>.<span class=\"name\">ofInt_eq_ofIntLE_mod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tmod\">tmod</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\">ofIntLE</a> <span class=\"fn\">a</span> <span class=\"fn\">ha₁</span> <span class=\"fn\">ha₂</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\">ofIntLE</a> <span class=\"fn\">b</span> <span class=\"fn\">hb₁</span> <span class=\"fn\">hb₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3360-L3369","name":"ISize.ofInt_tmod","line":3360,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofInt_tmod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofInt_tmod\"><span class=\"name\">ISize</span>.<span class=\"name\">ofInt_tmod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tmod\">tmod</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3352-L3359","name":"Int64.ofInt_tmod","line":3352,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofInt_tmod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofInt_tmod\"><span class=\"name\">Int64</span>.<span class=\"name\">ofInt_tmod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tmod\">tmod</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3344-L3351","name":"Int32.ofInt_tmod","line":3344,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofInt_tmod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofInt_tmod\"><span class=\"name\">Int32</span>.<span class=\"name\">ofInt_tmod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tmod\">tmod</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3336-L3343","name":"Int16.ofInt_tmod","line":3336,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofInt_tmod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofInt_tmod\"><span class=\"name\">Int16</span>.<span class=\"name\">ofInt_tmod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tmod\">tmod</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3328-L3335","name":"Int8.ofInt_tmod","line":3328,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofInt_tmod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofInt_tmod\"><span class=\"name\">Int8</span>.<span class=\"name\">ofInt_tmod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tmod\">tmod</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3326-L3326","name":"ISize.toInt64_mod","line":3326,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt64_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt64_mod\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt64_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3324-L3324","name":"Int32.toISize_mod","line":3324,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toISize_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toISize_mod\"><span class=\"name\">Int32</span>.<span class=\"name\">toISize_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3323-L3323","name":"Int32.toInt64_mod","line":3323,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt64_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt64_mod\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt64_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3321-L3321","name":"Int16.toISize_mod","line":3321,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toISize_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toISize_mod\"><span class=\"name\">Int16</span>.<span class=\"name\">toISize_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3320-L3320","name":"Int16.toInt64_mod","line":3320,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt64_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt64_mod\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt64_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3319-L3319","name":"Int16.toInt32_mod","line":3319,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt32_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt32_mod\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt32_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3317-L3317","name":"Int8.toISize_mod","line":3317,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toISize_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toISize_mod\"><span class=\"name\">Int8</span>.<span class=\"name\">toISize_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3316-L3316","name":"Int8.toInt64_mod","line":3316,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt64_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt64_mod\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt64_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3315-L3315","name":"Int8.toInt32_mod","line":3315,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt32_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt32_mod\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt32_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3314-L3314","name":"Int8.toInt16_mod","line":3314,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt16_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt16_mod\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt16_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3311-L3312","name":"ISize.toInt_mod","line":3311,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_mod\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tmod\">tmod</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3309-L3310","name":"Int64.toInt_mod","line":3309,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_mod\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tmod\">tmod</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3307-L3308","name":"Int32.toInt_mod","line":3307,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_mod\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tmod\">tmod</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3305-L3306","name":"Int16.toInt_mod","line":3305,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_mod\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tmod\">tmod</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3303-L3304","name":"Int8.toInt_mod","line":3303,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_mod\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tmod\">tmod</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3300-L3301","name":"ISize.ne_of_lt","line":3300,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ne_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ne_of_lt\"><span class=\"name\">ISize</span>.<span class=\"name\">ne_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3298-L3299","name":"Int64.ne_of_lt","line":3298,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ne_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ne_of_lt\"><span class=\"name\">Int64</span>.<span class=\"name\">ne_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3296-L3297","name":"Int32.ne_of_lt","line":3296,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ne_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ne_of_lt\"><span class=\"name\">Int32</span>.<span class=\"name\">ne_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3294-L3295","name":"Int16.ne_of_lt","line":3294,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ne_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ne_of_lt\"><span class=\"name\">Int16</span>.<span class=\"name\">ne_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3292-L3293","name":"Int8.ne_of_lt","line":3292,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ne_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ne_of_lt\"><span class=\"name\">Int8</span>.<span class=\"name\">ne_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3289-L3290","name":"ISize.sub_lt","line":3289,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.sub_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.sub_lt\"><span class=\"name\">ISize</span>.<span class=\"name\">sub_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3287-L3288","name":"Int64.sub_lt","line":3287,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.sub_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.sub_lt\"><span class=\"name\">Int64</span>.<span class=\"name\">sub_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3285-L3286","name":"Int32.sub_lt","line":3285,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.sub_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.sub_lt\"><span class=\"name\">Int32</span>.<span class=\"name\">sub_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3283-L3284","name":"Int16.sub_lt","line":3283,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.sub_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.sub_lt\"><span class=\"name\">Int16</span>.<span class=\"name\">sub_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3281-L3282","name":"Int8.sub_lt","line":3281,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.sub_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.sub_lt\"><span class=\"name\">Int8</span>.<span class=\"name\">sub_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3278-L3279","name":"ISize.sub_le","line":3278,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.sub_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.sub_le\"><span class=\"name\">ISize</span>.<span class=\"name\">sub_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3276-L3277","name":"Int64.sub_le","line":3276,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.sub_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.sub_le\"><span class=\"name\">Int64</span>.<span class=\"name\">sub_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3274-L3275","name":"Int32.sub_le","line":3274,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.sub_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.sub_le\"><span class=\"name\">Int32</span>.<span class=\"name\">sub_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3272-L3273","name":"Int16.sub_le","line":3272,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.sub_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.sub_le\"><span class=\"name\">Int16</span>.<span class=\"name\">sub_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3270-L3271","name":"Int8.sub_le","line":3270,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.sub_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.sub_le\"><span class=\"name\">Int8</span>.<span class=\"name\">sub_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3263-L3268","name":"ISize.toInt_sub_of_le","line":3263,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_sub_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_sub_of_le\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_sub_of_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3257-L3262","name":"Int64.toInt_sub_of_le","line":3257,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_sub_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_sub_of_le\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_sub_of_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3251-L3256","name":"Int32.toInt_sub_of_le","line":3251,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_sub_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_sub_of_le\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_sub_of_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3245-L3250","name":"Int16.toInt_sub_of_le","line":3245,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_sub_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_sub_of_le\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_sub_of_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3239-L3244","name":"Int8.toInt_sub_of_le","line":3239,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_sub_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_sub_of_le\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_sub_of_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3233-L3237","name":"ISize.toNatClampNeg_sub_of_le","line":3233,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_sub_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_sub_of_le\"><span class=\"name\">ISize</span>.<span class=\"name\">toNatClampNeg_sub_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3228-L3232","name":"Int64.toNatClampNeg_sub_of_le","line":3228,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toNatClampNeg_sub_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toNatClampNeg_sub_of_le\"><span class=\"name\">Int64</span>.<span class=\"name\">toNatClampNeg_sub_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3223-L3227","name":"Int32.toNatClampNeg_sub_of_le","line":3223,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_sub_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_sub_of_le\"><span class=\"name\">Int32</span>.<span class=\"name\">toNatClampNeg_sub_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3218-L3222","name":"Int16.toNatClampNeg_sub_of_le","line":3218,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_sub_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_sub_of_le\"><span class=\"name\">Int16</span>.<span class=\"name\">toNatClampNeg_sub_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3213-L3217","name":"Int8.toNatClampNeg_sub_of_le","line":3213,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_sub_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_sub_of_le\"><span class=\"name\">Int8</span>.<span class=\"name\">toNatClampNeg_sub_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3208-L3211","name":"ISize.sub_nonneg_of_le","line":3208,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.sub_nonneg_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.sub_nonneg_of_le\"><span class=\"name\">ISize</span>.<span class=\"name\">sub_nonneg_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3204-L3207","name":"Int64.sub_nonneg_of_le","line":3204,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.sub_nonneg_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.sub_nonneg_of_le\"><span class=\"name\">Int64</span>.<span class=\"name\">sub_nonneg_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3200-L3203","name":"Int32.sub_nonneg_of_le","line":3200,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.sub_nonneg_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.sub_nonneg_of_le\"><span class=\"name\">Int32</span>.<span class=\"name\">sub_nonneg_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3196-L3199","name":"Int16.sub_nonneg_of_le","line":3196,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.sub_nonneg_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.sub_nonneg_of_le\"><span class=\"name\">Int16</span>.<span class=\"name\">sub_nonneg_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3192-L3195","name":"Int8.sub_nonneg_of_le","line":3192,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.sub_nonneg_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.sub_nonneg_of_le\"><span class=\"name\">Int8</span>.<span class=\"name\">sub_nonneg_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3187-L3190","name":"ISize.zero_le_ofNat_of_lt","line":3187,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.zero_le_ofNat_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.zero_le_ofNat_of_lt\"><span class=\"name\">ISize</span>.<span class=\"name\">zero_le_ofNat_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>))</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3184-L3186","name":"Int64.zero_le_ofNat_of_lt","line":3184,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.zero_le_ofNat_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.zero_le_ofNat_of_lt\"><span class=\"name\">Int64</span>.<span class=\"name\">zero_le_ofNat_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3181-L3183","name":"Int32.zero_le_ofNat_of_lt","line":3181,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.zero_le_ofNat_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.zero_le_ofNat_of_lt\"><span class=\"name\">Int32</span>.<span class=\"name\">zero_le_ofNat_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3178-L3180","name":"Int16.zero_le_ofNat_of_lt","line":3178,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.zero_le_ofNat_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.zero_le_ofNat_of_lt\"><span class=\"name\">Int16</span>.<span class=\"name\">zero_le_ofNat_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">15</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3175-L3177","name":"Int8.zero_le_ofNat_of_lt","line":3175,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.zero_le_ofNat_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.zero_le_ofNat_of_lt\"><span class=\"name\">Int8</span>.<span class=\"name\">zero_le_ofNat_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">7</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3171-L3173","name":"ISize.toUSize_le","line":3171,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toUSize_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toUSize_le\"><span class=\"name\">ISize</span>.<span class=\"name\">toUSize_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3168-L3170","name":"Int64.toUInt64_le","line":3168,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toUInt64_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toUInt64_le\"><span class=\"name\">Int64</span>.<span class=\"name\">toUInt64_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3165-L3167","name":"Int32.toUInt32_le","line":3165,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toUInt32_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toUInt32_le\"><span class=\"name\">Int32</span>.<span class=\"name\">toUInt32_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3162-L3164","name":"Int16.toUInt16_le","line":3162,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toUInt16_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toUInt16_le\"><span class=\"name\">Int16</span>.<span class=\"name\">toUInt16_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3159-L3161","name":"Int8.toUInt8_le","line":3159,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toUInt8_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toUInt8_le\"><span class=\"name\">Int8</span>.<span class=\"name\">toUInt8_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3155-L3157","name":"ISize.toNatClampNeg_le","line":3155,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_le\"><span class=\"name\">ISize</span>.<span class=\"name\">toNatClampNeg_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3152-L3154","name":"Int64.toNatClampNeg_le","line":3152,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toNatClampNeg_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toNatClampNeg_le\"><span class=\"name\">Int64</span>.<span class=\"name\">toNatClampNeg_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3149-L3151","name":"Int32.toNatClampNeg_le","line":3149,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_le\"><span class=\"name\">Int32</span>.<span class=\"name\">toNatClampNeg_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3146-L3148","name":"Int16.toNatClampNeg_le","line":3146,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_le\"><span class=\"name\">Int16</span>.<span class=\"name\">toNatClampNeg_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3143-L3145","name":"Int8.toNatClampNeg_le","line":3143,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_le\"><span class=\"name\">Int8</span>.<span class=\"name\">toNatClampNeg_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3141-L3141","name":"ISize.toUSize_mul","line":3141,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toUSize_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toUSize_mul\"><span class=\"name\">ISize</span>.<span class=\"name\">toUSize_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3140-L3140","name":"Int64.toUInt64_mul","line":3140,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toUInt64_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toUInt64_mul\"><span class=\"name\">Int64</span>.<span class=\"name\">toUInt64_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3139-L3139","name":"Int32.toUInt32_mul","line":3139,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toUInt32_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toUInt32_mul\"><span class=\"name\">Int32</span>.<span class=\"name\">toUInt32_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3138-L3138","name":"Int16.toUInt16_mul","line":3138,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toUInt16_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toUInt16_mul\"><span class=\"name\">Int16</span>.<span class=\"name\">toUInt16_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3137-L3137","name":"Int8.toUInt8_mul","line":3137,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toUInt8_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toUInt8_mul\"><span class=\"name\">Int8</span>.<span class=\"name\">toUInt8_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3135-L3135","name":"ISize.toUSize_sub","line":3135,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toUSize_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toUSize_sub\"><span class=\"name\">ISize</span>.<span class=\"name\">toUSize_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3134-L3134","name":"Int64.toUInt64_sub","line":3134,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toUInt64_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toUInt64_sub\"><span class=\"name\">Int64</span>.<span class=\"name\">toUInt64_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3133-L3133","name":"Int32.toUInt32_sub","line":3133,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toUInt32_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toUInt32_sub\"><span class=\"name\">Int32</span>.<span class=\"name\">toUInt32_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3132-L3132","name":"Int16.toUInt16_sub","line":3132,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toUInt16_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toUInt16_sub\"><span class=\"name\">Int16</span>.<span class=\"name\">toUInt16_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3131-L3131","name":"Int8.toUInt8_sub","line":3131,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toUInt8_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toUInt8_sub\"><span class=\"name\">Int8</span>.<span class=\"name\">toUInt8_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3129-L3129","name":"ISize.toUSize_neg","line":3129,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toUSize_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toUSize_neg\"><span class=\"name\">ISize</span>.<span class=\"name\">toUSize_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3128-L3128","name":"Int64.toUInt64_neg","line":3128,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toUInt64_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toUInt64_neg\"><span class=\"name\">Int64</span>.<span class=\"name\">toUInt64_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3127-L3127","name":"Int32.toUInt32_neg","line":3127,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toUInt32_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toUInt32_neg\"><span class=\"name\">Int32</span>.<span class=\"name\">toUInt32_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3126-L3126","name":"Int16.toUInt16_neg","line":3126,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toUInt16_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toUInt16_neg\"><span class=\"name\">Int16</span>.<span class=\"name\">toUInt16_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3125-L3125","name":"Int8.toUInt8_neg","line":3125,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toUInt8_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toUInt8_neg\"><span class=\"name\">Int8</span>.<span class=\"name\">toUInt8_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3123-L3123","name":"ISize.toUSize_add","line":3123,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toUSize_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toUSize_add\"><span class=\"name\">ISize</span>.<span class=\"name\">toUSize_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3122-L3122","name":"Int64.toUInt64_add","line":3122,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toUInt64_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toUInt64_add\"><span class=\"name\">Int64</span>.<span class=\"name\">toUInt64_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3121-L3121","name":"Int32.toUInt32_add","line":3121,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toUInt32_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toUInt32_add\"><span class=\"name\">Int32</span>.<span class=\"name\">toUInt32_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3120-L3120","name":"Int16.toUInt16_add","line":3120,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toUInt16_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toUInt16_add\"><span class=\"name\">Int16</span>.<span class=\"name\">toUInt16_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3119-L3119","name":"Int8.toUInt8_add","line":3119,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toUInt8_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toUInt8_add\"><span class=\"name\">Int8</span>.<span class=\"name\">toUInt8_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3117-L3117","name":"USize.toISize_mul","line":3117,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#USize.toISize_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#USize.toISize_mul\"><span class=\"name\">USize</span>.<span class=\"name\">toISize_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3116-L3116","name":"UInt64.toInt64_mul","line":3116,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt64.toInt64_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt64.toInt64_mul\"><span class=\"name\">UInt64</span>.<span class=\"name\">toInt64_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3115-L3115","name":"UInt32.toInt32_mul","line":3115,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt32.toInt32_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt32.toInt32_mul\"><span class=\"name\">UInt32</span>.<span class=\"name\">toInt32_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3114-L3114","name":"UInt16.toInt16_mul","line":3114,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt16.toInt16_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt16.toInt16_mul\"><span class=\"name\">UInt16</span>.<span class=\"name\">toInt16_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3113-L3113","name":"UInt8.toInt8_mul","line":3113,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt8.toInt8_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt8.toInt8_mul\"><span class=\"name\">UInt8</span>.<span class=\"name\">toInt8_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3111-L3111","name":"USize.toISize_sub","line":3111,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#USize.toISize_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#USize.toISize_sub\"><span class=\"name\">USize</span>.<span class=\"name\">toISize_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3110-L3110","name":"UInt64.toInt64_sub","line":3110,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt64.toInt64_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt64.toInt64_sub\"><span class=\"name\">UInt64</span>.<span class=\"name\">toInt64_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3109-L3109","name":"UInt32.toInt32_sub","line":3109,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt32.toInt32_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt32.toInt32_sub\"><span class=\"name\">UInt32</span>.<span class=\"name\">toInt32_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3108-L3108","name":"UInt16.toInt16_sub","line":3108,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt16.toInt16_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt16.toInt16_sub\"><span class=\"name\">UInt16</span>.<span class=\"name\">toInt16_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3107-L3107","name":"UInt8.toInt8_sub","line":3107,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt8.toInt8_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt8.toInt8_sub\"><span class=\"name\">UInt8</span>.<span class=\"name\">toInt8_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3105-L3105","name":"USize.toISize_neg","line":3105,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#USize.toISize_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#USize.toISize_neg\"><span class=\"name\">USize</span>.<span class=\"name\">toISize_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3104-L3104","name":"UInt64.toInt64_neg","line":3104,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt64.toInt64_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt64.toInt64_neg\"><span class=\"name\">UInt64</span>.<span class=\"name\">toInt64_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3103-L3103","name":"UInt32.toInt32_neg","line":3103,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt32.toInt32_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt32.toInt32_neg\"><span class=\"name\">UInt32</span>.<span class=\"name\">toInt32_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3102-L3102","name":"UInt16.toInt16_neg","line":3102,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt16.toInt16_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt16.toInt16_neg\"><span class=\"name\">UInt16</span>.<span class=\"name\">toInt16_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3101-L3101","name":"UInt8.toInt8_neg","line":3101,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt8.toInt8_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt8.toInt8_neg\"><span class=\"name\">UInt8</span>.<span class=\"name\">toInt8_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3099-L3099","name":"USize.toISize_add","line":3099,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#USize.toISize_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#USize.toISize_add\"><span class=\"name\">USize</span>.<span class=\"name\">toISize_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3098-L3098","name":"UInt64.toInt64_add","line":3098,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt64.toInt64_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt64.toInt64_add\"><span class=\"name\">UInt64</span>.<span class=\"name\">toInt64_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3097-L3097","name":"UInt32.toInt32_add","line":3097,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt32.toInt32_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt32.toInt32_add\"><span class=\"name\">UInt32</span>.<span class=\"name\">toInt32_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3096-L3096","name":"UInt16.toInt16_add","line":3096,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt16.toInt16_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt16.toInt16_add\"><span class=\"name\">UInt16</span>.<span class=\"name\">toInt16_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3095-L3095","name":"UInt8.toInt8_add","line":3095,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt8.toInt8_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt8.toInt8_add\"><span class=\"name\">UInt8</span>.<span class=\"name\">toInt8_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3092-L3093","name":"ISize.toInt_eq_toNatClampNeg","line":3092,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_eq_toNatClampNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_eq_toNatClampNeg\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_eq_toNatClampNeg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3090-L3091","name":"Int64.toInt_eq_toNatClampNeg","line":3090,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_eq_toNatClampNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_eq_toNatClampNeg\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_eq_toNatClampNeg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg\">toNatClampNeg</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3088-L3089","name":"Int32.toInt_eq_toNatClampNeg","line":3088,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_eq_toNatClampNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_eq_toNatClampNeg\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_eq_toNatClampNeg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\">toNatClampNeg</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3086-L3087","name":"Int16.toInt_eq_toNatClampNeg","line":3086,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_eq_toNatClampNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_eq_toNatClampNeg\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_eq_toNatClampNeg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3084-L3085","name":"Int8.toInt_eq_toNatClampNeg","line":3084,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_eq_toNatClampNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_eq_toNatClampNeg\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_eq_toNatClampNeg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3082-L3082","name":"ISize.lt_or_eq_of_le","line":3082,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.lt_or_eq_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.lt_or_eq_of_le\"><span class=\"name\">ISize</span>.<span class=\"name\">lt_or_eq_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3081-L3081","name":"Int64.lt_or_eq_of_le","line":3081,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.lt_or_eq_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.lt_or_eq_of_le\"><span class=\"name\">Int64</span>.<span class=\"name\">lt_or_eq_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3080-L3080","name":"Int32.lt_or_eq_of_le","line":3080,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.lt_or_eq_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.lt_or_eq_of_le\"><span class=\"name\">Int32</span>.<span class=\"name\">lt_or_eq_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3079-L3079","name":"Int16.lt_or_eq_of_le","line":3079,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.lt_or_eq_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.lt_or_eq_of_le\"><span class=\"name\">Int16</span>.<span class=\"name\">lt_or_eq_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3078-L3078","name":"Int8.lt_or_eq_of_le","line":3078,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.lt_or_eq_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.lt_or_eq_of_le\"><span class=\"name\">Int8</span>.<span class=\"name\">lt_or_eq_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3075-L3076","name":"ISize.le_iff_lt_or_eq","line":3075,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.le_iff_lt_or_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.le_iff_lt_or_eq\"><span class=\"name\">ISize</span>.<span class=\"name\">le_iff_lt_or_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3073-L3074","name":"Int64.le_iff_lt_or_eq","line":3073,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.le_iff_lt_or_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.le_iff_lt_or_eq\"><span class=\"name\">Int64</span>.<span class=\"name\">le_iff_lt_or_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3071-L3072","name":"Int32.le_iff_lt_or_eq","line":3071,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.le_iff_lt_or_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.le_iff_lt_or_eq\"><span class=\"name\">Int32</span>.<span class=\"name\">le_iff_lt_or_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3069-L3070","name":"Int16.le_iff_lt_or_eq","line":3069,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.le_iff_lt_or_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.le_iff_lt_or_eq\"><span class=\"name\">Int16</span>.<span class=\"name\">le_iff_lt_or_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3067-L3068","name":"Int8.le_iff_lt_or_eq","line":3067,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.le_iff_lt_or_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.le_iff_lt_or_eq\"><span class=\"name\">Int8</span>.<span class=\"name\">le_iff_lt_or_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3065-L3065","name":"ISize.le_of_eq","line":3065,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.le_of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.le_of_eq\"><span class=\"name\">ISize</span>.<span class=\"name\">le_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3064-L3064","name":"Int64.le_of_eq","line":3064,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.le_of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.le_of_eq\"><span class=\"name\">Int64</span>.<span class=\"name\">le_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3063-L3063","name":"Int32.le_of_eq","line":3063,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.le_of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.le_of_eq\"><span class=\"name\">Int32</span>.<span class=\"name\">le_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3062-L3062","name":"Int16.le_of_eq","line":3062,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.le_of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.le_of_eq\"><span class=\"name\">Int16</span>.<span class=\"name\">le_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3061-L3061","name":"Int8.le_of_eq","line":3061,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.le_of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.le_of_eq\"><span class=\"name\">Int8</span>.<span class=\"name\">le_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3059-L3059","name":"ISize.le_or_lt","line":3059,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.le_or_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.le_or_lt\"><span class=\"name\">ISize</span>.<span class=\"name\">le_or_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3058-L3058","name":"Int64.le_or_lt","line":3058,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.le_or_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.le_or_lt\"><span class=\"name\">Int64</span>.<span class=\"name\">le_or_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3057-L3057","name":"Int32.le_or_lt","line":3057,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.le_or_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.le_or_lt\"><span class=\"name\">Int32</span>.<span class=\"name\">le_or_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3056-L3056","name":"Int16.le_or_lt","line":3056,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.le_or_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.le_or_lt\"><span class=\"name\">Int16</span>.<span class=\"name\">le_or_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3055-L3055","name":"Int8.le_or_lt","line":3055,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.le_or_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.le_or_lt\"><span class=\"name\">Int8</span>.<span class=\"name\">le_or_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3052-L3053","name":"ISize.lt_or_le","line":3052,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.lt_or_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.lt_or_le\"><span class=\"name\">ISize</span>.<span class=\"name\">lt_or_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3050-L3051","name":"Int64.lt_or_le","line":3050,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.lt_or_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.lt_or_le\"><span class=\"name\">Int64</span>.<span class=\"name\">lt_or_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3048-L3049","name":"Int32.lt_or_le","line":3048,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.lt_or_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.lt_or_le\"><span class=\"name\">Int32</span>.<span class=\"name\">lt_or_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3046-L3047","name":"Int16.lt_or_le","line":3046,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.lt_or_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.lt_or_le\"><span class=\"name\">Int16</span>.<span class=\"name\">lt_or_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3044-L3045","name":"Int8.lt_or_le","line":3044,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.lt_or_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.lt_or_le\"><span class=\"name\">Int8</span>.<span class=\"name\">lt_or_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3041-L3042","name":"ISize.lt_or_lt_of_ne","line":3041,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.lt_or_lt_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.lt_or_lt_of_ne\"><span class=\"name\">ISize</span>.<span class=\"name\">lt_or_lt_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3039-L3040","name":"Int64.lt_or_lt_of_ne","line":3039,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.lt_or_lt_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.lt_or_lt_of_ne\"><span class=\"name\">Int64</span>.<span class=\"name\">lt_or_lt_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3037-L3038","name":"Int32.lt_or_lt_of_ne","line":3037,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.lt_or_lt_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.lt_or_lt_of_ne\"><span class=\"name\">Int32</span>.<span class=\"name\">lt_or_lt_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3035-L3036","name":"Int16.lt_or_lt_of_ne","line":3035,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.lt_or_lt_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.lt_or_lt_of_ne\"><span class=\"name\">Int16</span>.<span class=\"name\">lt_or_lt_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3033-L3034","name":"Int8.lt_or_lt_of_ne","line":3033,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.lt_or_lt_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.lt_or_lt_of_ne\"><span class=\"name\">Int8</span>.<span class=\"name\">lt_or_lt_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3031-L3031","name":"ISize.add_sub_cancel","line":3031,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.add_sub_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.add_sub_cancel\"><span class=\"name\">ISize</span>.<span class=\"name\">add_sub_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3030-L3030","name":"Int64.add_sub_cancel","line":3030,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.add_sub_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.add_sub_cancel\"><span class=\"name\">Int64</span>.<span class=\"name\">add_sub_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3029-L3029","name":"Int32.add_sub_cancel","line":3029,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.add_sub_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.add_sub_cancel\"><span class=\"name\">Int32</span>.<span class=\"name\">add_sub_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3028-L3028","name":"Int16.add_sub_cancel","line":3028,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.add_sub_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.add_sub_cancel\"><span class=\"name\">Int16</span>.<span class=\"name\">add_sub_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3027-L3027","name":"Int8.add_sub_cancel","line":3027,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.add_sub_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.add_sub_cancel\"><span class=\"name\">Int8</span>.<span class=\"name\">add_sub_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3025-L3025","name":"ISize.neg_eq_neg_one_mul","line":3025,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.neg_eq_neg_one_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.neg_eq_neg_one_mul\"><span class=\"name\">ISize</span>.<span class=\"name\">neg_eq_neg_one_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3024-L3024","name":"Int64.neg_eq_neg_one_mul","line":3024,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.neg_eq_neg_one_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.neg_eq_neg_one_mul\"><span class=\"name\">Int64</span>.<span class=\"name\">neg_eq_neg_one_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3023-L3023","name":"Int32.neg_eq_neg_one_mul","line":3023,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.neg_eq_neg_one_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.neg_eq_neg_one_mul\"><span class=\"name\">Int32</span>.<span class=\"name\">neg_eq_neg_one_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3022-L3022","name":"Int16.neg_eq_neg_one_mul","line":3022,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.neg_eq_neg_one_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.neg_eq_neg_one_mul\"><span class=\"name\">Int16</span>.<span class=\"name\">neg_eq_neg_one_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3021-L3021","name":"Int8.neg_eq_neg_one_mul","line":3021,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.neg_eq_neg_one_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.neg_eq_neg_one_mul\"><span class=\"name\">Int8</span>.<span class=\"name\">neg_eq_neg_one_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3019-L3019","name":"ISize.add_neg_eq_sub","line":3019,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.add_neg_eq_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.add_neg_eq_sub\"><span class=\"name\">ISize</span>.<span class=\"name\">add_neg_eq_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3018-L3018","name":"Int64.add_neg_eq_sub","line":3018,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.add_neg_eq_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.add_neg_eq_sub\"><span class=\"name\">Int64</span>.<span class=\"name\">add_neg_eq_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3017-L3017","name":"Int32.add_neg_eq_sub","line":3017,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.add_neg_eq_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.add_neg_eq_sub\"><span class=\"name\">Int32</span>.<span class=\"name\">add_neg_eq_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3016-L3016","name":"Int16.add_neg_eq_sub","line":3016,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.add_neg_eq_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.add_neg_eq_sub\"><span class=\"name\">Int16</span>.<span class=\"name\">add_neg_eq_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3015-L3015","name":"Int8.add_neg_eq_sub","line":3015,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.add_neg_eq_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.add_neg_eq_sub\"><span class=\"name\">Int8</span>.<span class=\"name\">add_neg_eq_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3012-L3013","name":"ISize.lt_asymm","line":3012,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.lt_asymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.lt_asymm\"><span class=\"name\">ISize</span>.<span class=\"name\">lt_asymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3010-L3011","name":"Int64.lt_asymm","line":3010,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.lt_asymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.lt_asymm\"><span class=\"name\">Int64</span>.<span class=\"name\">lt_asymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3008-L3009","name":"Int32.lt_asymm","line":3008,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.lt_asymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.lt_asymm\"><span class=\"name\">Int32</span>.<span class=\"name\">lt_asymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3006-L3007","name":"Int16.lt_asymm","line":3006,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.lt_asymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.lt_asymm\"><span class=\"name\">Int16</span>.<span class=\"name\">lt_asymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3004-L3005","name":"Int8.lt_asymm","line":3004,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.lt_asymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.lt_asymm\"><span class=\"name\">Int8</span>.<span class=\"name\">lt_asymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L3001-L3002","name":"ISize.le_total","line":3001,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.le_total","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.le_total\"><span class=\"name\">ISize</span>.<span class=\"name\">le_total</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2999-L3000","name":"Int64.le_total","line":2999,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.le_total","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.le_total\"><span class=\"name\">Int64</span>.<span class=\"name\">le_total</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2997-L2998","name":"Int32.le_total","line":2997,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.le_total","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.le_total\"><span class=\"name\">Int32</span>.<span class=\"name\">le_total</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2995-L2996","name":"Int16.le_total","line":2995,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.le_total","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.le_total\"><span class=\"name\">Int16</span>.<span class=\"name\">le_total</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2993-L2994","name":"Int8.le_total","line":2993,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.le_total","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.le_total\"><span class=\"name\">Int8</span>.<span class=\"name\">le_total</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2990-L2991","name":"ISize.lt_trans","line":2990,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.lt_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.lt_trans\"><span class=\"name\">ISize</span>.<span class=\"name\">lt_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2988-L2989","name":"Int64.lt_trans","line":2988,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.lt_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.lt_trans\"><span class=\"name\">Int64</span>.<span class=\"name\">lt_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2986-L2987","name":"Int32.lt_trans","line":2986,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.lt_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.lt_trans\"><span class=\"name\">Int32</span>.<span class=\"name\">lt_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2984-L2985","name":"Int16.lt_trans","line":2984,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.lt_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.lt_trans\"><span class=\"name\">Int16</span>.<span class=\"name\">lt_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2982-L2983","name":"Int8.lt_trans","line":2982,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.lt_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.lt_trans\"><span class=\"name\">Int8</span>.<span class=\"name\">lt_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2979-L2980","name":"ISize.le_trans","line":2979,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.le_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.le_trans\"><span class=\"name\">ISize</span>.<span class=\"name\">le_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2977-L2978","name":"Int64.le_trans","line":2977,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.le_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.le_trans\"><span class=\"name\">Int64</span>.<span class=\"name\">le_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2975-L2976","name":"Int32.le_trans","line":2975,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.le_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.le_trans\"><span class=\"name\">Int32</span>.<span class=\"name\">le_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2973-L2974","name":"Int16.le_trans","line":2973,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.le_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.le_trans\"><span class=\"name\">Int16</span>.<span class=\"name\">le_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2971-L2972","name":"Int8.le_trans","line":2971,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.le_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.le_trans\"><span class=\"name\">Int8</span>.<span class=\"name\">le_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2968-L2969","name":"ISize.not_lt","line":2968,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.not_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.not_lt\"><span class=\"name\">ISize</span>.<span class=\"name\">not_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2966-L2967","name":"Int64.not_lt","line":2966,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.not_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.not_lt\"><span class=\"name\">Int64</span>.<span class=\"name\">not_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2964-L2965","name":"Int32.not_lt","line":2964,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.not_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.not_lt\"><span class=\"name\">Int32</span>.<span class=\"name\">not_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2962-L2963","name":"Int16.not_lt","line":2962,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.not_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.not_lt\"><span class=\"name\">Int16</span>.<span class=\"name\">not_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2960-L2961","name":"Int8.not_lt","line":2960,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.not_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.not_lt\"><span class=\"name\">Int8</span>.<span class=\"name\">not_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2958-L2958","name":"ISize.mod_self","line":2958,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.mod_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.mod_self\"><span class=\"name\">ISize</span>.<span class=\"name\">mod_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2957-L2957","name":"Int64.mod_self","line":2957,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.mod_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.mod_self\"><span class=\"name\">Int64</span>.<span class=\"name\">mod_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2956-L2956","name":"Int32.mod_self","line":2956,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.mod_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.mod_self\"><span class=\"name\">Int32</span>.<span class=\"name\">mod_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2955-L2955","name":"Int16.mod_self","line":2955,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.mod_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.mod_self\"><span class=\"name\">Int16</span>.<span class=\"name\">mod_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2954-L2954","name":"Int8.mod_self","line":2954,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.mod_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.mod_self\"><span class=\"name\">Int8</span>.<span class=\"name\">mod_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2952-L2952","name":"ISize.mod_one","line":2952,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.mod_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.mod_one\"><span class=\"name\">ISize</span>.<span class=\"name\">mod_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2951-L2951","name":"Int64.mod_one","line":2951,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.mod_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.mod_one\"><span class=\"name\">Int64</span>.<span class=\"name\">mod_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2950-L2950","name":"Int32.mod_one","line":2950,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.mod_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.mod_one\"><span class=\"name\">Int32</span>.<span class=\"name\">mod_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2949-L2949","name":"Int16.mod_one","line":2949,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.mod_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.mod_one\"><span class=\"name\">Int16</span>.<span class=\"name\">mod_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2948-L2948","name":"Int8.mod_one","line":2948,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.mod_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.mod_one\"><span class=\"name\">Int8</span>.<span class=\"name\">mod_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2946-L2946","name":"ISize.zero_mod","line":2946,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.zero_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.zero_mod\"><span class=\"name\">ISize</span>.<span class=\"name\">zero_mod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2945-L2945","name":"Int64.zero_mod","line":2945,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.zero_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.zero_mod\"><span class=\"name\">Int64</span>.<span class=\"name\">zero_mod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2944-L2944","name":"Int32.zero_mod","line":2944,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.zero_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.zero_mod\"><span class=\"name\">Int32</span>.<span class=\"name\">zero_mod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2943-L2943","name":"Int16.zero_mod","line":2943,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.zero_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.zero_mod\"><span class=\"name\">Int16</span>.<span class=\"name\">zero_mod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2942-L2942","name":"Int8.zero_mod","line":2942,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.zero_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.zero_mod\"><span class=\"name\">Int8</span>.<span class=\"name\">zero_mod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2940-L2940","name":"ISize.mod_zero","line":2940,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.mod_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.mod_zero\"><span class=\"name\">ISize</span>.<span class=\"name\">mod_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2939-L2939","name":"Int64.mod_zero","line":2939,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.mod_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.mod_zero\"><span class=\"name\">Int64</span>.<span class=\"name\">mod_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2938-L2938","name":"Int32.mod_zero","line":2938,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.mod_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.mod_zero\"><span class=\"name\">Int32</span>.<span class=\"name\">mod_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2937-L2937","name":"Int16.mod_zero","line":2937,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.mod_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.mod_zero\"><span class=\"name\">Int16</span>.<span class=\"name\">mod_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2936-L2936","name":"Int8.mod_zero","line":2936,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.mod_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.mod_zero\"><span class=\"name\">Int8</span>.<span class=\"name\">mod_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2926-L2934","name":"ISize.div_self","line":2926,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.div_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.div_self\"><span class=\"name\">ISize</span>.<span class=\"name\">div_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2924-L2925","name":"Int64.div_self","line":2924,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.div_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.div_self\"><span class=\"name\">Int64</span>.<span class=\"name\">div_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2922-L2923","name":"Int32.div_self","line":2922,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.div_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.div_self\"><span class=\"name\">Int32</span>.<span class=\"name\">div_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2920-L2921","name":"Int16.div_self","line":2920,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.div_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.div_self\"><span class=\"name\">Int16</span>.<span class=\"name\">div_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2918-L2919","name":"Int8.div_self","line":2918,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.div_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.div_self\"><span class=\"name\">Int8</span>.<span class=\"name\">div_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2916-L2916","name":"ISize.div_one","line":2916,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.div_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.div_one\"><span class=\"name\">ISize</span>.<span class=\"name\">div_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2915-L2915","name":"Int64.div_one","line":2915,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.div_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.div_one\"><span class=\"name\">Int64</span>.<span class=\"name\">div_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2914-L2914","name":"Int32.div_one","line":2914,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.div_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.div_one\"><span class=\"name\">Int32</span>.<span class=\"name\">div_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2913-L2913","name":"Int16.div_one","line":2913,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.div_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.div_one\"><span class=\"name\">Int16</span>.<span class=\"name\">div_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2912-L2912","name":"Int8.div_one","line":2912,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.div_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.div_one\"><span class=\"name\">Int8</span>.<span class=\"name\">div_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2910-L2910","name":"ISize.div_zero","line":2910,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.div_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.div_zero\"><span class=\"name\">ISize</span>.<span class=\"name\">div_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2909-L2909","name":"Int64.div_zero","line":2909,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.div_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.div_zero\"><span class=\"name\">Int64</span>.<span class=\"name\">div_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2908-L2908","name":"Int32.div_zero","line":2908,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.div_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.div_zero\"><span class=\"name\">Int32</span>.<span class=\"name\">div_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2907-L2907","name":"Int16.div_zero","line":2907,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.div_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.div_zero\"><span class=\"name\">Int16</span>.<span class=\"name\">div_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2906-L2906","name":"Int8.div_zero","line":2906,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.div_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.div_zero\"><span class=\"name\">Int8</span>.<span class=\"name\">div_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2904-L2904","name":"ISize.zero_div","line":2904,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.zero_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.zero_div\"><span class=\"name\">ISize</span>.<span class=\"name\">zero_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2903-L2903","name":"Int64.zero_div","line":2903,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.zero_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.zero_div\"><span class=\"name\">Int64</span>.<span class=\"name\">zero_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2902-L2902","name":"Int32.zero_div","line":2902,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.zero_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.zero_div\"><span class=\"name\">Int32</span>.<span class=\"name\">zero_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2901-L2901","name":"Int16.zero_div","line":2901,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.zero_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.zero_div\"><span class=\"name\">Int16</span>.<span class=\"name\">zero_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2900-L2900","name":"Int8.zero_div","line":2900,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.zero_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.zero_div\"><span class=\"name\">Int8</span>.<span class=\"name\">zero_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2897-L2898","name":"ISize.maxValue_le_iff","line":2897,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.maxValue_le_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.maxValue_le_iff\"><span class=\"name\">ISize</span>.<span class=\"name\">maxValue_le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2895-L2896","name":"Int64.maxValue_le_iff","line":2895,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.maxValue_le_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.maxValue_le_iff\"><span class=\"name\">Int64</span>.<span class=\"name\">maxValue_le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2893-L2894","name":"Int32.maxValue_le_iff","line":2893,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.maxValue_le_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.maxValue_le_iff\"><span class=\"name\">Int32</span>.<span class=\"name\">maxValue_le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2891-L2892","name":"Int16.maxValue_le_iff","line":2891,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.maxValue_le_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.maxValue_le_iff\"><span class=\"name\">Int16</span>.<span class=\"name\">maxValue_le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2889-L2890","name":"Int8.maxValue_le_iff","line":2889,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.maxValue_le_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.maxValue_le_iff\"><span class=\"name\">Int8</span>.<span class=\"name\">maxValue_le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2886-L2887","name":"ISize.le_minValue_iff","line":2886,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.le_minValue_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.le_minValue_iff\"><span class=\"name\">ISize</span>.<span class=\"name\">le_minValue_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2884-L2885","name":"Int64.le_minValue_iff","line":2884,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.le_minValue_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.le_minValue_iff\"><span class=\"name\">Int64</span>.<span class=\"name\">le_minValue_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2882-L2883","name":"Int32.le_minValue_iff","line":2882,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.le_minValue_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.le_minValue_iff\"><span class=\"name\">Int32</span>.<span class=\"name\">le_minValue_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2880-L2881","name":"Int16.le_minValue_iff","line":2880,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.le_minValue_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.le_minValue_iff\"><span class=\"name\">Int16</span>.<span class=\"name\">le_minValue_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2878-L2879","name":"Int8.le_minValue_iff","line":2878,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.le_minValue_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.le_minValue_iff\"><span class=\"name\">Int8</span>.<span class=\"name\">le_minValue_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2876-L2876","name":"ISize.le_antisymm","line":2876,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.le_antisymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.le_antisymm\"><span class=\"name\">ISize</span>.<span class=\"name\">le_antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2875-L2875","name":"Int64.le_antisymm","line":2875,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.le_antisymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.le_antisymm\"><span class=\"name\">Int64</span>.<span class=\"name\">le_antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2874-L2874","name":"Int32.le_antisymm","line":2874,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.le_antisymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.le_antisymm\"><span class=\"name\">Int32</span>.<span class=\"name\">le_antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2873-L2873","name":"Int16.le_antisymm","line":2873,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.le_antisymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.le_antisymm\"><span class=\"name\">Int16</span>.<span class=\"name\">le_antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2872-L2872","name":"Int8.le_antisymm","line":2872,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.le_antisymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.le_antisymm\"><span class=\"name\">Int8</span>.<span class=\"name\">le_antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2869-L2870","name":"ISize.le_antisymm_iff","line":2869,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.le_antisymm_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.le_antisymm_iff\"><span class=\"name\">ISize</span>.<span class=\"name\">le_antisymm_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2867-L2868","name":"Int64.le_antisymm_iff","line":2867,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.le_antisymm_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.le_antisymm_iff\"><span class=\"name\">Int64</span>.<span class=\"name\">le_antisymm_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2865-L2866","name":"Int32.le_antisymm_iff","line":2865,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.le_antisymm_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.le_antisymm_iff\"><span class=\"name\">Int32</span>.<span class=\"name\">le_antisymm_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2863-L2864","name":"Int16.le_antisymm_iff","line":2863,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.le_antisymm_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.le_antisymm_iff\"><span class=\"name\">Int16</span>.<span class=\"name\">le_antisymm_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2861-L2862","name":"Int8.le_antisymm_iff","line":2861,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.le_antisymm_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.le_antisymm_iff\"><span class=\"name\">Int8</span>.<span class=\"name\">le_antisymm_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2859-L2859","name":"ISize.le_rfl","line":2859,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.le_rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.le_rfl\"><span class=\"name\">ISize</span>.<span class=\"name\">le_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2858-L2858","name":"Int64.le_rfl","line":2858,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.le_rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.le_rfl\"><span class=\"name\">Int64</span>.<span class=\"name\">le_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2857-L2857","name":"Int32.le_rfl","line":2857,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.le_rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.le_rfl\"><span class=\"name\">Int32</span>.<span class=\"name\">le_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2856-L2856","name":"Int16.le_rfl","line":2856,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.le_rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.le_rfl\"><span class=\"name\">Int16</span>.<span class=\"name\">le_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2855-L2855","name":"Int8.le_rfl","line":2855,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.le_rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.le_rfl\"><span class=\"name\">Int8</span>.<span class=\"name\">le_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2853-L2853","name":"ISize.le_refl","line":2853,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.le_refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.le_refl\"><span class=\"name\">ISize</span>.<span class=\"name\">le_refl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2852-L2852","name":"Int64.le_refl","line":2852,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.le_refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.le_refl\"><span class=\"name\">Int64</span>.<span class=\"name\">le_refl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2851-L2851","name":"Int32.le_refl","line":2851,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.le_refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.le_refl\"><span class=\"name\">Int32</span>.<span class=\"name\">le_refl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2850-L2850","name":"Int16.le_refl","line":2850,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.le_refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.le_refl\"><span class=\"name\">Int16</span>.<span class=\"name\">le_refl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2849-L2849","name":"Int8.le_refl","line":2849,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.le_refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.le_refl\"><span class=\"name\">Int8</span>.<span class=\"name\">le_refl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2846-L2847","name":"ISize.not_maxValue_lt","line":2846,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.not_maxValue_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.not_maxValue_lt\"><span class=\"name\">ISize</span>.<span class=\"name\">not_maxValue_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2844-L2845","name":"Int64.not_maxValue_lt","line":2844,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.not_maxValue_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.not_maxValue_lt\"><span class=\"name\">Int64</span>.<span class=\"name\">not_maxValue_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2842-L2843","name":"Int32.not_maxValue_lt","line":2842,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.not_maxValue_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.not_maxValue_lt\"><span class=\"name\">Int32</span>.<span class=\"name\">not_maxValue_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2840-L2841","name":"Int16.not_maxValue_lt","line":2840,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.not_maxValue_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.not_maxValue_lt\"><span class=\"name\">Int16</span>.<span class=\"name\">not_maxValue_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2838-L2839","name":"Int8.not_maxValue_lt","line":2838,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.not_maxValue_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.not_maxValue_lt\"><span class=\"name\">Int8</span>.<span class=\"name\">not_maxValue_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2835-L2836","name":"ISize.not_lt_minValue","line":2835,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.not_lt_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.not_lt_minValue\"><span class=\"name\">ISize</span>.<span class=\"name\">not_lt_minValue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2833-L2834","name":"Int64.not_lt_minValue","line":2833,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.not_lt_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.not_lt_minValue\"><span class=\"name\">Int64</span>.<span class=\"name\">not_lt_minValue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2831-L2832","name":"Int32.not_lt_minValue","line":2831,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.not_lt_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.not_lt_minValue\"><span class=\"name\">Int32</span>.<span class=\"name\">not_lt_minValue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2829-L2830","name":"Int16.not_lt_minValue","line":2829,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.not_lt_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.not_lt_minValue\"><span class=\"name\">Int16</span>.<span class=\"name\">not_lt_minValue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2827-L2828","name":"Int8.not_lt_minValue","line":2827,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.not_lt_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.not_lt_minValue\"><span class=\"name\">Int8</span>.<span class=\"name\">not_lt_minValue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2825-L2825","name":"ISize.le_maxValue","line":2825,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.le_maxValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.le_maxValue\"><span class=\"name\">ISize</span>.<span class=\"name\">le_maxValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2824-L2824","name":"Int64.le_maxValue","line":2824,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.le_maxValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.le_maxValue\"><span class=\"name\">Int64</span>.<span class=\"name\">le_maxValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2823-L2823","name":"Int32.le_maxValue","line":2823,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.le_maxValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.le_maxValue\"><span class=\"name\">Int32</span>.<span class=\"name\">le_maxValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2822-L2822","name":"Int16.le_maxValue","line":2822,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.le_maxValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.le_maxValue\"><span class=\"name\">Int16</span>.<span class=\"name\">le_maxValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2821-L2821","name":"Int8.le_maxValue","line":2821,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.le_maxValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.le_maxValue\"><span class=\"name\">Int8</span>.<span class=\"name\">le_maxValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2819-L2819","name":"ISize.minValue_le","line":2819,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.minValue_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.minValue_le\"><span class=\"name\">ISize</span>.<span class=\"name\">minValue_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2818-L2818","name":"Int64.minValue_le","line":2818,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.minValue_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.minValue_le\"><span class=\"name\">Int64</span>.<span class=\"name\">minValue_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2817-L2817","name":"Int32.minValue_le","line":2817,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.minValue_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.minValue_le\"><span class=\"name\">Int32</span>.<span class=\"name\">minValue_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2816-L2816","name":"Int16.minValue_le","line":2816,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.minValue_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.minValue_le\"><span class=\"name\">Int16</span>.<span class=\"name\">minValue_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2815-L2815","name":"Int8.minValue_le","line":2815,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.minValue_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.minValue_le\"><span class=\"name\">Int8</span>.<span class=\"name\">minValue_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2812-L2813","name":"ISize.lt_of_lt_of_le","line":2812,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.lt_of_lt_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.lt_of_lt_of_le\"><span class=\"name\">ISize</span>.<span class=\"name\">lt_of_lt_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2810-L2811","name":"Int64.lt_of_lt_of_le","line":2810,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.lt_of_lt_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.lt_of_lt_of_le\"><span class=\"name\">Int64</span>.<span class=\"name\">lt_of_lt_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2808-L2809","name":"Int32.lt_of_lt_of_le","line":2808,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.lt_of_lt_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.lt_of_lt_of_le\"><span class=\"name\">Int32</span>.<span class=\"name\">lt_of_lt_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2806-L2807","name":"Int16.lt_of_lt_of_le","line":2806,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.lt_of_lt_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.lt_of_lt_of_le\"><span class=\"name\">Int16</span>.<span class=\"name\">lt_of_lt_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2804-L2805","name":"Int8.lt_of_lt_of_le","line":2804,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.lt_of_lt_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.lt_of_lt_of_le\"><span class=\"name\">Int8</span>.<span class=\"name\">lt_of_lt_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2801-L2802","name":"ISize.lt_of_le_of_lt","line":2801,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.lt_of_le_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.lt_of_le_of_lt\"><span class=\"name\">ISize</span>.<span class=\"name\">lt_of_le_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2799-L2800","name":"Int64.lt_of_le_of_lt","line":2799,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.lt_of_le_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.lt_of_le_of_lt\"><span class=\"name\">Int64</span>.<span class=\"name\">lt_of_le_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2797-L2798","name":"Int32.lt_of_le_of_lt","line":2797,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.lt_of_le_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.lt_of_le_of_lt\"><span class=\"name\">Int32</span>.<span class=\"name\">lt_of_le_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2795-L2796","name":"Int16.lt_of_le_of_lt","line":2795,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.lt_of_le_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.lt_of_le_of_lt\"><span class=\"name\">Int16</span>.<span class=\"name\">lt_of_le_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2793-L2794","name":"Int8.lt_of_le_of_lt","line":2793,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.lt_of_le_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.lt_of_le_of_lt\"><span class=\"name\">Int8</span>.<span class=\"name\">lt_of_le_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2791-L2791","name":"ISize.lt_irrefl","line":2791,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.lt_irrefl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.lt_irrefl\"><span class=\"name\">ISize</span>.<span class=\"name\">lt_irrefl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2790-L2790","name":"Int64.lt_irrefl","line":2790,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.lt_irrefl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.lt_irrefl\"><span class=\"name\">Int64</span>.<span class=\"name\">lt_irrefl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2789-L2789","name":"Int32.lt_irrefl","line":2789,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.lt_irrefl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.lt_irrefl\"><span class=\"name\">Int32</span>.<span class=\"name\">lt_irrefl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2788-L2788","name":"Int16.lt_irrefl","line":2788,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.lt_irrefl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.lt_irrefl\"><span class=\"name\">Int16</span>.<span class=\"name\">lt_irrefl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2787-L2787","name":"Int8.lt_irrefl","line":2787,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.lt_irrefl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.lt_irrefl\"><span class=\"name\">Int8</span>.<span class=\"name\">lt_irrefl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2784-L2785","name":"ISize.lt_iff_le_and_ne","line":2784,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.lt_iff_le_and_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.lt_iff_le_and_ne\"><span class=\"name\">ISize</span>.<span class=\"name\">lt_iff_le_and_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2782-L2783","name":"Int64.lt_iff_le_and_ne","line":2782,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.lt_iff_le_and_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.lt_iff_le_and_ne\"><span class=\"name\">Int64</span>.<span class=\"name\">lt_iff_le_and_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2780-L2781","name":"Int32.lt_iff_le_and_ne","line":2780,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.lt_iff_le_and_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.lt_iff_le_and_ne\"><span class=\"name\">Int32</span>.<span class=\"name\">lt_iff_le_and_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2778-L2779","name":"Int16.lt_iff_le_and_ne","line":2778,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.lt_iff_le_and_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.lt_iff_le_and_ne\"><span class=\"name\">Int16</span>.<span class=\"name\">lt_iff_le_and_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2776-L2777","name":"Int8.lt_iff_le_and_ne","line":2776,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.lt_iff_le_and_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.lt_iff_le_and_ne\"><span class=\"name\">Int8</span>.<span class=\"name\">lt_iff_le_and_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2773-L2774","name":"ISize.lt_of_le_of_ne","line":2773,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.lt_of_le_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.lt_of_le_of_ne\"><span class=\"name\">ISize</span>.<span class=\"name\">lt_of_le_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2771-L2772","name":"Int64.lt_of_le_of_ne","line":2771,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.lt_of_le_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.lt_of_le_of_ne\"><span class=\"name\">Int64</span>.<span class=\"name\">lt_of_le_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2769-L2770","name":"Int32.lt_of_le_of_ne","line":2769,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.lt_of_le_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.lt_of_le_of_ne\"><span class=\"name\">Int32</span>.<span class=\"name\">lt_of_le_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2767-L2768","name":"Int16.lt_of_le_of_ne","line":2767,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.lt_of_le_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.lt_of_le_of_ne\"><span class=\"name\">Int16</span>.<span class=\"name\">lt_of_le_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2765-L2766","name":"Int8.lt_of_le_of_ne","line":2765,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.lt_of_le_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.lt_of_le_of_ne\"><span class=\"name\">Int8</span>.<span class=\"name\">lt_of_le_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2762-L2763","name":"ISize.le_of_lt","line":2762,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.le_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.le_of_lt\"><span class=\"name\">ISize</span>.<span class=\"name\">le_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2760-L2761","name":"Int64.le_of_lt","line":2760,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.le_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.le_of_lt\"><span class=\"name\">Int64</span>.<span class=\"name\">le_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2758-L2759","name":"Int32.le_of_lt","line":2758,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.le_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.le_of_lt\"><span class=\"name\">Int32</span>.<span class=\"name\">le_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2756-L2757","name":"Int16.le_of_lt","line":2756,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.le_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.le_of_lt\"><span class=\"name\">Int16</span>.<span class=\"name\">le_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2754-L2755","name":"Int8.le_of_lt","line":2754,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.le_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.le_of_lt\"><span class=\"name\">Int8</span>.<span class=\"name\">le_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2751-L2752","name":"ISize.neg_mul_not_eq_add_mul","line":2751,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.neg_mul_not_eq_add_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.neg_mul_not_eq_add_mul\"><span class=\"name\">ISize</span>.<span class=\"name\">neg_mul_not_eq_add_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2749-L2750","name":"Int64.neg_mul_not_eq_add_mul","line":2749,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.neg_mul_not_eq_add_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.neg_mul_not_eq_add_mul\"><span class=\"name\">Int64</span>.<span class=\"name\">neg_mul_not_eq_add_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2747-L2748","name":"Int32.neg_mul_not_eq_add_mul","line":2747,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.neg_mul_not_eq_add_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.neg_mul_not_eq_add_mul\"><span class=\"name\">Int32</span>.<span class=\"name\">neg_mul_not_eq_add_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2745-L2746","name":"Int16.neg_mul_not_eq_add_mul","line":2745,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.neg_mul_not_eq_add_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.neg_mul_not_eq_add_mul\"><span class=\"name\">Int16</span>.<span class=\"name\">neg_mul_not_eq_add_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2743-L2744","name":"Int8.neg_mul_not_eq_add_mul","line":2743,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.neg_mul_not_eq_add_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.neg_mul_not_eq_add_mul\"><span class=\"name\">Int8</span>.<span class=\"name\">neg_mul_not_eq_add_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2740-L2741","name":"ISize.neg_add_mul_eq_mul_not","line":2740,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.neg_add_mul_eq_mul_not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.neg_add_mul_eq_mul_not\"><span class=\"name\">ISize</span>.<span class=\"name\">neg_add_mul_eq_mul_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2738-L2739","name":"Int64.neg_add_mul_eq_mul_not","line":2738,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.neg_add_mul_eq_mul_not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.neg_add_mul_eq_mul_not\"><span class=\"name\">Int64</span>.<span class=\"name\">neg_add_mul_eq_mul_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2736-L2737","name":"Int32.neg_add_mul_eq_mul_not","line":2736,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.neg_add_mul_eq_mul_not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.neg_add_mul_eq_mul_not\"><span class=\"name\">Int32</span>.<span class=\"name\">neg_add_mul_eq_mul_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2734-L2735","name":"Int16.neg_add_mul_eq_mul_not","line":2734,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.neg_add_mul_eq_mul_not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.neg_add_mul_eq_mul_not\"><span class=\"name\">Int16</span>.<span class=\"name\">neg_add_mul_eq_mul_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2732-L2733","name":"Int8.neg_add_mul_eq_mul_not","line":2732,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.neg_add_mul_eq_mul_not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.neg_add_mul_eq_mul_not\"><span class=\"name\">Int8</span>.<span class=\"name\">neg_add_mul_eq_mul_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2729-L2730","name":"ISize.sub_mul","line":2729,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.sub_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.sub_mul\"><span class=\"name\">ISize</span>.<span class=\"name\">sub_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2727-L2728","name":"Int64.sub_mul","line":2727,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.sub_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.sub_mul\"><span class=\"name\">Int64</span>.<span class=\"name\">sub_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2725-L2726","name":"Int32.sub_mul","line":2725,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.sub_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.sub_mul\"><span class=\"name\">Int32</span>.<span class=\"name\">sub_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2723-L2724","name":"Int16.sub_mul","line":2723,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.sub_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.sub_mul\"><span class=\"name\">Int16</span>.<span class=\"name\">sub_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2721-L2722","name":"Int8.sub_mul","line":2721,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.sub_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.sub_mul\"><span class=\"name\">Int8</span>.<span class=\"name\">sub_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2719-L2719","name":"ISize.mul_sub","line":2719,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.mul_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.mul_sub\"><span class=\"name\">ISize</span>.<span class=\"name\">mul_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2718-L2718","name":"Int64.mul_sub","line":2718,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.mul_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.mul_sub\"><span class=\"name\">Int64</span>.<span class=\"name\">mul_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2717-L2717","name":"Int32.mul_sub","line":2717,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.mul_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.mul_sub\"><span class=\"name\">Int32</span>.<span class=\"name\">mul_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2716-L2716","name":"Int16.mul_sub","line":2716,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.mul_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.mul_sub\"><span class=\"name\">Int16</span>.<span class=\"name\">mul_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2715-L2715","name":"Int8.mul_sub","line":2715,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.mul_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.mul_sub\"><span class=\"name\">Int8</span>.<span class=\"name\">mul_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2713-L2713","name":"ISize.neg_mul_comm","line":2713,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.neg_mul_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.neg_mul_comm\"><span class=\"name\">ISize</span>.<span class=\"name\">neg_mul_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2712-L2712","name":"Int64.neg_mul_comm","line":2712,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.neg_mul_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.neg_mul_comm\"><span class=\"name\">Int64</span>.<span class=\"name\">neg_mul_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2711-L2711","name":"Int32.neg_mul_comm","line":2711,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.neg_mul_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.neg_mul_comm\"><span class=\"name\">Int32</span>.<span class=\"name\">neg_mul_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2710-L2710","name":"Int16.neg_mul_comm","line":2710,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.neg_mul_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.neg_mul_comm\"><span class=\"name\">Int16</span>.<span class=\"name\">neg_mul_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2709-L2709","name":"Int8.neg_mul_comm","line":2709,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.neg_mul_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.neg_mul_comm\"><span class=\"name\">Int8</span>.<span class=\"name\">neg_mul_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2707-L2707","name":"ISize.neg_mul_neg","line":2707,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.neg_mul_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.neg_mul_neg\"><span class=\"name\">ISize</span>.<span class=\"name\">neg_mul_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2706-L2706","name":"Int64.neg_mul_neg","line":2706,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.neg_mul_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.neg_mul_neg\"><span class=\"name\">Int64</span>.<span class=\"name\">neg_mul_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2705-L2705","name":"Int32.neg_mul_neg","line":2705,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.neg_mul_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.neg_mul_neg\"><span class=\"name\">Int32</span>.<span class=\"name\">neg_mul_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2704-L2704","name":"Int16.neg_mul_neg","line":2704,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.neg_mul_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.neg_mul_neg\"><span class=\"name\">Int16</span>.<span class=\"name\">neg_mul_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2703-L2703","name":"Int8.neg_mul_neg","line":2703,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.neg_mul_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.neg_mul_neg\"><span class=\"name\">Int8</span>.<span class=\"name\">neg_mul_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2701-L2701","name":"ISize.mul_neg","line":2701,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.mul_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.mul_neg\"><span class=\"name\">ISize</span>.<span class=\"name\">mul_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2700-L2700","name":"Int64.mul_neg","line":2700,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.mul_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.mul_neg\"><span class=\"name\">Int64</span>.<span class=\"name\">mul_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2699-L2699","name":"Int32.mul_neg","line":2699,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.mul_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.mul_neg\"><span class=\"name\">Int32</span>.<span class=\"name\">mul_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2698-L2698","name":"Int16.mul_neg","line":2698,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.mul_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.mul_neg\"><span class=\"name\">Int16</span>.<span class=\"name\">mul_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2697-L2697","name":"Int8.mul_neg","line":2697,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.mul_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.mul_neg\"><span class=\"name\">Int8</span>.<span class=\"name\">mul_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2695-L2695","name":"ISize.neg_mul","line":2695,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.neg_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.neg_mul\"><span class=\"name\">ISize</span>.<span class=\"name\">neg_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2694-L2694","name":"Int64.neg_mul","line":2694,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.neg_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.neg_mul\"><span class=\"name\">Int64</span>.<span class=\"name\">neg_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2693-L2693","name":"Int32.neg_mul","line":2693,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.neg_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.neg_mul\"><span class=\"name\">Int32</span>.<span class=\"name\">neg_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2692-L2692","name":"Int16.neg_mul","line":2692,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.neg_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.neg_mul\"><span class=\"name\">Int16</span>.<span class=\"name\">neg_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2691-L2691","name":"Int8.neg_mul","line":2691,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.neg_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.neg_mul\"><span class=\"name\">Int8</span>.<span class=\"name\">neg_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2689-L2689","name":"ISize.mul_two","line":2689,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.mul_two","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.mul_two\"><span class=\"name\">ISize</span>.<span class=\"name\">mul_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2688-L2688","name":"Int64.mul_two","line":2688,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.mul_two","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.mul_two\"><span class=\"name\">Int64</span>.<span class=\"name\">mul_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2687-L2687","name":"Int32.mul_two","line":2687,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.mul_two","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.mul_two\"><span class=\"name\">Int32</span>.<span class=\"name\">mul_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2686-L2686","name":"Int16.mul_two","line":2686,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.mul_two","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.mul_two\"><span class=\"name\">Int16</span>.<span class=\"name\">mul_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2685-L2685","name":"Int8.mul_two","line":2685,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.mul_two","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.mul_two\"><span class=\"name\">Int8</span>.<span class=\"name\">mul_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2683-L2683","name":"ISize.two_mul","line":2683,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.two_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.two_mul\"><span class=\"name\">ISize</span>.<span class=\"name\">two_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2682-L2682","name":"Int64.two_mul","line":2682,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.two_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.two_mul\"><span class=\"name\">Int64</span>.<span class=\"name\">two_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2681-L2681","name":"Int32.two_mul","line":2681,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.two_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.two_mul\"><span class=\"name\">Int32</span>.<span class=\"name\">two_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2680-L2680","name":"Int16.two_mul","line":2680,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.two_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.two_mul\"><span class=\"name\">Int16</span>.<span class=\"name\">two_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2679-L2679","name":"Int8.two_mul","line":2679,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.two_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.two_mul\"><span class=\"name\">Int8</span>.<span class=\"name\">two_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2677-L2677","name":"ISize.succ_mul","line":2677,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.succ_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.succ_mul\"><span class=\"name\">ISize</span>.<span class=\"name\">succ_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2676-L2676","name":"Int64.succ_mul","line":2676,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.succ_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.succ_mul\"><span class=\"name\">Int64</span>.<span class=\"name\">succ_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2675-L2675","name":"Int32.succ_mul","line":2675,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.succ_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.succ_mul\"><span class=\"name\">Int32</span>.<span class=\"name\">succ_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2674-L2674","name":"Int16.succ_mul","line":2674,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.succ_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.succ_mul\"><span class=\"name\">Int16</span>.<span class=\"name\">succ_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2673-L2673","name":"Int8.succ_mul","line":2673,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.succ_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.succ_mul\"><span class=\"name\">Int8</span>.<span class=\"name\">succ_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2671-L2671","name":"ISize.mul_succ","line":2671,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.mul_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.mul_succ\"><span class=\"name\">ISize</span>.<span class=\"name\">mul_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2670-L2670","name":"Int64.mul_succ","line":2670,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.mul_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.mul_succ\"><span class=\"name\">Int64</span>.<span class=\"name\">mul_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2669-L2669","name":"Int32.mul_succ","line":2669,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.mul_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.mul_succ\"><span class=\"name\">Int32</span>.<span class=\"name\">mul_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2668-L2668","name":"Int16.mul_succ","line":2668,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.mul_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.mul_succ\"><span class=\"name\">Int16</span>.<span class=\"name\">mul_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2667-L2667","name":"Int8.mul_succ","line":2667,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.mul_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.mul_succ\"><span class=\"name\">Int8</span>.<span class=\"name\">mul_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2664-L2665","name":"ISize.add_mul","line":2664,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.add_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.add_mul\"><span class=\"name\">ISize</span>.<span class=\"name\">add_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2662-L2663","name":"Int64.add_mul","line":2662,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.add_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.add_mul\"><span class=\"name\">Int64</span>.<span class=\"name\">add_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2660-L2661","name":"Int32.add_mul","line":2660,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.add_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.add_mul\"><span class=\"name\">Int32</span>.<span class=\"name\">add_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2658-L2659","name":"Int16.add_mul","line":2658,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.add_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.add_mul\"><span class=\"name\">Int16</span>.<span class=\"name\">add_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2656-L2657","name":"Int8.add_mul","line":2656,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.add_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.add_mul\"><span class=\"name\">Int8</span>.<span class=\"name\">add_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2653-L2654","name":"ISize.mul_add","line":2653,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.mul_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.mul_add\"><span class=\"name\">ISize</span>.<span class=\"name\">mul_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2651-L2652","name":"Int64.mul_add","line":2651,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.mul_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.mul_add\"><span class=\"name\">Int64</span>.<span class=\"name\">mul_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2649-L2650","name":"Int32.mul_add","line":2649,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.mul_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.mul_add\"><span class=\"name\">Int32</span>.<span class=\"name\">mul_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2647-L2648","name":"Int16.mul_add","line":2647,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.mul_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.mul_add\"><span class=\"name\">Int16</span>.<span class=\"name\">mul_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2645-L2646","name":"Int8.mul_add","line":2645,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.mul_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.mul_add\"><span class=\"name\">Int8</span>.<span class=\"name\">mul_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2643-L2643","name":"ISize.pow_succ","line":2643,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.pow_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.pow_succ\"><span class=\"name\">ISize</span>.<span class=\"name\">pow_succ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2642-L2642","name":"ISize.pow_zero","line":2642,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.pow_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.pow_zero\"><span class=\"name\">ISize</span>.<span class=\"name\">pow_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2641-L2641","name":"Int64.pow_succ","line":2641,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.pow_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.pow_succ\"><span class=\"name\">Int64</span>.<span class=\"name\">pow_succ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2640-L2640","name":"Int64.pow_zero","line":2640,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.pow_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.pow_zero\"><span class=\"name\">Int64</span>.<span class=\"name\">pow_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2639-L2639","name":"Int32.pow_succ","line":2639,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.pow_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.pow_succ\"><span class=\"name\">Int32</span>.<span class=\"name\">pow_succ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2638-L2638","name":"Int32.pow_zero","line":2638,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.pow_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.pow_zero\"><span class=\"name\">Int32</span>.<span class=\"name\">pow_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2637-L2637","name":"Int16.pow_succ","line":2637,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.pow_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.pow_succ\"><span class=\"name\">Int16</span>.<span class=\"name\">pow_succ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2636-L2636","name":"Int16.pow_zero","line":2636,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.pow_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.pow_zero\"><span class=\"name\">Int16</span>.<span class=\"name\">pow_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2635-L2635","name":"Int8.pow_succ","line":2635,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.pow_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.pow_succ\"><span class=\"name\">Int8</span>.<span class=\"name\">pow_succ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2634-L2634","name":"Int8.pow_zero","line":2634,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.pow_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.pow_zero\"><span class=\"name\">Int8</span>.<span class=\"name\">pow_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2632-L2632","name":"ISize.zero_mul","line":2632,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.zero_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.zero_mul\"><span class=\"name\">ISize</span>.<span class=\"name\">zero_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2631-L2631","name":"Int64.zero_mul","line":2631,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.zero_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.zero_mul\"><span class=\"name\">Int64</span>.<span class=\"name\">zero_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2630-L2630","name":"Int32.zero_mul","line":2630,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.zero_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.zero_mul\"><span class=\"name\">Int32</span>.<span class=\"name\">zero_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2629-L2629","name":"Int16.zero_mul","line":2629,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.zero_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.zero_mul\"><span class=\"name\">Int16</span>.<span class=\"name\">zero_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2628-L2628","name":"Int8.zero_mul","line":2628,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.zero_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.zero_mul\"><span class=\"name\">Int8</span>.<span class=\"name\">zero_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2626-L2626","name":"ISize.mul_zero","line":2626,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.mul_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.mul_zero\"><span class=\"name\">ISize</span>.<span class=\"name\">mul_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2625-L2625","name":"Int64.mul_zero","line":2625,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.mul_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.mul_zero\"><span class=\"name\">Int64</span>.<span class=\"name\">mul_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2624-L2624","name":"Int32.mul_zero","line":2624,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.mul_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.mul_zero\"><span class=\"name\">Int32</span>.<span class=\"name\">mul_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2623-L2623","name":"Int16.mul_zero","line":2623,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.mul_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.mul_zero\"><span class=\"name\">Int16</span>.<span class=\"name\">mul_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2622-L2622","name":"Int8.mul_zero","line":2622,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.mul_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.mul_zero\"><span class=\"name\">Int8</span>.<span class=\"name\">mul_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2619-L2620","name":"instLawfulCommIdentityISizeHMulOfNat","line":2619,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instLawfulCommIdentityISizeHMulOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instLawfulCommIdentityISizeHMulOfNat\"><span class=\"name\">instLawfulCommIdentityISizeHMulOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2617-L2618","name":"instLawfulCommIdentityInt64HMulOfNat","line":2617,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instLawfulCommIdentityInt64HMulOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instLawfulCommIdentityInt64HMulOfNat\"><span class=\"name\">instLawfulCommIdentityInt64HMulOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2615-L2616","name":"instLawfulCommIdentityInt32HMulOfNat","line":2615,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instLawfulCommIdentityInt32HMulOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instLawfulCommIdentityInt32HMulOfNat\"><span class=\"name\">instLawfulCommIdentityInt32HMulOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2613-L2614","name":"instLawfulCommIdentityInt16HMulOfNat","line":2613,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instLawfulCommIdentityInt16HMulOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instLawfulCommIdentityInt16HMulOfNat\"><span class=\"name\">instLawfulCommIdentityInt16HMulOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2611-L2612","name":"instLawfulCommIdentityInt8HMulOfNat","line":2611,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instLawfulCommIdentityInt8HMulOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instLawfulCommIdentityInt8HMulOfNat\"><span class=\"name\">instLawfulCommIdentityInt8HMulOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2609-L2609","name":"ISize.one_mul","line":2609,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.one_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.one_mul\"><span class=\"name\">ISize</span>.<span class=\"name\">one_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2608-L2608","name":"Int64.one_mul","line":2608,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.one_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.one_mul\"><span class=\"name\">Int64</span>.<span class=\"name\">one_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2607-L2607","name":"Int32.one_mul","line":2607,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.one_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.one_mul\"><span class=\"name\">Int32</span>.<span class=\"name\">one_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2606-L2606","name":"Int16.one_mul","line":2606,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.one_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.one_mul\"><span class=\"name\">Int16</span>.<span class=\"name\">one_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2605-L2605","name":"Int8.one_mul","line":2605,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.one_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.one_mul\"><span class=\"name\">Int8</span>.<span class=\"name\">one_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2603-L2603","name":"ISize.mul_one","line":2603,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.mul_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.mul_one\"><span class=\"name\">ISize</span>.<span class=\"name\">mul_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2602-L2602","name":"Int64.mul_one","line":2602,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.mul_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.mul_one\"><span class=\"name\">Int64</span>.<span class=\"name\">mul_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2601-L2601","name":"Int32.mul_one","line":2601,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.mul_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.mul_one\"><span class=\"name\">Int32</span>.<span class=\"name\">mul_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2600-L2600","name":"Int16.mul_one","line":2600,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.mul_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.mul_one\"><span class=\"name\">Int16</span>.<span class=\"name\">mul_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2599-L2599","name":"Int8.mul_one","line":2599,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.mul_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.mul_one\"><span class=\"name\">Int8</span>.<span class=\"name\">mul_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2597-L2597","name":"instAssociativeISizeHMul","line":2597,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instAssociativeISizeHMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instAssociativeISizeHMul\"><span class=\"name\">instAssociativeISizeHMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2596-L2596","name":"instAssociativeInt64HMul","line":2596,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instAssociativeInt64HMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instAssociativeInt64HMul\"><span class=\"name\">instAssociativeInt64HMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2595-L2595","name":"instAssociativeInt32HMul","line":2595,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instAssociativeInt32HMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instAssociativeInt32HMul\"><span class=\"name\">instAssociativeInt32HMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2594-L2594","name":"instAssociativeInt16HMul","line":2594,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instAssociativeInt16HMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instAssociativeInt16HMul\"><span class=\"name\">instAssociativeInt16HMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2593-L2593","name":"instAssociativeInt8HMul","line":2593,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instAssociativeInt8HMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instAssociativeInt8HMul\"><span class=\"name\">instAssociativeInt8HMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2591-L2591","name":"ISize.mul_assoc","line":2591,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.mul_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.mul_assoc\"><span class=\"name\">ISize</span>.<span class=\"name\">mul_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2590-L2590","name":"Int64.mul_assoc","line":2590,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.mul_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.mul_assoc\"><span class=\"name\">Int64</span>.<span class=\"name\">mul_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2589-L2589","name":"Int32.mul_assoc","line":2589,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.mul_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.mul_assoc\"><span class=\"name\">Int32</span>.<span class=\"name\">mul_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2588-L2588","name":"Int16.mul_assoc","line":2588,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.mul_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.mul_assoc\"><span class=\"name\">Int16</span>.<span class=\"name\">mul_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2587-L2587","name":"Int8.mul_assoc","line":2587,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.mul_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.mul_assoc\"><span class=\"name\">Int8</span>.<span class=\"name\">mul_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2585-L2585","name":"instCommutativeISizeHMul","line":2585,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instCommutativeISizeHMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instCommutativeISizeHMul\"><span class=\"name\">instCommutativeISizeHMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2584-L2584","name":"instCommutativeInt64HMul","line":2584,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instCommutativeInt64HMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instCommutativeInt64HMul\"><span class=\"name\">instCommutativeInt64HMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2583-L2583","name":"instCommutativeInt32HMul","line":2583,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instCommutativeInt32HMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instCommutativeInt32HMul\"><span class=\"name\">instCommutativeInt32HMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2582-L2582","name":"instCommutativeInt16HMul","line":2582,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instCommutativeInt16HMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instCommutativeInt16HMul\"><span class=\"name\">instCommutativeInt16HMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2581-L2581","name":"instCommutativeInt8HMul","line":2581,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instCommutativeInt8HMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instCommutativeInt8HMul\"><span class=\"name\">instCommutativeInt8HMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2579-L2579","name":"ISize.mul_comm","line":2579,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.mul_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.mul_comm\"><span class=\"name\">ISize</span>.<span class=\"name\">mul_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2578-L2578","name":"Int64.mul_comm","line":2578,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.mul_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.mul_comm\"><span class=\"name\">Int64</span>.<span class=\"name\">mul_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2577-L2577","name":"Int32.mul_comm","line":2577,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.mul_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.mul_comm\"><span class=\"name\">Int32</span>.<span class=\"name\">mul_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2576-L2576","name":"Int16.mul_comm","line":2576,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.mul_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.mul_comm\"><span class=\"name\">Int16</span>.<span class=\"name\">mul_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2575-L2575","name":"Int8.mul_comm","line":2575,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.mul_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.mul_comm\"><span class=\"name\">Int8</span>.<span class=\"name\">mul_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2572-L2573","name":"ISize.left_eq_add","line":2572,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.left_eq_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.left_eq_add\"><span class=\"name\">ISize</span>.<span class=\"name\">left_eq_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2570-L2571","name":"Int64.left_eq_add","line":2570,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.left_eq_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.left_eq_add\"><span class=\"name\">Int64</span>.<span class=\"name\">left_eq_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2568-L2569","name":"Int32.left_eq_add","line":2568,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.left_eq_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.left_eq_add\"><span class=\"name\">Int32</span>.<span class=\"name\">left_eq_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2566-L2567","name":"Int16.left_eq_add","line":2566,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.left_eq_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.left_eq_add\"><span class=\"name\">Int16</span>.<span class=\"name\">left_eq_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2564-L2565","name":"Int8.left_eq_add","line":2564,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.left_eq_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.left_eq_add\"><span class=\"name\">Int8</span>.<span class=\"name\">left_eq_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2561-L2562","name":"ISize.right_eq_add","line":2561,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.right_eq_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.right_eq_add\"><span class=\"name\">ISize</span>.<span class=\"name\">right_eq_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2559-L2560","name":"Int64.right_eq_add","line":2559,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.right_eq_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.right_eq_add\"><span class=\"name\">Int64</span>.<span class=\"name\">right_eq_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2557-L2558","name":"Int32.right_eq_add","line":2557,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.right_eq_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.right_eq_add\"><span class=\"name\">Int32</span>.<span class=\"name\">right_eq_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2555-L2556","name":"Int16.right_eq_add","line":2555,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.right_eq_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.right_eq_add\"><span class=\"name\">Int16</span>.<span class=\"name\">right_eq_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2553-L2554","name":"Int8.right_eq_add","line":2553,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.right_eq_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.right_eq_add\"><span class=\"name\">Int8</span>.<span class=\"name\">right_eq_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2550-L2551","name":"ISize.add_eq_left","line":2550,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.add_eq_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.add_eq_left\"><span class=\"name\">ISize</span>.<span class=\"name\">add_eq_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2548-L2549","name":"Int64.add_eq_left","line":2548,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.add_eq_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.add_eq_left\"><span class=\"name\">Int64</span>.<span class=\"name\">add_eq_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2546-L2547","name":"Int32.add_eq_left","line":2546,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.add_eq_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.add_eq_left\"><span class=\"name\">Int32</span>.<span class=\"name\">add_eq_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2544-L2545","name":"Int16.add_eq_left","line":2544,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.add_eq_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.add_eq_left\"><span class=\"name\">Int16</span>.<span class=\"name\">add_eq_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2542-L2543","name":"Int8.add_eq_left","line":2542,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.add_eq_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.add_eq_left\"><span class=\"name\">Int8</span>.<span class=\"name\">add_eq_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2539-L2540","name":"ISize.add_eq_right","line":2539,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.add_eq_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.add_eq_right\"><span class=\"name\">ISize</span>.<span class=\"name\">add_eq_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2537-L2538","name":"Int64.add_eq_right","line":2537,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.add_eq_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.add_eq_right\"><span class=\"name\">Int64</span>.<span class=\"name\">add_eq_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2535-L2536","name":"Int32.add_eq_right","line":2535,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.add_eq_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.add_eq_right\"><span class=\"name\">Int32</span>.<span class=\"name\">add_eq_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2533-L2534","name":"Int16.add_eq_right","line":2533,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.add_eq_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.add_eq_right\"><span class=\"name\">Int16</span>.<span class=\"name\">add_eq_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2531-L2532","name":"Int8.add_eq_right","line":2531,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.add_eq_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.add_eq_right\"><span class=\"name\">Int8</span>.<span class=\"name\">add_eq_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2528-L2529","name":"ISize.sub_right_inj","line":2528,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.sub_right_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.sub_right_inj\"><span class=\"name\">ISize</span>.<span class=\"name\">sub_right_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2526-L2527","name":"Int64.sub_right_inj","line":2526,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.sub_right_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.sub_right_inj\"><span class=\"name\">Int64</span>.<span class=\"name\">sub_right_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2524-L2525","name":"Int32.sub_right_inj","line":2524,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.sub_right_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.sub_right_inj\"><span class=\"name\">Int32</span>.<span class=\"name\">sub_right_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2522-L2523","name":"Int16.sub_right_inj","line":2522,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.sub_right_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.sub_right_inj\"><span class=\"name\">Int16</span>.<span class=\"name\">sub_right_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2520-L2521","name":"Int8.sub_right_inj","line":2520,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.sub_right_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.sub_right_inj\"><span class=\"name\">Int8</span>.<span class=\"name\">sub_right_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2517-L2518","name":"ISize.sub_left_inj","line":2517,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.sub_left_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.sub_left_inj\"><span class=\"name\">ISize</span>.<span class=\"name\">sub_left_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2515-L2516","name":"Int64.sub_left_inj","line":2515,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.sub_left_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.sub_left_inj\"><span class=\"name\">Int64</span>.<span class=\"name\">sub_left_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2513-L2514","name":"Int32.sub_left_inj","line":2513,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.sub_left_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.sub_left_inj\"><span class=\"name\">Int32</span>.<span class=\"name\">sub_left_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2511-L2512","name":"Int16.sub_left_inj","line":2511,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.sub_left_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.sub_left_inj\"><span class=\"name\">Int16</span>.<span class=\"name\">sub_left_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2509-L2510","name":"Int8.sub_left_inj","line":2509,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.sub_left_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.sub_left_inj\"><span class=\"name\">Int8</span>.<span class=\"name\">sub_left_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2506-L2507","name":"ISize.add_right_inj","line":2506,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.add_right_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.add_right_inj\"><span class=\"name\">ISize</span>.<span class=\"name\">add_right_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2504-L2505","name":"Int64.add_right_inj","line":2504,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.add_right_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.add_right_inj\"><span class=\"name\">Int64</span>.<span class=\"name\">add_right_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2502-L2503","name":"Int32.add_right_inj","line":2502,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.add_right_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.add_right_inj\"><span class=\"name\">Int32</span>.<span class=\"name\">add_right_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2500-L2501","name":"Int16.add_right_inj","line":2500,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.add_right_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.add_right_inj\"><span class=\"name\">Int16</span>.<span class=\"name\">add_right_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2498-L2499","name":"Int8.add_right_inj","line":2498,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.add_right_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.add_right_inj\"><span class=\"name\">Int8</span>.<span class=\"name\">add_right_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2495-L2496","name":"ISize.add_left_inj","line":2495,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.add_left_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.add_left_inj\"><span class=\"name\">ISize</span>.<span class=\"name\">add_left_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2493-L2494","name":"Int64.add_left_inj","line":2493,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.add_left_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.add_left_inj\"><span class=\"name\">Int64</span>.<span class=\"name\">add_left_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2491-L2492","name":"Int32.add_left_inj","line":2491,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.add_left_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.add_left_inj\"><span class=\"name\">Int32</span>.<span class=\"name\">add_left_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2489-L2490","name":"Int16.add_left_inj","line":2489,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.add_left_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.add_left_inj\"><span class=\"name\">Int16</span>.<span class=\"name\">add_left_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2487-L2488","name":"Int8.add_left_inj","line":2487,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.add_left_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.add_left_inj\"><span class=\"name\">Int8</span>.<span class=\"name\">add_left_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2484-L2485","name":"ISize.neg_sub","line":2484,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.neg_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.neg_sub\"><span class=\"name\">ISize</span>.<span class=\"name\">neg_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2482-L2483","name":"Int64.neg_sub","line":2482,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.neg_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.neg_sub\"><span class=\"name\">Int64</span>.<span class=\"name\">neg_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2480-L2481","name":"Int32.neg_sub","line":2480,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.neg_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.neg_sub\"><span class=\"name\">Int32</span>.<span class=\"name\">neg_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2478-L2479","name":"Int16.neg_sub","line":2478,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.neg_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.neg_sub\"><span class=\"name\">Int16</span>.<span class=\"name\">neg_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2476-L2477","name":"Int8.neg_sub","line":2476,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.neg_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.neg_sub\"><span class=\"name\">Int8</span>.<span class=\"name\">neg_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2474-L2474","name":"ISize.sub_neg","line":2474,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.sub_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.sub_neg\"><span class=\"name\">ISize</span>.<span class=\"name\">sub_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2473-L2473","name":"Int64.sub_neg","line":2473,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.sub_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.sub_neg\"><span class=\"name\">Int64</span>.<span class=\"name\">sub_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2472-L2472","name":"Int32.sub_neg","line":2472,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.sub_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.sub_neg\"><span class=\"name\">Int32</span>.<span class=\"name\">sub_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2471-L2471","name":"Int16.sub_neg","line":2471,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.sub_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.sub_neg\"><span class=\"name\">Int16</span>.<span class=\"name\">sub_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2470-L2470","name":"Int8.sub_neg","line":2470,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.sub_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.sub_neg\"><span class=\"name\">Int8</span>.<span class=\"name\">sub_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2468-L2468","name":"ISize.neg_add","line":2468,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.neg_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.neg_add\"><span class=\"name\">ISize</span>.<span class=\"name\">neg_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2467-L2467","name":"Int64.neg_add","line":2467,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.neg_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.neg_add\"><span class=\"name\">Int64</span>.<span class=\"name\">neg_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2466-L2466","name":"Int32.neg_add","line":2466,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.neg_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.neg_add\"><span class=\"name\">Int32</span>.<span class=\"name\">neg_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2465-L2465","name":"Int16.neg_add","line":2465,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.neg_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.neg_add\"><span class=\"name\">Int16</span>.<span class=\"name\">neg_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2464-L2464","name":"Int8.neg_add","line":2464,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.neg_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.neg_add\"><span class=\"name\">Int8</span>.<span class=\"name\">neg_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2462-L2462","name":"ISize.neg_ne_zero","line":2462,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.neg_ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.neg_ne_zero\"><span class=\"name\">ISize</span>.<span class=\"name\">neg_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2461-L2461","name":"Int64.neg_ne_zero","line":2461,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.neg_ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.neg_ne_zero\"><span class=\"name\">Int64</span>.<span class=\"name\">neg_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2460-L2460","name":"Int32.neg_ne_zero","line":2460,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.neg_ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.neg_ne_zero\"><span class=\"name\">Int32</span>.<span class=\"name\">neg_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2459-L2459","name":"Int16.neg_ne_zero","line":2459,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.neg_ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.neg_ne_zero\"><span class=\"name\">Int16</span>.<span class=\"name\">neg_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2458-L2458","name":"Int8.neg_ne_zero","line":2458,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.neg_ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.neg_ne_zero\"><span class=\"name\">Int8</span>.<span class=\"name\">neg_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2456-L2456","name":"ISize.neg_inj","line":2456,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.neg_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.neg_inj\"><span class=\"name\">ISize</span>.<span class=\"name\">neg_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2455-L2455","name":"Int64.neg_inj","line":2455,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.neg_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.neg_inj\"><span class=\"name\">Int64</span>.<span class=\"name\">neg_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2454-L2454","name":"Int32.neg_inj","line":2454,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.neg_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.neg_inj\"><span class=\"name\">Int32</span>.<span class=\"name\">neg_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2453-L2453","name":"Int16.neg_inj","line":2453,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.neg_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.neg_inj\"><span class=\"name\">Int16</span>.<span class=\"name\">neg_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2452-L2452","name":"Int8.neg_inj","line":2452,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.neg_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.neg_inj\"><span class=\"name\">Int8</span>.<span class=\"name\">neg_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2450-L2450","name":"ISize.neg_neg","line":2450,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.neg_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.neg_neg\"><span class=\"name\">ISize</span>.<span class=\"name\">neg_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2449-L2449","name":"Int64.neg_neg","line":2449,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.neg_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.neg_neg\"><span class=\"name\">Int64</span>.<span class=\"name\">neg_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2448-L2448","name":"Int32.neg_neg","line":2448,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.neg_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.neg_neg\"><span class=\"name\">Int32</span>.<span class=\"name\">neg_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2447-L2447","name":"Int16.neg_neg","line":2447,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.neg_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.neg_neg\"><span class=\"name\">Int16</span>.<span class=\"name\">neg_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2446-L2446","name":"Int8.neg_neg","line":2446,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.neg_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.neg_neg\"><span class=\"name\">Int8</span>.<span class=\"name\">neg_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2443-L2444","name":"ISize.sub_eq_iff_eq_add","line":2443,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.sub_eq_iff_eq_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.sub_eq_iff_eq_add\"><span class=\"name\">ISize</span>.<span class=\"name\">sub_eq_iff_eq_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2441-L2442","name":"Int64.sub_eq_iff_eq_add","line":2441,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.sub_eq_iff_eq_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.sub_eq_iff_eq_add\"><span class=\"name\">Int64</span>.<span class=\"name\">sub_eq_iff_eq_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2439-L2440","name":"Int32.sub_eq_iff_eq_add","line":2439,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.sub_eq_iff_eq_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.sub_eq_iff_eq_add\"><span class=\"name\">Int32</span>.<span class=\"name\">sub_eq_iff_eq_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2437-L2438","name":"Int16.sub_eq_iff_eq_add","line":2437,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.sub_eq_iff_eq_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.sub_eq_iff_eq_add\"><span class=\"name\">Int16</span>.<span class=\"name\">sub_eq_iff_eq_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2435-L2436","name":"Int8.sub_eq_iff_eq_add","line":2435,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.sub_eq_iff_eq_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.sub_eq_iff_eq_add\"><span class=\"name\">Int8</span>.<span class=\"name\">sub_eq_iff_eq_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2432-L2433","name":"ISize.eq_sub_iff_add_eq","line":2432,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.eq_sub_iff_add_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.eq_sub_iff_add_eq\"><span class=\"name\">ISize</span>.<span class=\"name\">eq_sub_iff_add_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2430-L2431","name":"Int64.eq_sub_iff_add_eq","line":2430,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.eq_sub_iff_add_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.eq_sub_iff_add_eq\"><span class=\"name\">Int64</span>.<span class=\"name\">eq_sub_iff_add_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2428-L2429","name":"Int32.eq_sub_iff_add_eq","line":2428,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.eq_sub_iff_add_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.eq_sub_iff_add_eq\"><span class=\"name\">Int32</span>.<span class=\"name\">eq_sub_iff_add_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2426-L2427","name":"Int16.eq_sub_iff_add_eq","line":2426,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.eq_sub_iff_add_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.eq_sub_iff_add_eq\"><span class=\"name\">Int16</span>.<span class=\"name\">eq_sub_iff_add_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2424-L2425","name":"Int8.eq_sub_iff_add_eq","line":2424,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.eq_sub_iff_add_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.eq_sub_iff_add_eq\"><span class=\"name\">Int8</span>.<span class=\"name\">eq_sub_iff_add_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2421-L2422","name":"ISize.sub_add_cancel","line":2421,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.sub_add_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.sub_add_cancel\"><span class=\"name\">ISize</span>.<span class=\"name\">sub_add_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2419-L2420","name":"Int64.sub_add_cancel","line":2419,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.sub_add_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.sub_add_cancel\"><span class=\"name\">Int64</span>.<span class=\"name\">sub_add_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2417-L2418","name":"Int32.sub_add_cancel","line":2417,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.sub_add_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.sub_add_cancel\"><span class=\"name\">Int32</span>.<span class=\"name\">sub_add_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2415-L2416","name":"Int16.sub_add_cancel","line":2415,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.sub_add_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.sub_add_cancel\"><span class=\"name\">Int16</span>.<span class=\"name\">sub_add_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2413-L2414","name":"Int8.sub_add_cancel","line":2413,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.sub_add_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.sub_add_cancel\"><span class=\"name\">Int8</span>.<span class=\"name\">sub_add_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2411-L2411","name":"ISize.add_right_neg","line":2411,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.add_right_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.add_right_neg\"><span class=\"name\">ISize</span>.<span class=\"name\">add_right_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2410-L2410","name":"ISize.add_left_neg","line":2410,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.add_left_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.add_left_neg\"><span class=\"name\">ISize</span>.<span class=\"name\">add_left_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2409-L2409","name":"Int64.add_right_neg","line":2409,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.add_right_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.add_right_neg\"><span class=\"name\">Int64</span>.<span class=\"name\">add_right_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2408-L2408","name":"Int64.add_left_neg","line":2408,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.add_left_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.add_left_neg\"><span class=\"name\">Int64</span>.<span class=\"name\">add_left_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2407-L2407","name":"Int32.add_right_neg","line":2407,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.add_right_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.add_right_neg\"><span class=\"name\">Int32</span>.<span class=\"name\">add_right_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2406-L2406","name":"Int32.add_left_neg","line":2406,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.add_left_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.add_left_neg\"><span class=\"name\">Int32</span>.<span class=\"name\">add_left_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2405-L2405","name":"Int16.add_right_neg","line":2405,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.add_right_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.add_right_neg\"><span class=\"name\">Int16</span>.<span class=\"name\">add_right_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2404-L2404","name":"Int16.add_left_neg","line":2404,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.add_left_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.add_left_neg\"><span class=\"name\">Int16</span>.<span class=\"name\">add_left_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2403-L2403","name":"Int8.add_right_neg","line":2403,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.add_right_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.add_right_neg\"><span class=\"name\">Int8</span>.<span class=\"name\">add_right_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2402-L2402","name":"Int8.add_left_neg","line":2402,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.add_left_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.add_left_neg\"><span class=\"name\">Int8</span>.<span class=\"name\">add_left_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2400-L2400","name":"ISize.sub_self","line":2400,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.sub_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.sub_self\"><span class=\"name\">ISize</span>.<span class=\"name\">sub_self</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2399-L2399","name":"Int64.sub_self","line":2399,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.sub_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.sub_self\"><span class=\"name\">Int64</span>.<span class=\"name\">sub_self</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2398-L2398","name":"Int32.sub_self","line":2398,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.sub_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.sub_self\"><span class=\"name\">Int32</span>.<span class=\"name\">sub_self</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2397-L2397","name":"Int16.sub_self","line":2397,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.sub_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.sub_self\"><span class=\"name\">Int16</span>.<span class=\"name\">sub_self</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2396-L2396","name":"Int8.sub_self","line":2396,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.sub_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.sub_self\"><span class=\"name\">Int8</span>.<span class=\"name\">sub_self</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2394-L2394","name":"ISize.zero_sub","line":2394,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.zero_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.zero_sub\"><span class=\"name\">ISize</span>.<span class=\"name\">zero_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2393-L2393","name":"Int64.zero_sub","line":2393,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.zero_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.zero_sub\"><span class=\"name\">Int64</span>.<span class=\"name\">zero_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2392-L2392","name":"Int32.zero_sub","line":2392,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.zero_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.zero_sub\"><span class=\"name\">Int32</span>.<span class=\"name\">zero_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2391-L2391","name":"Int16.zero_sub","line":2391,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.zero_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.zero_sub\"><span class=\"name\">Int16</span>.<span class=\"name\">zero_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2390-L2390","name":"Int8.zero_sub","line":2390,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.zero_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.zero_sub\"><span class=\"name\">Int8</span>.<span class=\"name\">zero_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2388-L2388","name":"ISize.sub_zero","line":2388,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.sub_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.sub_zero\"><span class=\"name\">ISize</span>.<span class=\"name\">sub_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2387-L2387","name":"Int64.sub_zero","line":2387,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.sub_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.sub_zero\"><span class=\"name\">Int64</span>.<span class=\"name\">sub_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2386-L2386","name":"Int32.sub_zero","line":2386,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.sub_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.sub_zero\"><span class=\"name\">Int32</span>.<span class=\"name\">sub_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2385-L2385","name":"Int16.sub_zero","line":2385,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.sub_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.sub_zero\"><span class=\"name\">Int16</span>.<span class=\"name\">sub_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2384-L2384","name":"Int8.sub_zero","line":2384,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.sub_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.sub_zero\"><span class=\"name\">Int8</span>.<span class=\"name\">sub_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2380-L2382","name":"instLawfulIdentityISizeHAddOfNat","line":2380,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instLawfulIdentityISizeHAddOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instLawfulIdentityISizeHAddOfNat\"><span class=\"name\">instLawfulIdentityISizeHAddOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulIdentity\">Std.LawfulIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2377-L2379","name":"instLawfulIdentityInt64HAddOfNat","line":2377,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instLawfulIdentityInt64HAddOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instLawfulIdentityInt64HAddOfNat\"><span class=\"name\">instLawfulIdentityInt64HAddOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulIdentity\">Std.LawfulIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2374-L2376","name":"instLawfulIdentityInt32HAddOfNat","line":2374,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instLawfulIdentityInt32HAddOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instLawfulIdentityInt32HAddOfNat\"><span class=\"name\">instLawfulIdentityInt32HAddOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulIdentity\">Std.LawfulIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2371-L2373","name":"instLawfulIdentityInt16HAddOfNat","line":2371,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instLawfulIdentityInt16HAddOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instLawfulIdentityInt16HAddOfNat\"><span class=\"name\">instLawfulIdentityInt16HAddOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulIdentity\">Std.LawfulIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2368-L2370","name":"instLawfulIdentityInt8HAddOfNat","line":2368,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instLawfulIdentityInt8HAddOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instLawfulIdentityInt8HAddOfNat\"><span class=\"name\">instLawfulIdentityInt8HAddOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulIdentity\">Std.LawfulIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2366-L2366","name":"ISize.zero_add","line":2366,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.zero_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.zero_add\"><span class=\"name\">ISize</span>.<span class=\"name\">zero_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2365-L2365","name":"Int64.zero_add","line":2365,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.zero_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.zero_add\"><span class=\"name\">Int64</span>.<span class=\"name\">zero_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2364-L2364","name":"Int32.zero_add","line":2364,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.zero_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.zero_add\"><span class=\"name\">Int32</span>.<span class=\"name\">zero_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2363-L2363","name":"Int16.zero_add","line":2363,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.zero_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.zero_add\"><span class=\"name\">Int16</span>.<span class=\"name\">zero_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2362-L2362","name":"Int8.zero_add","line":2362,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.zero_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.zero_add\"><span class=\"name\">Int8</span>.<span class=\"name\">zero_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2360-L2360","name":"ISize.add_zero","line":2360,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.add_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.add_zero\"><span class=\"name\">ISize</span>.<span class=\"name\">add_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2359-L2359","name":"Int64.add_zero","line":2359,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.add_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.add_zero\"><span class=\"name\">Int64</span>.<span class=\"name\">add_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2358-L2358","name":"Int32.add_zero","line":2358,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.add_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.add_zero\"><span class=\"name\">Int32</span>.<span class=\"name\">add_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2357-L2357","name":"Int16.add_zero","line":2357,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.add_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.add_zero\"><span class=\"name\">Int16</span>.<span class=\"name\">add_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2356-L2356","name":"Int8.add_zero","line":2356,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.add_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.add_zero\"><span class=\"name\">Int8</span>.<span class=\"name\">add_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2354-L2354","name":"instCommutativeISizeHAdd","line":2354,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instCommutativeISizeHAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instCommutativeISizeHAdd\"><span class=\"name\">instCommutativeISizeHAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2353-L2353","name":"instCommutativeInt64HAdd","line":2353,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instCommutativeInt64HAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instCommutativeInt64HAdd\"><span class=\"name\">instCommutativeInt64HAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2352-L2352","name":"instCommutativeInt32HAdd","line":2352,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instCommutativeInt32HAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instCommutativeInt32HAdd\"><span class=\"name\">instCommutativeInt32HAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2351-L2351","name":"instCommutativeInt16HAdd","line":2351,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instCommutativeInt16HAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instCommutativeInt16HAdd\"><span class=\"name\">instCommutativeInt16HAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2350-L2350","name":"instCommutativeInt8HAdd","line":2350,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instCommutativeInt8HAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instCommutativeInt8HAdd\"><span class=\"name\">instCommutativeInt8HAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2348-L2348","name":"ISize.add_comm","line":2348,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.add_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.add_comm\"><span class=\"name\">ISize</span>.<span class=\"name\">add_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2347-L2347","name":"Int64.add_comm","line":2347,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.add_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.add_comm\"><span class=\"name\">Int64</span>.<span class=\"name\">add_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2346-L2346","name":"Int32.add_comm","line":2346,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.add_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.add_comm\"><span class=\"name\">Int32</span>.<span class=\"name\">add_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2345-L2345","name":"Int16.add_comm","line":2345,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.add_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.add_comm\"><span class=\"name\">Int16</span>.<span class=\"name\">add_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2344-L2344","name":"Int8.add_comm","line":2344,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.add_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.add_comm\"><span class=\"name\">Int8</span>.<span class=\"name\">add_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2342-L2342","name":"instAssociativeISizeHAdd","line":2342,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instAssociativeISizeHAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instAssociativeISizeHAdd\"><span class=\"name\">instAssociativeISizeHAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2341-L2341","name":"instAssociativeInt64HAdd","line":2341,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instAssociativeInt64HAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instAssociativeInt64HAdd\"><span class=\"name\">instAssociativeInt64HAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2340-L2340","name":"instAssociativeInt32HAdd","line":2340,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instAssociativeInt32HAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instAssociativeInt32HAdd\"><span class=\"name\">instAssociativeInt32HAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2339-L2339","name":"instAssociativeInt16HAdd","line":2339,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instAssociativeInt16HAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instAssociativeInt16HAdd\"><span class=\"name\">instAssociativeInt16HAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2338-L2338","name":"instAssociativeInt8HAdd","line":2338,"kind":"instance","docLink":"./Init/Data/SInt/Lemmas.html#instAssociativeInt8HAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#instAssociativeInt8HAdd\"><span class=\"name\">instAssociativeInt8HAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2335-L2336","name":"ISize.add_assoc","line":2335,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.add_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.add_assoc\"><span class=\"name\">ISize</span>.<span class=\"name\">add_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2333-L2334","name":"Int64.add_assoc","line":2333,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.add_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.add_assoc\"><span class=\"name\">Int64</span>.<span class=\"name\">add_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2331-L2332","name":"Int32.add_assoc","line":2331,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.add_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.add_assoc\"><span class=\"name\">Int32</span>.<span class=\"name\">add_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2329-L2330","name":"Int16.add_assoc","line":2329,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.add_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.add_assoc\"><span class=\"name\">Int16</span>.<span class=\"name\">add_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2327-L2328","name":"Int8.add_assoc","line":2327,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.add_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.add_assoc\"><span class=\"name\">Int8</span>.<span class=\"name\">add_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2325-L2325","name":"ISize.zero_ne_one","line":2325,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.zero_ne_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.zero_ne_one\"><span class=\"name\">ISize</span>.<span class=\"name\">zero_ne_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2324-L2324","name":"Int64.zero_ne_one","line":2324,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.zero_ne_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.zero_ne_one\"><span class=\"name\">Int64</span>.<span class=\"name\">zero_ne_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2323-L2323","name":"Int32.zero_ne_one","line":2323,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.zero_ne_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.zero_ne_one\"><span class=\"name\">Int32</span>.<span class=\"name\">zero_ne_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2322-L2322","name":"Int16.zero_ne_one","line":2322,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.zero_ne_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.zero_ne_one\"><span class=\"name\">Int16</span>.<span class=\"name\">zero_ne_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2321-L2321","name":"Int8.zero_ne_one","line":2321,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.zero_ne_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.zero_ne_one\"><span class=\"name\">Int8</span>.<span class=\"name\">zero_ne_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2319-L2319","name":"ISize.zero_lt_one","line":2319,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.zero_lt_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.zero_lt_one\"><span class=\"name\">ISize</span>.<span class=\"name\">zero_lt_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2318-L2318","name":"Int64.zero_lt_one","line":2318,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.zero_lt_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.zero_lt_one\"><span class=\"name\">Int64</span>.<span class=\"name\">zero_lt_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2317-L2317","name":"Int32.zero_lt_one","line":2317,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.zero_lt_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.zero_lt_one\"><span class=\"name\">Int32</span>.<span class=\"name\">zero_lt_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2316-L2316","name":"Int16.zero_lt_one","line":2316,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.zero_lt_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.zero_lt_one\"><span class=\"name\">Int16</span>.<span class=\"name\">zero_lt_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2315-L2315","name":"Int8.zero_lt_one","line":2315,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.zero_lt_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.zero_lt_one\"><span class=\"name\">Int8</span>.<span class=\"name\">zero_lt_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2313-L2313","name":"ISize.toInt_one","line":2313,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_one\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2312-L2312","name":"Int64.toInt_one","line":2312,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_one\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2311-L2311","name":"Int32.toInt_one","line":2311,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_one\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2310-L2310","name":"Int16.toInt_one","line":2310,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_one\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2309-L2309","name":"Int8.toInt_one","line":2309,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_one\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2307-L2307","name":"ISize.toNatClampNeg_one","line":2307,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_one\"><span class=\"name\">ISize</span>.<span class=\"name\">toNatClampNeg_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2306-L2306","name":"Int64.toNatClampNeg_one","line":2306,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toNatClampNeg_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toNatClampNeg_one\"><span class=\"name\">Int64</span>.<span class=\"name\">toNatClampNeg_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg\">toNatClampNeg</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2305-L2305","name":"Int32.toNatClampNeg_one","line":2305,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_one\"><span class=\"name\">Int32</span>.<span class=\"name\">toNatClampNeg_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\">toNatClampNeg</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2304-L2304","name":"Int16.toNatClampNeg_one","line":2304,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_one\"><span class=\"name\">Int16</span>.<span class=\"name\">toNatClampNeg_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2303-L2303","name":"Int8.toNatClampNeg_one","line":2303,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_one\"><span class=\"name\">Int8</span>.<span class=\"name\">toNatClampNeg_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2301-L2301","name":"ISize.ofBitVec_lt_iff_slt","line":2301,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_lt_iff_slt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_lt_iff_slt\"><span class=\"name\">ISize</span>.<span class=\"name\">ofBitVec_lt_iff_slt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.slt\">slt</a></span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2300-L2300","name":"Int64.ofBitVec_lt_iff_slt","line":2300,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_lt_iff_slt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_lt_iff_slt\"><span class=\"name\">Int64</span>.<span class=\"name\">ofBitVec_lt_iff_slt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.slt\">slt</a></span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2299-L2299","name":"Int32.ofBitVec_lt_iff_slt","line":2299,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_lt_iff_slt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_lt_iff_slt\"><span class=\"name\">Int32</span>.<span class=\"name\">ofBitVec_lt_iff_slt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.slt\">slt</a></span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2298-L2298","name":"Int16.ofBitVec_lt_iff_slt","line":2298,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_lt_iff_slt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_lt_iff_slt\"><span class=\"name\">Int16</span>.<span class=\"name\">ofBitVec_lt_iff_slt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.slt\">slt</a></span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2297-L2297","name":"Int8.ofBitVec_lt_iff_slt","line":2297,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_lt_iff_slt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_lt_iff_slt\"><span class=\"name\">Int8</span>.<span class=\"name\">ofBitVec_lt_iff_slt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.slt\">slt</a></span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2287-L2295","name":"ISize.ofNat_lt_iff_lt","line":2287,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofNat_lt_iff_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofNat_lt_iff_lt\"><span class=\"name\">ISize</span>.<span class=\"name\">ofNat_lt_iff_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>))</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>))</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2282-L2286","name":"Int64.ofNat_lt_iff_lt","line":2282,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofNat_lt_iff_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofNat_lt_iff_lt\"><span class=\"name\">Int64</span>.<span class=\"name\">ofNat_lt_iff_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2277-L2281","name":"Int32.ofNat_lt_iff_lt","line":2277,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofNat_lt_iff_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofNat_lt_iff_lt\"><span class=\"name\">Int32</span>.<span class=\"name\">ofNat_lt_iff_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2272-L2276","name":"Int16.ofNat_lt_iff_lt","line":2272,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofNat_lt_iff_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofNat_lt_iff_lt\"><span class=\"name\">Int16</span>.<span class=\"name\">ofNat_lt_iff_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">15</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">15</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2267-L2271","name":"Int8.ofNat_lt_iff_lt","line":2267,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofNat_lt_iff_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofNat_lt_iff_lt\"><span class=\"name\">Int8</span>.<span class=\"name\">ofNat_lt_iff_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">7</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">7</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2263-L2265","name":"ISize.ofInt_lt_iff_lt","line":2263,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofInt_lt_iff_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofInt_lt_iff_lt\"><span class=\"name\">ISize</span>.<span class=\"name\">ofInt_lt_iff_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2260-L2262","name":"Int64.ofInt_lt_iff_lt","line":2260,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofInt_lt_iff_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofInt_lt_iff_lt\"><span class=\"name\">Int64</span>.<span class=\"name\">ofInt_lt_iff_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2257-L2259","name":"Int32.ofInt_lt_iff_lt","line":2257,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofInt_lt_iff_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofInt_lt_iff_lt\"><span class=\"name\">Int32</span>.<span class=\"name\">ofInt_lt_iff_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2254-L2256","name":"Int16.ofInt_lt_iff_lt","line":2254,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofInt_lt_iff_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofInt_lt_iff_lt\"><span class=\"name\">Int16</span>.<span class=\"name\">ofInt_lt_iff_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2251-L2253","name":"Int8.ofInt_lt_iff_lt","line":2251,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofInt_lt_iff_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofInt_lt_iff_lt\"><span class=\"name\">Int8</span>.<span class=\"name\">ofInt_lt_iff_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2248-L2249","name":"ISize.ofIntLE_lt_iff_lt","line":2248,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofIntLE_lt_iff_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofIntLE_lt_iff_lt\"><span class=\"name\">ISize</span>.<span class=\"name\">ofIntLE_lt_iff_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ofIntLE</a> <span class=\"fn\">a</span> <span class=\"fn\">ha₁</span> <span class=\"fn\">ha₂</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ofIntLE</a> <span class=\"fn\">b</span> <span class=\"fn\">hb₁</span> <span class=\"fn\">hb₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2246-L2247","name":"Int64.ofIntLE_lt_iff_lt","line":2246,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofIntLE_lt_iff_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofIntLE_lt_iff_lt\"><span class=\"name\">Int64</span>.<span class=\"name\">ofIntLE_lt_iff_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">ofIntLE</a> <span class=\"fn\">a</span> <span class=\"fn\">ha₁</span> <span class=\"fn\">ha₂</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">ofIntLE</a> <span class=\"fn\">b</span> <span class=\"fn\">hb₁</span> <span class=\"fn\">hb₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2244-L2245","name":"Int32.ofIntLE_lt_iff_lt","line":2244,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofIntLE_lt_iff_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofIntLE_lt_iff_lt\"><span class=\"name\">Int32</span>.<span class=\"name\">ofIntLE_lt_iff_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">ofIntLE</a> <span class=\"fn\">a</span> <span class=\"fn\">ha₁</span> <span class=\"fn\">ha₂</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">ofIntLE</a> <span class=\"fn\">b</span> <span class=\"fn\">hb₁</span> <span class=\"fn\">hb₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2242-L2243","name":"Int16.ofIntLE_lt_iff_lt","line":2242,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofIntLE_lt_iff_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofIntLE_lt_iff_lt\"><span class=\"name\">Int16</span>.<span class=\"name\">ofIntLE_lt_iff_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\">ofIntLE</a> <span class=\"fn\">a</span> <span class=\"fn\">ha₁</span> <span class=\"fn\">ha₂</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\">ofIntLE</a> <span class=\"fn\">b</span> <span class=\"fn\">hb₁</span> <span class=\"fn\">hb₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2240-L2241","name":"Int8.ofIntLE_lt_iff_lt","line":2240,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofIntLE_lt_iff_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofIntLE_lt_iff_lt\"><span class=\"name\">Int8</span>.<span class=\"name\">ofIntLE_lt_iff_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\">ofIntLE</a> <span class=\"fn\">a</span> <span class=\"fn\">ha₁</span> <span class=\"fn\">ha₂</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\">ofIntLE</a> <span class=\"fn\">b</span> <span class=\"fn\">hb₁</span> <span class=\"fn\">hb₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2238-L2238","name":"ISize.ofBitVec_le_iff_sle","line":2238,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_le_iff_sle","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_le_iff_sle\"><span class=\"name\">ISize</span>.<span class=\"name\">ofBitVec_le_iff_sle</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sle\">sle</a></span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2237-L2237","name":"Int64.ofBitVec_le_iff_sle","line":2237,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_le_iff_sle","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_le_iff_sle\"><span class=\"name\">Int64</span>.<span class=\"name\">ofBitVec_le_iff_sle</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sle\">sle</a></span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2236-L2236","name":"Int32.ofBitVec_le_iff_sle","line":2236,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_le_iff_sle","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_le_iff_sle\"><span class=\"name\">Int32</span>.<span class=\"name\">ofBitVec_le_iff_sle</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sle\">sle</a></span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2235-L2235","name":"Int16.ofBitVec_le_iff_sle","line":2235,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_le_iff_sle","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_le_iff_sle\"><span class=\"name\">Int16</span>.<span class=\"name\">ofBitVec_le_iff_sle</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sle\">sle</a></span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2234-L2234","name":"Int8.ofBitVec_le_iff_sle","line":2234,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_le_iff_sle","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_le_iff_sle\"><span class=\"name\">Int8</span>.<span class=\"name\">ofBitVec_le_iff_sle</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sle\">sle</a></span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2224-L2232","name":"ISize.ofNat_le_iff_le","line":2224,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofNat_le_iff_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofNat_le_iff_le\"><span class=\"name\">ISize</span>.<span class=\"name\">ofNat_le_iff_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>))</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>))</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2219-L2223","name":"Int64.ofNat_le_iff_le","line":2219,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofNat_le_iff_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofNat_le_iff_le\"><span class=\"name\">Int64</span>.<span class=\"name\">ofNat_le_iff_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2214-L2218","name":"Int32.ofNat_le_iff_le","line":2214,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofNat_le_iff_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofNat_le_iff_le\"><span class=\"name\">Int32</span>.<span class=\"name\">ofNat_le_iff_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2209-L2213","name":"Int16.ofNat_le_iff_le","line":2209,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofNat_le_iff_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofNat_le_iff_le\"><span class=\"name\">Int16</span>.<span class=\"name\">ofNat_le_iff_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">15</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">15</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2204-L2208","name":"Int8.ofNat_le_iff_le","line":2204,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofNat_le_iff_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofNat_le_iff_le\"><span class=\"name\">Int8</span>.<span class=\"name\">ofNat_le_iff_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">7</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">7</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2200-L2202","name":"ISize.ofInt_le_iff_le","line":2200,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofInt_le_iff_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofInt_le_iff_le\"><span class=\"name\">ISize</span>.<span class=\"name\">ofInt_le_iff_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2197-L2199","name":"Int64.ofInt_le_iff_le","line":2197,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofInt_le_iff_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofInt_le_iff_le\"><span class=\"name\">Int64</span>.<span class=\"name\">ofInt_le_iff_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2194-L2196","name":"Int32.ofInt_le_iff_le","line":2194,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofInt_le_iff_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofInt_le_iff_le\"><span class=\"name\">Int32</span>.<span class=\"name\">ofInt_le_iff_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2191-L2193","name":"Int16.ofInt_le_iff_le","line":2191,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofInt_le_iff_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofInt_le_iff_le\"><span class=\"name\">Int16</span>.<span class=\"name\">ofInt_le_iff_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2188-L2190","name":"Int8.ofInt_le_iff_le","line":2188,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofInt_le_iff_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofInt_le_iff_le\"><span class=\"name\">Int8</span>.<span class=\"name\">ofInt_le_iff_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2185-L2186","name":"ISize.ofIntLE_le_iff_le","line":2185,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofIntLE_le_iff_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofIntLE_le_iff_le\"><span class=\"name\">ISize</span>.<span class=\"name\">ofIntLE_le_iff_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ofIntLE</a> <span class=\"fn\">a</span> <span class=\"fn\">ha₁</span> <span class=\"fn\">ha₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ofIntLE</a> <span class=\"fn\">b</span> <span class=\"fn\">hb₁</span> <span class=\"fn\">hb₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2183-L2184","name":"Int64.ofIntLE_le_iff_le","line":2183,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofIntLE_le_iff_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofIntLE_le_iff_le\"><span class=\"name\">Int64</span>.<span class=\"name\">ofIntLE_le_iff_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">ofIntLE</a> <span class=\"fn\">a</span> <span class=\"fn\">ha₁</span> <span class=\"fn\">ha₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">ofIntLE</a> <span class=\"fn\">b</span> <span class=\"fn\">hb₁</span> <span class=\"fn\">hb₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2181-L2182","name":"Int32.ofIntLE_le_iff_le","line":2181,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofIntLE_le_iff_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofIntLE_le_iff_le\"><span class=\"name\">Int32</span>.<span class=\"name\">ofIntLE_le_iff_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">ofIntLE</a> <span class=\"fn\">a</span> <span class=\"fn\">ha₁</span> <span class=\"fn\">ha₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">ofIntLE</a> <span class=\"fn\">b</span> <span class=\"fn\">hb₁</span> <span class=\"fn\">hb₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2179-L2180","name":"Int16.ofIntLE_le_iff_le","line":2179,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofIntLE_le_iff_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofIntLE_le_iff_le\"><span class=\"name\">Int16</span>.<span class=\"name\">ofIntLE_le_iff_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\">ofIntLE</a> <span class=\"fn\">a</span> <span class=\"fn\">ha₁</span> <span class=\"fn\">ha₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\">ofIntLE</a> <span class=\"fn\">b</span> <span class=\"fn\">hb₁</span> <span class=\"fn\">hb₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2177-L2178","name":"Int8.ofIntLE_le_iff_le","line":2177,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofIntLE_le_iff_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofIntLE_le_iff_le\"><span class=\"name\">Int8</span>.<span class=\"name\">ofIntLE_le_iff_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\">ofIntLE</a> <span class=\"fn\">a</span> <span class=\"fn\">ha₁</span> <span class=\"fn\">ha₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\">ofIntLE</a> <span class=\"fn\">b</span> <span class=\"fn\">hb₁</span> <span class=\"fn\">hb₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2175-L2175","name":"ISize.toInt_bmod_size","line":2175,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_bmod_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_bmod_size\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_bmod_size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <a href=\"./Init/Data/SInt/Basic.html#ISize.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2174-L2174","name":"Int64.toInt_bmod_size","line":2174,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_bmod_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_bmod_size\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_bmod_size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <a href=\"./Init/Data/SInt/Basic.html#Int64.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2173-L2173","name":"Int32.toInt_bmod_size","line":2173,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_bmod_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_bmod_size\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_bmod_size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <a href=\"./Init/Data/SInt/Basic.html#Int32.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2172-L2172","name":"Int16.toInt_bmod_size","line":2172,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_bmod_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_bmod_size\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_bmod_size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <a href=\"./Init/Data/SInt/Basic.html#Int16.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2171-L2171","name":"Int8.toInt_bmod_size","line":2171,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_bmod_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_bmod_size\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_bmod_size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <a href=\"./Init/Data/SInt/Basic.html#Int8.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2169-L2169","name":"ISize.ofBitVec_srem","line":2169,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_srem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_srem\"><span class=\"name\">ISize</span>.<span class=\"name\">ofBitVec_srem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.srem\">srem</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2168-L2168","name":"Int64.ofBitVec_srem","line":2168,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_srem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_srem\"><span class=\"name\">Int64</span>.<span class=\"name\">ofBitVec_srem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.srem\">srem</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2167-L2167","name":"Int32.ofBitVec_srem","line":2167,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_srem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_srem\"><span class=\"name\">Int32</span>.<span class=\"name\">ofBitVec_srem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.srem\">srem</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2166-L2166","name":"Int16.ofBitVec_srem","line":2166,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_srem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_srem\"><span class=\"name\">Int16</span>.<span class=\"name\">ofBitVec_srem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.srem\">srem</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2165-L2165","name":"Int8.ofBitVec_srem","line":2165,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_srem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_srem\"><span class=\"name\">Int8</span>.<span class=\"name\">ofBitVec_srem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.srem\">srem</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2155-L2163","name":"ISize.ofNat_div","line":2155,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofNat_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofNat_div\"><span class=\"name\">ISize</span>.<span class=\"name\">ofNat_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>))</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>))</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2149-L2154","name":"Int64.ofNat_div","line":2149,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofNat_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofNat_div\"><span class=\"name\">Int64</span>.<span class=\"name\">ofNat_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2143-L2148","name":"Int32.ofNat_div","line":2143,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofNat_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofNat_div\"><span class=\"name\">Int32</span>.<span class=\"name\">ofNat_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2137-L2142","name":"Int16.ofNat_div","line":2137,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofNat_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofNat_div\"><span class=\"name\">Int16</span>.<span class=\"name\">ofNat_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">15</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">15</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2131-L2136","name":"Int8.ofNat_div","line":2131,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofNat_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofNat_div\"><span class=\"name\">Int8</span>.<span class=\"name\">ofNat_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">7</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">7</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2127-L2129","name":"ISize.ofInt_eq_ofIntLE_div","line":2127,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofInt_eq_ofIntLE_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofInt_eq_ofIntLE_div\"><span class=\"name\">ISize</span>.<span class=\"name\">ofInt_eq_ofIntLE_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ofIntLE</a> <span class=\"fn\">a</span> <span class=\"fn\">ha₁</span> <span class=\"fn\">ha₂</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ofIntLE</a> <span class=\"fn\">b</span> <span class=\"fn\">hb₁</span> <span class=\"fn\">hb₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2124-L2126","name":"Int64.ofInt_eq_ofIntLE_div","line":2124,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofInt_eq_ofIntLE_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofInt_eq_ofIntLE_div\"><span class=\"name\">Int64</span>.<span class=\"name\">ofInt_eq_ofIntLE_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">ofIntLE</a> <span class=\"fn\">a</span> <span class=\"fn\">ha₁</span> <span class=\"fn\">ha₂</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">ofIntLE</a> <span class=\"fn\">b</span> <span class=\"fn\">hb₁</span> <span class=\"fn\">hb₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2121-L2123","name":"Int32.ofInt_eq_ofIntLE_div","line":2121,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofInt_eq_ofIntLE_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofInt_eq_ofIntLE_div\"><span class=\"name\">Int32</span>.<span class=\"name\">ofInt_eq_ofIntLE_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">ofIntLE</a> <span class=\"fn\">a</span> <span class=\"fn\">ha₁</span> <span class=\"fn\">ha₂</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">ofIntLE</a> <span class=\"fn\">b</span> <span class=\"fn\">hb₁</span> <span class=\"fn\">hb₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2118-L2120","name":"Int16.ofInt_eq_ofIntLE_div","line":2118,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofInt_eq_ofIntLE_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofInt_eq_ofIntLE_div\"><span class=\"name\">Int16</span>.<span class=\"name\">ofInt_eq_ofIntLE_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\">ofIntLE</a> <span class=\"fn\">a</span> <span class=\"fn\">ha₁</span> <span class=\"fn\">ha₂</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\">ofIntLE</a> <span class=\"fn\">b</span> <span class=\"fn\">hb₁</span> <span class=\"fn\">hb₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2115-L2117","name":"Int8.ofInt_eq_ofIntLE_div","line":2115,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofInt_eq_ofIntLE_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofInt_eq_ofIntLE_div\"><span class=\"name\">Int8</span>.<span class=\"name\">ofInt_eq_ofIntLE_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\">ofIntLE</a> <span class=\"fn\">a</span> <span class=\"fn\">ha₁</span> <span class=\"fn\">ha₂</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\">ofIntLE</a> <span class=\"fn\">b</span> <span class=\"fn\">hb₁</span> <span class=\"fn\">hb₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2104-L2113","name":"ISize.ofInt_tdiv","line":2104,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofInt_tdiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofInt_tdiv\"><span class=\"name\">ISize</span>.<span class=\"name\">ofInt_tdiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2096-L2103","name":"Int64.ofInt_tdiv","line":2096,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofInt_tdiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofInt_tdiv\"><span class=\"name\">Int64</span>.<span class=\"name\">ofInt_tdiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2088-L2095","name":"Int32.ofInt_tdiv","line":2088,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofInt_tdiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofInt_tdiv\"><span class=\"name\">Int32</span>.<span class=\"name\">ofInt_tdiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2080-L2087","name":"Int16.ofInt_tdiv","line":2080,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofInt_tdiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofInt_tdiv\"><span class=\"name\">Int16</span>.<span class=\"name\">ofInt_tdiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2072-L2079","name":"Int8.ofInt_tdiv","line":2072,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofInt_tdiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofInt_tdiv\"><span class=\"name\">Int8</span>.<span class=\"name\">ofInt_tdiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2070-L2070","name":"ISize.ofBitVec_sdiv","line":2070,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_sdiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_sdiv\"><span class=\"name\">ISize</span>.<span class=\"name\">ofBitVec_sdiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\">sdiv</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2069-L2069","name":"Int64.ofBitVec_sdiv","line":2069,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_sdiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_sdiv\"><span class=\"name\">Int64</span>.<span class=\"name\">ofBitVec_sdiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\">sdiv</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2068-L2068","name":"Int32.ofBitVec_sdiv","line":2068,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_sdiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_sdiv\"><span class=\"name\">Int32</span>.<span class=\"name\">ofBitVec_sdiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\">sdiv</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2067-L2067","name":"Int16.ofBitVec_sdiv","line":2067,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_sdiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_sdiv\"><span class=\"name\">Int16</span>.<span class=\"name\">ofBitVec_sdiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\">sdiv</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2066-L2066","name":"Int8.ofBitVec_sdiv","line":2066,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_sdiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_sdiv\"><span class=\"name\">Int8</span>.<span class=\"name\">ofBitVec_sdiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\">sdiv</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2063-L2064","name":"ISize.toInt_maxValue_add_one","line":2063,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_maxValue_add_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_maxValue_add_one\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_maxValue_add_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2062-L2062","name":"Int64.toInt_maxValue_add_one","line":2062,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_maxValue_add_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_maxValue_add_one\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_maxValue_add_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2061-L2061","name":"Int32.toInt_maxValue_add_one","line":2061,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_maxValue_add_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_maxValue_add_one\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_maxValue_add_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2060-L2060","name":"Int16.toInt_maxValue_add_one","line":2060,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_maxValue_add_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_maxValue_add_one\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_maxValue_add_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">15</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2059-L2059","name":"Int8.toInt_maxValue_add_one","line":2059,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_maxValue_add_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_maxValue_add_one\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_maxValue_add_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">7</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2055-L2057","name":"ISize.toInt_minValue_lt_zero","line":2055,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_minValue_lt_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_minValue_lt_zero\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_minValue_lt_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2054-L2054","name":"Int64.toInt_minValue_lt_zero","line":2054,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_minValue_lt_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_minValue_lt_zero\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_minValue_lt_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2053-L2053","name":"Int32.toInt_minValue_lt_zero","line":2053,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_minValue_lt_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_minValue_lt_zero\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_minValue_lt_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2052-L2052","name":"Int16.toInt_minValue_lt_zero","line":2052,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_minValue_lt_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_minValue_lt_zero\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_minValue_lt_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2051-L2051","name":"Int8.toInt_minValue_lt_zero","line":2051,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_minValue_lt_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_minValue_lt_zero\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_minValue_lt_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2048-L2049","name":"ISize.ofIntLE_mul","line":2048,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofIntLE_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofIntLE_mul\"><span class=\"name\">ISize</span>.<span class=\"name\">ofIntLE_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ofIntLE</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>) <span class=\"fn\">hab₁</span> <span class=\"fn\">hab₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2046-L2047","name":"Int64.ofIntLE_mul","line":2046,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofIntLE_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofIntLE_mul\"><span class=\"name\">Int64</span>.<span class=\"name\">ofIntLE_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">ofIntLE</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>) <span class=\"fn\">hab₁</span> <span class=\"fn\">hab₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2044-L2045","name":"Int32.ofIntLE_mul","line":2044,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofIntLE_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofIntLE_mul\"><span class=\"name\">Int32</span>.<span class=\"name\">ofIntLE_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">ofIntLE</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>) <span class=\"fn\">hab₁</span> <span class=\"fn\">hab₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2042-L2043","name":"Int16.ofIntLE_mul","line":2042,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofIntLE_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofIntLE_mul\"><span class=\"name\">Int16</span>.<span class=\"name\">ofIntLE_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\">ofIntLE</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>) <span class=\"fn\">hab₁</span> <span class=\"fn\">hab₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2040-L2041","name":"Int8.ofIntLE_mul","line":2040,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofIntLE_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofIntLE_mul\"><span class=\"name\">Int8</span>.<span class=\"name\">ofIntLE_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\">ofIntLE</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>) <span class=\"fn\">hab₁</span> <span class=\"fn\">hab₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2037-L2038","name":"ISize.ofNat_mul","line":2037,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofNat_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofNat_mul\"><span class=\"name\">ISize</span>.<span class=\"name\">ofNat_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2035-L2036","name":"Int64.ofNat_mul","line":2035,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofNat_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofNat_mul\"><span class=\"name\">Int64</span>.<span class=\"name\">ofNat_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2033-L2034","name":"Int32.ofNat_mul","line":2033,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofNat_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofNat_mul\"><span class=\"name\">Int32</span>.<span class=\"name\">ofNat_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2031-L2032","name":"Int16.ofNat_mul","line":2031,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofNat_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofNat_mul\"><span class=\"name\">Int16</span>.<span class=\"name\">ofNat_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2029-L2030","name":"Int8.ofNat_mul","line":2029,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofNat_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofNat_mul\"><span class=\"name\">Int8</span>.<span class=\"name\">ofNat_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2026-L2027","name":"ISize.ofInt_mul","line":2026,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofInt_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofInt_mul\"><span class=\"name\">ISize</span>.<span class=\"name\">ofInt_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2024-L2025","name":"Int64.ofInt_mul","line":2024,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofInt_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofInt_mul\"><span class=\"name\">Int64</span>.<span class=\"name\">ofInt_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2022-L2023","name":"Int32.ofInt_mul","line":2022,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofInt_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofInt_mul\"><span class=\"name\">Int32</span>.<span class=\"name\">ofInt_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2020-L2021","name":"Int16.ofInt_mul","line":2020,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofInt_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofInt_mul\"><span class=\"name\">Int16</span>.<span class=\"name\">ofInt_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2018-L2019","name":"Int8.ofInt_mul","line":2018,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofInt_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofInt_mul\"><span class=\"name\">Int8</span>.<span class=\"name\">ofInt_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2016-L2016","name":"ISize.ofBitVec_mul","line":2016,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_mul\"><span class=\"name\">ISize</span>.<span class=\"name\">ofBitVec_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2015-L2015","name":"Int64.ofBitVec_mul","line":2015,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_mul\"><span class=\"name\">Int64</span>.<span class=\"name\">ofBitVec_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2014-L2014","name":"Int32.ofBitVec_mul","line":2014,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_mul\"><span class=\"name\">Int32</span>.<span class=\"name\">ofBitVec_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2013-L2013","name":"Int16.ofBitVec_mul","line":2013,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_mul\"><span class=\"name\">Int16</span>.<span class=\"name\">ofBitVec_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2012-L2012","name":"Int8.ofBitVec_mul","line":2012,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_mul\"><span class=\"name\">Int8</span>.<span class=\"name\">ofBitVec_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2009-L2010","name":"ISize.ofIntLE_sub","line":2009,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofIntLE_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofIntLE_sub\"><span class=\"name\">ISize</span>.<span class=\"name\">ofIntLE_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ofIntLE</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>) <span class=\"fn\">hab₁</span> <span class=\"fn\">hab₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2007-L2008","name":"Int64.ofIntLE_sub","line":2007,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofIntLE_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofIntLE_sub\"><span class=\"name\">Int64</span>.<span class=\"name\">ofIntLE_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">ofIntLE</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>) <span class=\"fn\">hab₁</span> <span class=\"fn\">hab₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2005-L2006","name":"Int32.ofIntLE_sub","line":2005,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofIntLE_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofIntLE_sub\"><span class=\"name\">Int32</span>.<span class=\"name\">ofIntLE_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">ofIntLE</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>) <span class=\"fn\">hab₁</span> <span class=\"fn\">hab₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2003-L2004","name":"Int16.ofIntLE_sub","line":2003,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofIntLE_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofIntLE_sub\"><span class=\"name\">Int16</span>.<span class=\"name\">ofIntLE_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\">ofIntLE</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>) <span class=\"fn\">hab₁</span> <span class=\"fn\">hab₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L2001-L2002","name":"Int8.ofIntLE_sub","line":2001,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofIntLE_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofIntLE_sub\"><span class=\"name\">Int8</span>.<span class=\"name\">ofIntLE_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\">ofIntLE</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>) <span class=\"fn\">hab₁</span> <span class=\"fn\">hab₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1998-L1999","name":"ISize.ofNat_sub","line":1998,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofNat_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofNat_sub\"><span class=\"name\">ISize</span>.<span class=\"name\">ofNat_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1996-L1997","name":"Int64.ofNat_sub","line":1996,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofNat_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofNat_sub\"><span class=\"name\">Int64</span>.<span class=\"name\">ofNat_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1994-L1995","name":"Int32.ofNat_sub","line":1994,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofNat_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofNat_sub\"><span class=\"name\">Int32</span>.<span class=\"name\">ofNat_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1992-L1993","name":"Int16.ofNat_sub","line":1992,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofNat_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofNat_sub\"><span class=\"name\">Int16</span>.<span class=\"name\">ofNat_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1990-L1991","name":"Int8.ofNat_sub","line":1990,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofNat_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofNat_sub\"><span class=\"name\">Int8</span>.<span class=\"name\">ofNat_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1987-L1988","name":"ISize.ofInt_sub","line":1987,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofInt_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofInt_sub\"><span class=\"name\">ISize</span>.<span class=\"name\">ofInt_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1985-L1986","name":"Int64.ofInt_sub","line":1985,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofInt_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofInt_sub\"><span class=\"name\">Int64</span>.<span class=\"name\">ofInt_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1983-L1984","name":"Int32.ofInt_sub","line":1983,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofInt_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofInt_sub\"><span class=\"name\">Int32</span>.<span class=\"name\">ofInt_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1981-L1982","name":"Int16.ofInt_sub","line":1981,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofInt_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofInt_sub\"><span class=\"name\">Int16</span>.<span class=\"name\">ofInt_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1979-L1980","name":"Int8.ofInt_sub","line":1979,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofInt_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofInt_sub\"><span class=\"name\">Int8</span>.<span class=\"name\">ofInt_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1977-L1977","name":"ISize.ofBitVec_sub","line":1977,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_sub\"><span class=\"name\">ISize</span>.<span class=\"name\">ofBitVec_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1976-L1976","name":"Int64.ofBitVec_sub","line":1976,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_sub\"><span class=\"name\">Int64</span>.<span class=\"name\">ofBitVec_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1975-L1975","name":"Int32.ofBitVec_sub","line":1975,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_sub\"><span class=\"name\">Int32</span>.<span class=\"name\">ofBitVec_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1974-L1974","name":"Int16.ofBitVec_sub","line":1974,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_sub\"><span class=\"name\">Int16</span>.<span class=\"name\">ofBitVec_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1973-L1973","name":"Int8.ofBitVec_sub","line":1973,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_sub\"><span class=\"name\">Int8</span>.<span class=\"name\">ofBitVec_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1970-L1971","name":"ISize.ofIntLE_add","line":1970,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofIntLE_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofIntLE_add\"><span class=\"name\">ISize</span>.<span class=\"name\">ofIntLE_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ofIntLE</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) <span class=\"fn\">hab₁</span> <span class=\"fn\">hab₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1968-L1969","name":"Int64.ofIntLE_add","line":1968,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofIntLE_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofIntLE_add\"><span class=\"name\">Int64</span>.<span class=\"name\">ofIntLE_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">ofIntLE</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) <span class=\"fn\">hab₁</span> <span class=\"fn\">hab₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1966-L1967","name":"Int32.ofIntLE_add","line":1966,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofIntLE_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofIntLE_add\"><span class=\"name\">Int32</span>.<span class=\"name\">ofIntLE_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">ofIntLE</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) <span class=\"fn\">hab₁</span> <span class=\"fn\">hab₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1964-L1965","name":"Int16.ofIntLE_add","line":1964,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofIntLE_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofIntLE_add\"><span class=\"name\">Int16</span>.<span class=\"name\">ofIntLE_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\">ofIntLE</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) <span class=\"fn\">hab₁</span> <span class=\"fn\">hab₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1962-L1963","name":"Int8.ofIntLE_add","line":1962,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofIntLE_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofIntLE_add\"><span class=\"name\">Int8</span>.<span class=\"name\">ofIntLE_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hab₂</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\">ofIntLE</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) <span class=\"fn\">hab₁</span> <span class=\"fn\">hab₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1959-L1960","name":"ISize.ofNat_add","line":1959,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofNat_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofNat_add\"><span class=\"name\">ISize</span>.<span class=\"name\">ofNat_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1957-L1958","name":"Int64.ofNat_add","line":1957,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofNat_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofNat_add\"><span class=\"name\">Int64</span>.<span class=\"name\">ofNat_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1955-L1956","name":"Int32.ofNat_add","line":1955,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofNat_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofNat_add\"><span class=\"name\">Int32</span>.<span class=\"name\">ofNat_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1953-L1954","name":"Int16.ofNat_add","line":1953,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofNat_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofNat_add\"><span class=\"name\">Int16</span>.<span class=\"name\">ofNat_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1951-L1952","name":"Int8.ofNat_add","line":1951,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofNat_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofNat_add\"><span class=\"name\">Int8</span>.<span class=\"name\">ofNat_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1948-L1949","name":"ISize.ofInt_add","line":1948,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofInt_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofInt_add\"><span class=\"name\">ISize</span>.<span class=\"name\">ofInt_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1946-L1947","name":"Int64.ofInt_add","line":1946,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofInt_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofInt_add\"><span class=\"name\">Int64</span>.<span class=\"name\">ofInt_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1944-L1945","name":"Int32.ofInt_add","line":1944,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofInt_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofInt_add\"><span class=\"name\">Int32</span>.<span class=\"name\">ofInt_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1942-L1943","name":"Int16.ofInt_add","line":1942,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofInt_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofInt_add\"><span class=\"name\">Int16</span>.<span class=\"name\">ofInt_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1940-L1941","name":"Int8.ofInt_add","line":1940,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofInt_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofInt_add\"><span class=\"name\">Int8</span>.<span class=\"name\">ofInt_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1938-L1938","name":"ISize.ofBitVec_add","line":1938,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_add\"><span class=\"name\">ISize</span>.<span class=\"name\">ofBitVec_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1937-L1937","name":"Int64.ofBitVec_add","line":1937,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_add\"><span class=\"name\">Int64</span>.<span class=\"name\">ofBitVec_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1936-L1936","name":"Int32.ofBitVec_add","line":1936,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_add\"><span class=\"name\">Int32</span>.<span class=\"name\">ofBitVec_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1935-L1935","name":"Int16.ofBitVec_add","line":1935,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_add\"><span class=\"name\">Int16</span>.<span class=\"name\">ofBitVec_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1934-L1934","name":"Int8.ofBitVec_add","line":1934,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_add\"><span class=\"name\">Int8</span>.<span class=\"name\">ofBitVec_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1931-L1932","name":"ISize.ofInt_eq_iff_bmod_eq_toInt","line":1931,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofInt_eq_iff_bmod_eq_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofInt_eq_iff_bmod_eq_toInt\"><span class=\"name\">ISize</span>.<span class=\"name\">ofInt_eq_iff_bmod_eq_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1929-L1930","name":"Int64.ofInt_eq_iff_bmod_eq_toInt","line":1929,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofInt_eq_iff_bmod_eq_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofInt_eq_iff_bmod_eq_toInt\"><span class=\"name\">Int64</span>.<span class=\"name\">ofInt_eq_iff_bmod_eq_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">64</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1927-L1928","name":"Int32.ofInt_eq_iff_bmod_eq_toInt","line":1927,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofInt_eq_iff_bmod_eq_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofInt_eq_iff_bmod_eq_toInt\"><span class=\"name\">Int32</span>.<span class=\"name\">ofInt_eq_iff_bmod_eq_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1925-L1926","name":"Int16.ofInt_eq_iff_bmod_eq_toInt","line":1925,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofInt_eq_iff_bmod_eq_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofInt_eq_iff_bmod_eq_toInt\"><span class=\"name\">Int16</span>.<span class=\"name\">ofInt_eq_iff_bmod_eq_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">16</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1923-L1924","name":"Int8.ofInt_eq_iff_bmod_eq_toInt","line":1923,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofInt_eq_iff_bmod_eq_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofInt_eq_iff_bmod_eq_toInt\"><span class=\"name\">Int8</span>.<span class=\"name\">ofInt_eq_iff_bmod_eq_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1920-L1921","name":"ISize.ofInt_neg","line":1920,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofInt_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofInt_neg\"><span class=\"name\">ISize</span>.<span class=\"name\">ofInt_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1919-L1919","name":"Int64.ofInt_neg","line":1919,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofInt_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofInt_neg\"><span class=\"name\">Int64</span>.<span class=\"name\">ofInt_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1918-L1918","name":"Int32.ofInt_neg","line":1918,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofInt_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofInt_neg\"><span class=\"name\">Int32</span>.<span class=\"name\">ofInt_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1917-L1917","name":"Int16.ofInt_neg","line":1917,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofInt_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofInt_neg\"><span class=\"name\">Int16</span>.<span class=\"name\">ofInt_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1916-L1916","name":"Int8.ofInt_neg","line":1916,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofInt_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofInt_neg\"><span class=\"name\">Int8</span>.<span class=\"name\">ofInt_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1914-L1914","name":"ISize.ofBitVec_neg","line":1914,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_neg\"><span class=\"name\">ISize</span>.<span class=\"name\">ofBitVec_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1913-L1913","name":"Int64.ofBitVec_neg","line":1913,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_neg\"><span class=\"name\">Int64</span>.<span class=\"name\">ofBitVec_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1912-L1912","name":"Int32.ofBitVec_neg","line":1912,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_neg\"><span class=\"name\">Int32</span>.<span class=\"name\">ofBitVec_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1911-L1911","name":"Int16.ofBitVec_neg","line":1911,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_neg\"><span class=\"name\">Int16</span>.<span class=\"name\">ofBitVec_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1910-L1910","name":"Int8.ofBitVec_neg","line":1910,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_neg\"><span class=\"name\">Int8</span>.<span class=\"name\">ofBitVec_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1907-L1908","name":"ISize.toInt64_le","line":1907,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt64_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt64_le\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt64_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1904-L1905","name":"Int32.toISize_le","line":1904,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toISize_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toISize_le\"><span class=\"name\">Int32</span>.<span class=\"name\">toISize_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1902-L1903","name":"Int32.toInt64_le","line":1902,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt64_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt64_le\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt64_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1899-L1900","name":"Int16.toISize_le","line":1899,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toISize_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toISize_le\"><span class=\"name\">Int16</span>.<span class=\"name\">toISize_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1897-L1898","name":"Int16.toInt64_le","line":1897,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt64_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt64_le\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt64_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1895-L1896","name":"Int16.toInt32_le","line":1895,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt32_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt32_le\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt32_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1892-L1893","name":"Int8.toISize_le","line":1892,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toISize_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toISize_le\"><span class=\"name\">Int8</span>.<span class=\"name\">toISize_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1890-L1891","name":"Int8.toInt64_le","line":1890,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt64_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt64_le\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt64_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1888-L1889","name":"Int8.toInt32_le","line":1888,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt32_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt32_le\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt32_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1886-L1887","name":"Int8.toInt16_le","line":1886,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt16_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt16_le\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt16_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1883-L1884","name":"ISize.toInt64_lt","line":1883,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt64_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt64_lt\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt64_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1880-L1881","name":"Int32.toISize_lt","line":1880,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toISize_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toISize_lt\"><span class=\"name\">Int32</span>.<span class=\"name\">toISize_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1878-L1879","name":"Int32.toInt64_lt","line":1878,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt64_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt64_lt\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt64_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1875-L1876","name":"Int16.toISize_lt","line":1875,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toISize_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toISize_lt\"><span class=\"name\">Int16</span>.<span class=\"name\">toISize_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1873-L1874","name":"Int16.toInt64_lt","line":1873,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt64_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt64_lt\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt64_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1871-L1872","name":"Int16.toInt32_lt","line":1871,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt32_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt32_lt\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt32_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1868-L1869","name":"Int8.toISize_lt","line":1868,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toISize_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toISize_lt\"><span class=\"name\">Int8</span>.<span class=\"name\">toISize_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1866-L1867","name":"Int8.toInt64_lt","line":1866,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt64_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt64_lt\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt64_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1864-L1865","name":"Int8.toInt32_lt","line":1864,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt32_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt32_lt\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt32_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1862-L1863","name":"Int8.toInt16_lt","line":1862,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt16_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt16_lt\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt16_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1859-L1860","name":"Int64.toISize_sub","line":1859,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toISize_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toISize_sub\"><span class=\"name\">Int64</span>.<span class=\"name\">toISize_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1857-L1858","name":"Int64.toInt32_sub","line":1857,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt32_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt32_sub\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt32_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1855-L1856","name":"Int64.toInt16_sub","line":1855,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt16_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt16_sub\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt16_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1853-L1854","name":"Int64.toInt8_sub","line":1853,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt8_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt8_sub\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt8_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1850-L1851","name":"ISize.toInt32_sub","line":1850,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt32_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt32_sub\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt32_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1848-L1849","name":"ISize.toInt16_sub","line":1848,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt16_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt16_sub\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt16_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1846-L1847","name":"ISize.toInt8_sub","line":1846,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt8_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt8_sub\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt8_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1843-L1844","name":"Int32.toInt16_sub","line":1843,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt16_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt16_sub\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt16_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1841-L1842","name":"Int32.toInt8_sub","line":1841,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt8_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt8_sub\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt8_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1838-L1839","name":"Int16.toInt8_sub","line":1838,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt8_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt8_sub\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt8_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1835-L1836","name":"ISize.toInt_sub","line":1835,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_sub\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>).<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1833-L1834","name":"Int64.toInt_sub","line":1833,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_sub\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>).<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">64</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1831-L1832","name":"Int32.toInt_sub","line":1831,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_sub\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>).<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1829-L1830","name":"Int16.toInt_sub","line":1829,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_sub\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>).<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">16</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1827-L1828","name":"Int8.toInt_sub","line":1827,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_sub\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>).<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1825-L1825","name":"ISize.sub_eq_add_neg","line":1825,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.sub_eq_add_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.sub_eq_add_neg\"><span class=\"name\">ISize</span>.<span class=\"name\">sub_eq_add_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1824-L1824","name":"Int64.sub_eq_add_neg","line":1824,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.sub_eq_add_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.sub_eq_add_neg\"><span class=\"name\">Int64</span>.<span class=\"name\">sub_eq_add_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1823-L1823","name":"Int32.sub_eq_add_neg","line":1823,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.sub_eq_add_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.sub_eq_add_neg\"><span class=\"name\">Int32</span>.<span class=\"name\">sub_eq_add_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1822-L1822","name":"Int16.sub_eq_add_neg","line":1822,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.sub_eq_add_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.sub_eq_add_neg\"><span class=\"name\">Int16</span>.<span class=\"name\">sub_eq_add_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1821-L1821","name":"Int8.sub_eq_add_neg","line":1821,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.sub_eq_add_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.sub_eq_add_neg\"><span class=\"name\">Int8</span>.<span class=\"name\">sub_eq_add_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1818-L1819","name":"Int64.toISize_mul","line":1818,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toISize_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toISize_mul\"><span class=\"name\">Int64</span>.<span class=\"name\">toISize_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1816-L1817","name":"Int64.toInt32_mul","line":1816,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt32_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt32_mul\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt32_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1814-L1815","name":"Int64.toInt16_mul","line":1814,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt16_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt16_mul\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt16_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1812-L1813","name":"Int64.toInt8_mul","line":1812,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt8_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt8_mul\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt8_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1809-L1810","name":"ISize.toInt32_mul","line":1809,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt32_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt32_mul\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt32_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1807-L1808","name":"ISize.toInt16_mul","line":1807,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt16_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt16_mul\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt16_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1805-L1806","name":"ISize.toInt8_mul","line":1805,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt8_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt8_mul\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt8_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1802-L1803","name":"Int32.toInt16_mul","line":1802,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt16_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt16_mul\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt16_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1800-L1801","name":"Int32.toInt8_mul","line":1800,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt8_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt8_mul\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt8_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1797-L1798","name":"Int16.toInt8_mul","line":1797,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt8_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt8_mul\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt8_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1794-L1795","name":"ISize.toInt_mul","line":1794,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_mul\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>).<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1792-L1793","name":"Int64.toInt_mul","line":1792,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_mul\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>).<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">64</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1790-L1791","name":"Int32.toInt_mul","line":1790,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_mul\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>).<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1788-L1789","name":"Int16.toInt_mul","line":1788,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_mul\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>).<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">16</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1786-L1787","name":"Int8.toInt_mul","line":1786,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_mul\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>).<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1783-L1784","name":"Int64.toISize_add","line":1783,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toISize_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toISize_add\"><span class=\"name\">Int64</span>.<span class=\"name\">toISize_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1781-L1782","name":"Int64.toInt32_add","line":1781,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt32_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt32_add\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt32_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1779-L1780","name":"Int64.toInt16_add","line":1779,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt16_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt16_add\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt16_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1777-L1778","name":"Int64.toInt8_add","line":1777,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt8_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt8_add\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt8_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1774-L1775","name":"ISize.toInt32_add","line":1774,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt32_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt32_add\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt32_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1772-L1773","name":"ISize.toInt16_add","line":1772,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt16_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt16_add\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt16_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1770-L1771","name":"ISize.toInt8_add","line":1770,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt8_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt8_add\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt8_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1767-L1768","name":"Int32.toInt16_add","line":1767,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt16_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt16_add\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt16_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1765-L1766","name":"Int32.toInt8_add","line":1765,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt8_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt8_add\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt8_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1762-L1763","name":"Int16.toInt8_add","line":1762,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt8_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt8_add\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt8_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1759-L1760","name":"ISize.toInt_add","line":1759,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_add\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>).<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1757-L1758","name":"Int64.toInt_add","line":1757,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_add\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>).<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">64</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1755-L1756","name":"Int32.toInt_add","line":1755,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_add\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>).<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1753-L1754","name":"Int16.toInt_add","line":1753,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_add\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>).<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">16</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1751-L1752","name":"Int8.toInt_add","line":1751,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_add\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>).<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1748-L1749","name":"ISize.minValue_div_neg_one","line":1748,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.minValue_div_neg_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.minValue_div_neg_one\"><span class=\"name\">ISize</span>.<span class=\"name\">minValue_div_neg_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1747-L1747","name":"Int64.minValue_div_neg_one","line":1747,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.minValue_div_neg_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.minValue_div_neg_one\"><span class=\"name\">Int64</span>.<span class=\"name\">minValue_div_neg_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1746-L1746","name":"Int32.minValue_div_neg_one","line":1746,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.minValue_div_neg_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.minValue_div_neg_one\"><span class=\"name\">Int32</span>.<span class=\"name\">minValue_div_neg_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1745-L1745","name":"Int16.minValue_div_neg_one","line":1745,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.minValue_div_neg_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.minValue_div_neg_one\"><span class=\"name\">Int16</span>.<span class=\"name\">minValue_div_neg_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1744-L1744","name":"Int8.minValue_div_neg_one","line":1744,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.minValue_div_neg_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.minValue_div_neg_one\"><span class=\"name\">Int8</span>.<span class=\"name\">minValue_div_neg_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1740-L1742","name":"ISize.toInt64_div_of_ne_right","line":1740,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt64_div_of_ne_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt64_div_of_ne_right\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt64_div_of_ne_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1736-L1738","name":"Int32.toISize_div_of_ne_right","line":1736,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toISize_div_of_ne_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toISize_div_of_ne_right\"><span class=\"name\">Int32</span>.<span class=\"name\">toISize_div_of_ne_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1733-L1735","name":"Int32.toInt64_div_of_ne_right","line":1733,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt64_div_of_ne_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt64_div_of_ne_right\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt64_div_of_ne_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1729-L1731","name":"Int16.toISize_div_of_ne_right","line":1729,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toISize_div_of_ne_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toISize_div_of_ne_right\"><span class=\"name\">Int16</span>.<span class=\"name\">toISize_div_of_ne_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1726-L1728","name":"Int16.toInt64_div_of_ne_right","line":1726,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt64_div_of_ne_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt64_div_of_ne_right\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt64_div_of_ne_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1723-L1725","name":"Int16.toInt32_div_of_ne_right","line":1723,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt32_div_of_ne_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt32_div_of_ne_right\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt32_div_of_ne_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1719-L1721","name":"Int8.toISize_div_of_ne_right","line":1719,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toISize_div_of_ne_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toISize_div_of_ne_right\"><span class=\"name\">Int8</span>.<span class=\"name\">toISize_div_of_ne_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1716-L1718","name":"Int8.toInt64_div_of_ne_right","line":1716,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt64_div_of_ne_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt64_div_of_ne_right\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt64_div_of_ne_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1713-L1715","name":"Int8.toInt32_div_of_ne_right","line":1713,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt32_div_of_ne_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt32_div_of_ne_right\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt32_div_of_ne_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1710-L1712","name":"Int8.toInt16_div_of_ne_right","line":1710,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt16_div_of_ne_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt16_div_of_ne_right\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt16_div_of_ne_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1706-L1708","name":"ISize.toInt64_div_of_ne_left","line":1706,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt64_div_of_ne_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt64_div_of_ne_left\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt64_div_of_ne_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1702-L1704","name":"Int32.toISize_div_of_ne_left","line":1702,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toISize_div_of_ne_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toISize_div_of_ne_left\"><span class=\"name\">Int32</span>.<span class=\"name\">toISize_div_of_ne_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1699-L1701","name":"Int32.toInt64_div_of_ne_left","line":1699,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt64_div_of_ne_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt64_div_of_ne_left\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt64_div_of_ne_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1695-L1697","name":"Int16.toISize_div_of_ne_left","line":1695,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toISize_div_of_ne_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toISize_div_of_ne_left\"><span class=\"name\">Int16</span>.<span class=\"name\">toISize_div_of_ne_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1692-L1694","name":"Int16.toInt64_div_of_ne_left","line":1692,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt64_div_of_ne_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt64_div_of_ne_left\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt64_div_of_ne_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1689-L1691","name":"Int16.toInt32_div_of_ne_left","line":1689,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt32_div_of_ne_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt32_div_of_ne_left\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt32_div_of_ne_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1685-L1687","name":"Int8.toISize_div_of_ne_left","line":1685,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toISize_div_of_ne_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toISize_div_of_ne_left\"><span class=\"name\">Int8</span>.<span class=\"name\">toISize_div_of_ne_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1682-L1684","name":"Int8.toInt64_div_of_ne_left","line":1682,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt64_div_of_ne_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt64_div_of_ne_left\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt64_div_of_ne_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1679-L1681","name":"Int8.toInt32_div_of_ne_left","line":1679,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt32_div_of_ne_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt32_div_of_ne_left\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt32_div_of_ne_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1676-L1678","name":"Int8.toInt16_div_of_ne_left","line":1676,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt16_div_of_ne_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt16_div_of_ne_left\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt16_div_of_ne_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1673-L1674","name":"ISize.toInt64_ne_neg_one","line":1673,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt64_ne_neg_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt64_ne_neg_one\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt64_ne_neg_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1670-L1671","name":"Int32.toISize_ne_neg_one","line":1670,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toISize_ne_neg_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toISize_ne_neg_one\"><span class=\"name\">Int32</span>.<span class=\"name\">toISize_ne_neg_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1668-L1669","name":"Int32.toInt64_ne_neg_one","line":1668,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt64_ne_neg_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt64_ne_neg_one\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt64_ne_neg_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1665-L1666","name":"Int16.toISize_ne_neg_one","line":1665,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toISize_ne_neg_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toISize_ne_neg_one\"><span class=\"name\">Int16</span>.<span class=\"name\">toISize_ne_neg_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1663-L1664","name":"Int16.toInt64_ne_neg_one","line":1663,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt64_ne_neg_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt64_ne_neg_one\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt64_ne_neg_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1661-L1662","name":"Int16.toInt32_ne_neg_one","line":1661,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt32_ne_neg_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt32_ne_neg_one\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt32_ne_neg_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1658-L1659","name":"Int8.toISize_ne_neg_one","line":1658,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toISize_ne_neg_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toISize_ne_neg_one\"><span class=\"name\">Int8</span>.<span class=\"name\">toISize_ne_neg_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1656-L1657","name":"Int8.toInt64_ne_neg_one","line":1656,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt64_ne_neg_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt64_ne_neg_one\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt64_ne_neg_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1654-L1655","name":"Int8.toInt32_ne_neg_one","line":1654,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt32_ne_neg_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt32_ne_neg_one\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt32_ne_neg_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1652-L1653","name":"Int8.toInt16_ne_neg_one","line":1652,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt16_ne_neg_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt16_ne_neg_one\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt16_ne_neg_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1647-L1650","name":"ISize.toInt64_ne_minValue","line":1647,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt64_ne_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt64_ne_minValue\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt64_ne_minValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">Int64.minValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1642-L1645","name":"Int32.toISize_ne_minValue","line":1642,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toISize_ne_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toISize_ne_minValue\"><span class=\"name\">Int32</span>.<span class=\"name\">toISize_ne_minValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">ISize.minValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1640-L1641","name":"Int32.toInt64_ne_minValue","line":1640,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt64_ne_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt64_ne_minValue\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt64_ne_minValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">Int64.minValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1637-L1638","name":"Int16.toISize_ne_minValue","line":1637,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toISize_ne_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toISize_ne_minValue\"><span class=\"name\">Int16</span>.<span class=\"name\">toISize_ne_minValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">ISize.minValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1635-L1636","name":"Int16.toInt64_ne_minValue","line":1635,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt64_ne_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt64_ne_minValue\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt64_ne_minValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">Int64.minValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1633-L1634","name":"Int16.toInt32_ne_minValue","line":1633,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt32_ne_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt32_ne_minValue\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt32_ne_minValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">Int32.minValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1630-L1631","name":"Int8.toISize_ne_minValue","line":1630,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toISize_ne_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toISize_ne_minValue\"><span class=\"name\">Int8</span>.<span class=\"name\">toISize_ne_minValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">ISize.minValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1628-L1629","name":"Int8.toInt64_ne_minValue","line":1628,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt64_ne_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt64_ne_minValue\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt64_ne_minValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">Int64.minValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1626-L1627","name":"Int8.toInt32_ne_minValue","line":1626,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt32_ne_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt32_ne_minValue\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt32_ne_minValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">Int32.minValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1624-L1625","name":"Int8.toInt16_ne_minValue","line":1624,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt16_ne_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt16_ne_minValue\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt16_ne_minValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">Int16.minValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1620-L1622","name":"ISize.toInt_div_of_ne_right","line":1620,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_div_of_ne_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_div_of_ne_right\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_div_of_ne_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1617-L1619","name":"Int64.toInt_div_of_ne_right","line":1617,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_div_of_ne_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_div_of_ne_right\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_div_of_ne_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1614-L1616","name":"Int32.toInt_div_of_ne_right","line":1614,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_div_of_ne_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_div_of_ne_right\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_div_of_ne_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1611-L1613","name":"Int16.toInt_div_of_ne_right","line":1611,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_div_of_ne_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_div_of_ne_right\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_div_of_ne_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1608-L1610","name":"Int8.toInt_div_of_ne_right","line":1608,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_div_of_ne_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_div_of_ne_right\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_div_of_ne_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1604-L1606","name":"ISize.toInt_div_of_ne_left","line":1604,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_div_of_ne_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_div_of_ne_left\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_div_of_ne_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1601-L1603","name":"Int64.toInt_div_of_ne_left","line":1601,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_div_of_ne_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_div_of_ne_left\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_div_of_ne_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1598-L1600","name":"Int32.toInt_div_of_ne_left","line":1598,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_div_of_ne_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_div_of_ne_left\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_div_of_ne_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1595-L1597","name":"Int16.toInt_div_of_ne_left","line":1595,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_div_of_ne_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_div_of_ne_left\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_div_of_ne_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1592-L1594","name":"Int8.toInt_div_of_ne_left","line":1592,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_div_of_ne_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_div_of_ne_left\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_div_of_ne_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1589-L1590","name":"ISize.toInt_div","line":1589,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_div\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1587-L1588","name":"Int64.toInt_div","line":1587,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_div\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">64</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1585-L1586","name":"Int32.toInt_div","line":1585,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_div\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1583-L1584","name":"Int16.toInt_div","line":1583,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_div\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">16</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1581-L1582","name":"Int8.toInt_div","line":1581,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_div\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1579-L1579","name":"ISize.toNatClampNeg_pos_iff","line":1579,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_pos_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_pos_iff\"><span class=\"name\">ISize</span>.<span class=\"name\">toNatClampNeg_pos_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1578-L1578","name":"Int64.toNatClampNeg_pos_iff","line":1578,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toNatClampNeg_pos_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toNatClampNeg_pos_iff\"><span class=\"name\">Int64</span>.<span class=\"name\">toNatClampNeg_pos_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1577-L1577","name":"Int32.toNatClampNeg_pos_iff","line":1577,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_pos_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_pos_iff\"><span class=\"name\">Int32</span>.<span class=\"name\">toNatClampNeg_pos_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1576-L1576","name":"Int16.toNatClampNeg_pos_iff","line":1576,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_pos_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_pos_iff\"><span class=\"name\">Int16</span>.<span class=\"name\">toNatClampNeg_pos_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1575-L1575","name":"Int8.toNatClampNeg_pos_iff","line":1575,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_pos_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_pos_iff\"><span class=\"name\">Int8</span>.<span class=\"name\">toNatClampNeg_pos_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1571-L1573","name":"ISize.neg_nonpos_iff","line":1571,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.neg_nonpos_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.neg_nonpos_iff\"><span class=\"name\">ISize</span>.<span class=\"name\">neg_nonpos_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1568-L1570","name":"Int64.neg_nonpos_iff","line":1568,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.neg_nonpos_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.neg_nonpos_iff\"><span class=\"name\">Int64</span>.<span class=\"name\">neg_nonpos_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1565-L1567","name":"Int32.neg_nonpos_iff","line":1565,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.neg_nonpos_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.neg_nonpos_iff\"><span class=\"name\">Int32</span>.<span class=\"name\">neg_nonpos_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1562-L1564","name":"Int16.neg_nonpos_iff","line":1562,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.neg_nonpos_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.neg_nonpos_iff\"><span class=\"name\">Int16</span>.<span class=\"name\">neg_nonpos_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1559-L1561","name":"Int8.neg_nonpos_iff","line":1559,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.neg_nonpos_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.neg_nonpos_iff\"><span class=\"name\">Int8</span>.<span class=\"name\">neg_nonpos_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1557-L1557","name":"ISize.not_le","line":1557,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.not_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.not_le\"><span class=\"name\">ISize</span>.<span class=\"name\">not_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1556-L1556","name":"Int64.not_le","line":1556,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.not_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.not_le\"><span class=\"name\">Int64</span>.<span class=\"name\">not_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1555-L1555","name":"Int32.not_le","line":1555,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.not_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.not_le\"><span class=\"name\">Int32</span>.<span class=\"name\">not_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1554-L1554","name":"Int16.not_le","line":1554,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.not_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.not_le\"><span class=\"name\">Int16</span>.<span class=\"name\">not_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1553-L1553","name":"Int8.not_le","line":1553,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.not_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.not_le\"><span class=\"name\">Int8</span>.<span class=\"name\">not_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1550-L1551","name":"ISize.toNatClampNeg_eq_zero_iff","line":1550,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_eq_zero_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_eq_zero_iff\"><span class=\"name\">ISize</span>.<span class=\"name\">toNatClampNeg_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1548-L1549","name":"Int64.toNatClampNeg_eq_zero_iff","line":1548,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toNatClampNeg_eq_zero_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toNatClampNeg_eq_zero_iff\"><span class=\"name\">Int64</span>.<span class=\"name\">toNatClampNeg_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1546-L1547","name":"Int32.toNatClampNeg_eq_zero_iff","line":1546,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_eq_zero_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_eq_zero_iff\"><span class=\"name\">Int32</span>.<span class=\"name\">toNatClampNeg_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1544-L1545","name":"Int16.toNatClampNeg_eq_zero_iff","line":1544,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_eq_zero_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_eq_zero_iff\"><span class=\"name\">Int16</span>.<span class=\"name\">toNatClampNeg_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1542-L1543","name":"Int8.toNatClampNeg_eq_zero_iff","line":1542,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_eq_zero_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_eq_zero_iff\"><span class=\"name\">Int8</span>.<span class=\"name\">toNatClampNeg_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1540-L1540","name":"ISize.toInt_neg","line":1540,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_neg\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">n</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>).<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1538-L1538","name":"Int64.toInt_neg","line":1538,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_neg\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">n</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>).<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">64</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1537-L1537","name":"Int32.toInt_neg","line":1537,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_neg\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">n</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>).<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1536-L1536","name":"Int16.toInt_neg","line":1536,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_neg\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">n</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>).<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">16</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1535-L1535","name":"Int8.toInt_neg","line":1535,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_neg\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">n</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>).<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1531-L1533","name":"ISize.ofIntTruncate_bitVecToInt","line":1531,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofIntTruncate_bitVecToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofIntTruncate_bitVecToInt\"><span class=\"name\">ISize</span>.<span class=\"name\">ofIntTruncate_bitVecToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1529-L1530","name":"Int64.ofIntTruncate_bitVecToInt","line":1529,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofIntTruncate_bitVecToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofIntTruncate_bitVecToInt\"><span class=\"name\">Int64</span>.<span class=\"name\">ofIntTruncate_bitVecToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1527-L1528","name":"Int32.ofIntTruncate_bitVecToInt","line":1527,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofIntTruncate_bitVecToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofIntTruncate_bitVecToInt\"><span class=\"name\">Int32</span>.<span class=\"name\">ofIntTruncate_bitVecToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1525-L1526","name":"Int16.ofIntTruncate_bitVecToInt","line":1525,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofIntTruncate_bitVecToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofIntTruncate_bitVecToInt\"><span class=\"name\">Int16</span>.<span class=\"name\">ofIntTruncate_bitVecToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1523-L1524","name":"Int8.ofIntTruncate_bitVecToInt","line":1523,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofIntTruncate_bitVecToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofIntTruncate_bitVecToInt\"><span class=\"name\">Int8</span>.<span class=\"name\">ofIntTruncate_bitVecToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1520-L1521","name":"ISize.ofInt_bitVecToInt","line":1520,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofInt_bitVecToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofInt_bitVecToInt\"><span class=\"name\">ISize</span>.<span class=\"name\">ofInt_bitVecToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1518-L1519","name":"Int64.ofInt_bitVecToInt","line":1518,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofInt_bitVecToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofInt_bitVecToInt\"><span class=\"name\">Int64</span>.<span class=\"name\">ofInt_bitVecToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1516-L1517","name":"Int32.ofInt_bitVecToInt","line":1516,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofInt_bitVecToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofInt_bitVecToInt\"><span class=\"name\">Int32</span>.<span class=\"name\">ofInt_bitVecToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1514-L1515","name":"Int16.ofInt_bitVecToInt","line":1514,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofInt_bitVecToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofInt_bitVecToInt\"><span class=\"name\">Int16</span>.<span class=\"name\">ofInt_bitVecToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1512-L1513","name":"Int8.ofInt_bitVecToInt","line":1512,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofInt_bitVecToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofInt_bitVecToInt\"><span class=\"name\">Int8</span>.<span class=\"name\">ofInt_bitVecToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1509-L1510","name":"ISize.ofNat_bitVecToNat","line":1509,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofNat_bitVecToNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofNat_bitVecToNat\"><span class=\"name\">ISize</span>.<span class=\"name\">ofNat_bitVecToNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1507-L1508","name":"Int64.ofNat_bitVecToNat","line":1507,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofNat_bitVecToNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofNat_bitVecToNat\"><span class=\"name\">Int64</span>.<span class=\"name\">ofNat_bitVecToNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1505-L1506","name":"Int32.ofNat_bitVecToNat","line":1505,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofNat_bitVecToNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofNat_bitVecToNat\"><span class=\"name\">Int32</span>.<span class=\"name\">ofNat_bitVecToNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1503-L1504","name":"Int16.ofNat_bitVecToNat","line":1503,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofNat_bitVecToNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofNat_bitVecToNat\"><span class=\"name\">Int16</span>.<span class=\"name\">ofNat_bitVecToNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1501-L1502","name":"Int8.ofNat_bitVecToNat","line":1501,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofNat_bitVecToNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofNat_bitVecToNat\"><span class=\"name\">Int8</span>.<span class=\"name\">ofNat_bitVecToNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1499-L1499","name":"ISize.ofBitVec_ofInt","line":1499,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_ofInt\"><span class=\"name\">ISize</span>.<span class=\"name\">ofBitVec_ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofInt\">BitVec.ofInt</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1498-L1498","name":"Int64.ofBitVec_ofInt","line":1498,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_ofInt\"><span class=\"name\">Int64</span>.<span class=\"name\">ofBitVec_ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofInt\">BitVec.ofInt</a> <span class=\"fn\">64</span> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1497-L1497","name":"Int32.ofBitVec_ofInt","line":1497,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_ofInt\"><span class=\"name\">Int32</span>.<span class=\"name\">ofBitVec_ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofInt\">BitVec.ofInt</a> <span class=\"fn\">32</span> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1496-L1496","name":"Int16.ofBitVec_ofInt","line":1496,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_ofInt\"><span class=\"name\">Int16</span>.<span class=\"name\">ofBitVec_ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofInt\">BitVec.ofInt</a> <span class=\"fn\">16</span> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1495-L1495","name":"Int8.ofBitVec_ofInt","line":1495,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_ofInt\"><span class=\"name\">Int8</span>.<span class=\"name\">ofBitVec_ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofInt\">BitVec.ofInt</a> <span class=\"fn\">8</span> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1493-L1493","name":"ISize.ofBitVec_ofNat","line":1493,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_ofNat\"><span class=\"name\">ISize</span>.<span class=\"name\">ofBitVec_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1492-L1492","name":"Int64.ofBitVec_ofNat","line":1492,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_ofNat\"><span class=\"name\">Int64</span>.<span class=\"name\">ofBitVec_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">64</span> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1491-L1491","name":"Int32.ofBitVec_ofNat","line":1491,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_ofNat\"><span class=\"name\">Int32</span>.<span class=\"name\">ofBitVec_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">32</span> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1490-L1490","name":"Int16.ofBitVec_ofNat","line":1490,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_ofNat\"><span class=\"name\">Int16</span>.<span class=\"name\">ofBitVec_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">16</span> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1489-L1489","name":"Int8.ofBitVec_ofNat","line":1489,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_ofNat\"><span class=\"name\">Int8</span>.<span class=\"name\">ofBitVec_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">8</span> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1486-L1487","name":"ISize.ofBitVec_ofNatLT","line":1486,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_ofNatLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_ofNatLT\"><span class=\"name\">ISize</span>.<span class=\"name\">ofBitVec_ofNatLT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">n</span><a href=\"./Init/Prelude.html#BitVec.ofNatLT\">#'</a><span class=\"fn\">hn</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1484-L1485","name":"Int64.ofBitVec_ofNatLT","line":1484,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_ofNatLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_ofNatLT\"><span class=\"name\">Int64</span>.<span class=\"name\">ofBitVec_ofNatLT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">64</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">n</span><a href=\"./Init/Prelude.html#BitVec.ofNatLT\">#'</a><span class=\"fn\">hn</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1482-L1483","name":"Int32.ofBitVec_ofNatLT","line":1482,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_ofNatLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_ofNatLT\"><span class=\"name\">Int32</span>.<span class=\"name\">ofBitVec_ofNatLT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">n</span><a href=\"./Init/Prelude.html#BitVec.ofNatLT\">#'</a><span class=\"fn\">hn</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1480-L1481","name":"Int16.ofBitVec_ofNatLT","line":1480,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_ofNatLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_ofNatLT\"><span class=\"name\">Int16</span>.<span class=\"name\">ofBitVec_ofNatLT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">n</span><a href=\"./Init/Prelude.html#BitVec.ofNatLT\">#'</a><span class=\"fn\">hn</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1478-L1479","name":"Int8.ofBitVec_ofNatLT","line":1478,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_ofNatLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_ofNatLT\"><span class=\"name\">Int8</span>.<span class=\"name\">ofBitVec_ofNatLT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">n</span><a href=\"./Init/Prelude.html#BitVec.ofNatLT\">#'</a><span class=\"fn\">hn</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1473-L1476","name":"ISize.ofIntLE_bitVecToInt","line":1473,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofIntLE_bitVecToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofIntLE_bitVecToInt\"><span class=\"name\">ISize</span>.<span class=\"name\">ofIntLE_bitVecToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1470-L1472","name":"Int64.ofIntLE_bitVecToInt","line":1470,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofIntLE_bitVecToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofIntLE_bitVecToInt\"><span class=\"name\">Int64</span>.<span class=\"name\">ofIntLE_bitVecToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1467-L1469","name":"Int32.ofIntLE_bitVecToInt","line":1467,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofIntLE_bitVecToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofIntLE_bitVecToInt\"><span class=\"name\">Int32</span>.<span class=\"name\">ofIntLE_bitVecToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1464-L1466","name":"Int16.ofIntLE_bitVecToInt","line":1464,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofIntLE_bitVecToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofIntLE_bitVecToInt\"><span class=\"name\">Int16</span>.<span class=\"name\">ofIntLE_bitVecToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1461-L1463","name":"Int8.ofIntLE_bitVecToInt","line":1461,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofIntLE_bitVecToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofIntLE_bitVecToInt\"><span class=\"name\">Int8</span>.<span class=\"name\">ofIntLE_bitVecToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1457-L1459","name":"ISize.toInt64_ofNat","line":1457,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt64_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt64_ofNat\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt64_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">2147483647</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1451-L1455","name":"ISize.toInt64_ofNat'","line":1451,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt64_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt64_ofNat'\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt64_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">Int64.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1448-L1449","name":"ISize.toInt64_ofInt","line":1448,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt64_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt64_ofInt\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt64_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">Int64.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1446-L1446","name":"ISize.toInt64_ofBitVec","line":1446,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt64_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt64_ofBitVec\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt64_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">Int64.ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">64</span> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1441-L1444","name":"ISize.toInt64_ofIntLE","line":1441,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt64_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt64_ofIntLE\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt64_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">Int64.ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1438-L1439","name":"Int32.toISize_ofNat","line":1438,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toISize_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toISize_ofNat\"><span class=\"name\">Int32</span>.<span class=\"name\">toISize_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">2147483647</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1436-L1437","name":"Int32.toInt64_ofNat","line":1436,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt64_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt64_ofNat\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt64_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">2147483647</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1432-L1434","name":"Int32.toISize_ofNat'","line":1432,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toISize_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toISize_ofNat'\"><span class=\"name\">Int32</span>.<span class=\"name\">toISize_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ISize.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1429-L1431","name":"Int32.toInt64_ofNat'","line":1429,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt64_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt64_ofNat'\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt64_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">Int64.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1426-L1427","name":"Int32.toISize_ofInt","line":1426,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toISize_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toISize_ofInt\"><span class=\"name\">Int32</span>.<span class=\"name\">toISize_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ISize.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1424-L1425","name":"Int32.toInt64_ofInt","line":1424,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt64_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt64_ofInt\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt64_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">Int64.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1422-L1422","name":"Int32.toISize_ofBitVec","line":1422,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toISize_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toISize_ofBitVec\"><span class=\"name\">Int32</span>.<span class=\"name\">toISize_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ISize.ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1421-L1421","name":"Int32.toInt64_ofBitVec","line":1421,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt64_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt64_ofBitVec\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt64_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">Int64.ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">64</span> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1416-L1419","name":"Int32.toISize_ofIntLE","line":1416,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toISize_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toISize_ofIntLE\"><span class=\"name\">Int32</span>.<span class=\"name\">toISize_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ISize.ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1413-L1415","name":"Int32.toInt64_ofIntLE","line":1413,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt64_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt64_ofIntLE\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt64_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">Int64.ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1410-L1411","name":"Int16.toISize_ofNat","line":1410,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toISize_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toISize_ofNat\"><span class=\"name\">Int16</span>.<span class=\"name\">toISize_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">32767</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1408-L1409","name":"Int16.toInt64_ofNat","line":1408,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt64_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt64_ofNat\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt64_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">32767</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1406-L1407","name":"Int16.toInt32_ofNat","line":1406,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt32_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt32_ofNat\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt32_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">32767</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1402-L1404","name":"Int16.toISize_ofNat'","line":1402,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toISize_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toISize_ofNat'\"><span class=\"name\">Int16</span>.<span class=\"name\">toISize_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ISize.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1399-L1401","name":"Int16.toInt64_ofNat'","line":1399,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt64_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt64_ofNat'\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt64_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">Int64.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1396-L1398","name":"Int16.toInt32_ofNat'","line":1396,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt32_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt32_ofNat'\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt32_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">Int32.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1393-L1394","name":"Int16.toISize_ofInt","line":1393,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toISize_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toISize_ofInt\"><span class=\"name\">Int16</span>.<span class=\"name\">toISize_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ISize.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1391-L1392","name":"Int16.toInt64_ofInt","line":1391,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt64_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt64_ofInt\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt64_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">Int64.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1389-L1390","name":"Int16.toInt32_ofInt","line":1389,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt32_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt32_ofInt\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt32_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">Int32.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1387-L1387","name":"Int16.toISize_ofBitVec","line":1387,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toISize_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toISize_ofBitVec\"><span class=\"name\">Int16</span>.<span class=\"name\">toISize_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ISize.ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1386-L1386","name":"Int16.toInt64_ofBitVec","line":1386,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt64_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt64_ofBitVec\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt64_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">Int64.ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">64</span> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1385-L1385","name":"Int16.toInt32_ofBitVec","line":1385,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt32_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt32_ofBitVec\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt32_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">Int32.ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">32</span> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1380-L1383","name":"Int16.toISize_ofIntLE","line":1380,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toISize_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toISize_ofIntLE\"><span class=\"name\">Int16</span>.<span class=\"name\">toISize_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ISize.ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1377-L1379","name":"Int16.toInt64_ofIntLE","line":1377,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt64_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt64_ofIntLE\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt64_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">Int64.ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1374-L1376","name":"Int16.toInt32_ofIntLE","line":1374,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt32_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt32_ofIntLE\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt32_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">Int32.ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1371-L1372","name":"Int8.toISize_ofNat","line":1371,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toISize_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toISize_ofNat\"><span class=\"name\">Int8</span>.<span class=\"name\">toISize_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">127</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1369-L1370","name":"Int8.toInt64_ofNat","line":1369,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt64_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt64_ofNat\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt64_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">127</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1367-L1368","name":"Int8.toInt32_ofNat","line":1367,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt32_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt32_ofNat\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt32_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">127</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1365-L1366","name":"Int8.toInt16_ofNat","line":1365,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt16_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt16_ofNat\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt16_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">127</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1361-L1363","name":"Int8.toISize_ofNat'","line":1361,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toISize_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toISize_ofNat'\"><span class=\"name\">Int8</span>.<span class=\"name\">toISize_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ISize.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1358-L1360","name":"Int8.toInt64_ofNat'","line":1358,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt64_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt64_ofNat'\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt64_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">Int64.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1355-L1357","name":"Int8.toInt32_ofNat'","line":1355,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt32_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt32_ofNat'\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt32_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">Int32.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1352-L1354","name":"Int8.toInt16_ofNat'","line":1352,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt16_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt16_ofNat'\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt16_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">Int16.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1349-L1350","name":"Int8.toISize_ofInt","line":1349,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toISize_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toISize_ofInt\"><span class=\"name\">Int8</span>.<span class=\"name\">toISize_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ISize.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1347-L1348","name":"Int8.toInt64_ofInt","line":1347,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt64_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt64_ofInt\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt64_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">Int64.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1345-L1346","name":"Int8.toInt32_ofInt","line":1345,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt32_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt32_ofInt\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt32_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">Int32.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1343-L1344","name":"Int8.toInt16_ofInt","line":1343,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt16_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt16_ofInt\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt16_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">Int16.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1341-L1341","name":"Int8.toISize_ofBitVec","line":1341,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toISize_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toISize_ofBitVec\"><span class=\"name\">Int8</span>.<span class=\"name\">toISize_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ISize.ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1340-L1340","name":"Int8.toInt64_ofBitVec","line":1340,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt64_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt64_ofBitVec\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt64_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">Int64.ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">64</span> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1339-L1339","name":"Int8.toInt32_ofBitVec","line":1339,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt32_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt32_ofBitVec\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt32_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">Int32.ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">32</span> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1338-L1338","name":"Int8.toInt16_ofBitVec","line":1338,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt16_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt16_ofBitVec\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt16_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">Int16.ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">16</span> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1333-L1336","name":"Int8.toISize_ofIntLE","line":1333,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toISize_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toISize_ofIntLE\"><span class=\"name\">Int8</span>.<span class=\"name\">toISize_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ISize.ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1330-L1332","name":"Int8.toInt64_ofIntLE","line":1330,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt64_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt64_ofIntLE\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt64_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">Int64.ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1327-L1329","name":"Int8.toInt32_ofIntLE","line":1327,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt32_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt32_ofIntLE\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt32_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">Int32.ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1324-L1326","name":"Int8.toInt16_ofIntLE","line":1324,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt16_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt16_ofIntLE\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt16_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\">Int16.ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1320-L1322","name":"ISize.toInt64_neg_of_ne","line":1320,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt64_neg_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt64_neg_of_ne\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt64_neg_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1318-L1319","name":"Int32.toInt64_neg_of_ne","line":1318,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt64_neg_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt64_neg_of_ne\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt64_neg_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">2147483648</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1316-L1317","name":"Int16.toInt64_neg_of_ne","line":1316,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt64_neg_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt64_neg_of_ne\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt64_neg_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">32768</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1314-L1315","name":"Int8.toInt64_neg_of_ne","line":1314,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt64_neg_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt64_neg_of_ne\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt64_neg_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">128</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1311-L1312","name":"Int32.toISize_neg_of_ne","line":1311,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toISize_neg_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toISize_neg_of_ne\"><span class=\"name\">Int32</span>.<span class=\"name\">toISize_neg_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">2147483648</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1309-L1310","name":"Int16.toISize_neg_of_ne","line":1309,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toISize_neg_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toISize_neg_of_ne\"><span class=\"name\">Int16</span>.<span class=\"name\">toISize_neg_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">32768</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1307-L1308","name":"Int8.toISize_neg_of_ne","line":1307,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toISize_neg_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toISize_neg_of_ne\"><span class=\"name\">Int8</span>.<span class=\"name\">toISize_neg_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">128</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1304-L1305","name":"Int16.toInt32_neg_of_ne","line":1304,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt32_neg_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt32_neg_of_ne\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt32_neg_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">32768</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1302-L1303","name":"Int8.toInt32_neg_of_ne","line":1302,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt32_neg_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt32_neg_of_ne\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt32_neg_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">128</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1299-L1300","name":"Int8.toInt16_neg_of_ne","line":1299,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt16_neg_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt16_neg_of_ne\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt16_neg_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">-<span class=\"fn\">128</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1297-L1297","name":"Int64.toISize_neg","line":1297,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toISize_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toISize_neg\"><span class=\"name\">Int64</span>.<span class=\"name\">toISize_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1293-L1295","name":"ISize.toInt32_neg","line":1293,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt32_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt32_neg\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt32_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1292-L1292","name":"Int64.toInt32_neg","line":1292,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt32_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt32_neg\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt32_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1288-L1290","name":"ISize.toInt16_neg","line":1288,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt16_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt16_neg\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt16_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1287-L1287","name":"Int64.toInt16_neg","line":1287,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt16_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt16_neg\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt16_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1286-L1286","name":"Int32.toInt16_neg","line":1286,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt16_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt16_neg\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt16_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1282-L1284","name":"ISize.toInt8_neg","line":1282,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt8_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt8_neg\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt8_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1281-L1281","name":"Int64.toInt8_neg","line":1281,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt8_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt8_neg\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt8_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1280-L1280","name":"Int32.toInt8_neg","line":1280,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt8_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt8_neg\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt8_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1279-L1279","name":"Int16.toInt8_neg","line":1279,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt8_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt8_neg\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt8_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1275-L1277","name":"ISize.toBitVec_minValue","line":1275,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_minValue\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_minValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Lemmas.html#BitVec.intMin\">BitVec.intMin</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1274-L1274","name":"Int64.toBitVec_minValue","line":1274,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_minValue\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_minValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Lemmas.html#BitVec.intMin\">BitVec.intMin</a> <span class=\"fn\">64</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1273-L1273","name":"Int32.toBitVec_minValue","line":1273,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_minValue\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_minValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Lemmas.html#BitVec.intMin\">BitVec.intMin</a> <span class=\"fn\">32</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1272-L1272","name":"Int16.toBitVec_minValue","line":1272,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_minValue\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_minValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Lemmas.html#BitVec.intMin\">BitVec.intMin</a> <span class=\"fn\">16</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1271-L1271","name":"Int8.toBitVec_minValue","line":1271,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_minValue\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_minValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Lemmas.html#BitVec.intMin\">BitVec.intMin</a> <span class=\"fn\">8</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1267-L1269","name":"Int64.toISize_ofIntTruncate","line":1267,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toISize_ofIntTruncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toISize_ofIntTruncate\"><span class=\"name\">Int64</span>.<span class=\"name\">toISize_ofIntTruncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ISize.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1265-L1265","name":"Int64.toISize_ofNat","line":1265,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toISize_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toISize_ofNat\"><span class=\"name\">Int64</span>.<span class=\"name\">toISize_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1262-L1263","name":"Int64.toISize_ofInt","line":1262,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toISize_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toISize_ofInt\"><span class=\"name\">Int64</span>.<span class=\"name\">toISize_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ISize.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1259-L1260","name":"Int64.toISize_ofNat'","line":1259,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toISize_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toISize_ofNat'\"><span class=\"name\">Int64</span>.<span class=\"name\">toISize_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ISize.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1257-L1257","name":"Int64.toISize_ofBitVec","line":1257,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toISize_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toISize_ofBitVec\"><span class=\"name\">Int64</span>.<span class=\"name\">toISize_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ISize.ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1254-L1255","name":"Int64.toISize_ofIntLE","line":1254,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toISize_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toISize_ofIntLE\"><span class=\"name\">Int64</span>.<span class=\"name\">toISize_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ISize.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1247-L1252","name":"ISize.toInt32_ofIntTruncate","line":1247,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt32_ofIntTruncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt32_ofIntTruncate\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt32_ofIntTruncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>))</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">Int32.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1244-L1246","name":"Int64.toInt32_ofIntTruncate","line":1244,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt32_ofIntTruncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt32_ofIntTruncate\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt32_ofIntTruncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">Int32.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1242-L1242","name":"ISize.toInt32_ofNat","line":1242,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt32_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt32_ofNat\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt32_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1241-L1241","name":"Int64.toInt32_ofNat","line":1241,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt32_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt32_ofNat\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt32_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1236-L1239","name":"ISize.toInt32_ofInt","line":1236,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt32_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt32_ofInt\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt32_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">Int32.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1234-L1235","name":"Int64.toInt32_ofInt","line":1234,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt32_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt32_ofInt\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt32_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">Int32.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1228-L1232","name":"ISize.toInt32_ofNat'","line":1228,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt32_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt32_ofNat'\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt32_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">Int32.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1226-L1227","name":"Int64.toInt32_ofNat'","line":1226,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt32_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt32_ofNat'\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt32_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">Int32.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1224-L1224","name":"ISize.toInt32_ofBitVec","line":1224,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt32_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt32_ofBitVec\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt32_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">Int32.ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">32</span> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1223-L1223","name":"Int64.toInt32_ofBitVec","line":1223,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt32_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt32_ofBitVec\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt32_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">Int32.ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">32</span> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1221-L1221","name":"ISize.toInt32_ofIntLE","line":1221,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt32_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt32_ofIntLE\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt32_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">Int32.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1220-L1220","name":"Int64.toInt32_ofIntLE","line":1220,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt32_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt32_ofIntLE\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt32_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">Int32.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1213-L1218","name":"ISize.toInt16_ofIntTruncate","line":1213,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt16_ofIntTruncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt16_ofIntTruncate\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt16_ofIntTruncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>))</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">Int16.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1210-L1212","name":"Int64.toInt16_ofIntTruncate","line":1210,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt16_ofIntTruncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt16_ofIntTruncate\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt16_ofIntTruncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">Int16.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1207-L1209","name":"Int32.toInt16_ofIntTruncate","line":1207,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt16_ofIntTruncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt16_ofIntTruncate\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt16_ofIntTruncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">Int16.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1205-L1205","name":"ISize.toInt16_ofNat","line":1205,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt16_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt16_ofNat\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt16_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1204-L1204","name":"Int64.toInt16_ofNat","line":1204,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt16_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt16_ofNat\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt16_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1203-L1203","name":"Int32.toInt16_ofNat","line":1203,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt16_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt16_ofNat\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt16_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1198-L1201","name":"ISize.toInt16_ofInt","line":1198,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt16_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt16_ofInt\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt16_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">Int16.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1196-L1197","name":"Int64.toInt16_ofInt","line":1196,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt16_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt16_ofInt\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt16_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">Int16.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1194-L1195","name":"Int32.toInt16_ofInt","line":1194,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt16_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt16_ofInt\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt16_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">Int16.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1188-L1192","name":"ISize.toInt16_ofNat'","line":1188,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt16_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt16_ofNat'\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt16_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">Int16.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1186-L1187","name":"Int64.toInt16_ofNat'","line":1186,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt16_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt16_ofNat'\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt16_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">Int16.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1184-L1185","name":"Int32.toInt16_ofNat'","line":1184,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt16_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt16_ofNat'\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt16_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">Int16.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1182-L1182","name":"ISize.toInt16_ofBitVec","line":1182,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt16_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt16_ofBitVec\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt16_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">Int16.ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">16</span> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1181-L1181","name":"Int64.toInt16_ofBitVec","line":1181,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt16_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt16_ofBitVec\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt16_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">Int16.ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">16</span> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1180-L1180","name":"Int32.toInt16_ofBitVec","line":1180,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt16_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt16_ofBitVec\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt16_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">Int16.ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">16</span> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1178-L1178","name":"ISize.toInt16_ofIntLE","line":1178,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt16_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt16_ofIntLE\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt16_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">Int16.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1177-L1177","name":"Int64.toInt16_ofIntLE","line":1177,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt16_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt16_ofIntLE\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt16_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">Int16.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1176-L1176","name":"Int32.toInt16_ofIntLE","line":1176,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt16_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt16_ofIntLE\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt16_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">Int16.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1169-L1174","name":"ISize.toInt8_ofIntTruncate","line":1169,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt8_ofIntTruncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt8_ofIntTruncate\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt8_ofIntTruncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>))</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">Int8.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1166-L1168","name":"Int64.toInt8_ofIntTruncate","line":1166,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt8_ofIntTruncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt8_ofIntTruncate\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt8_ofIntTruncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">Int8.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1163-L1165","name":"Int32.toInt8_ofIntTruncate","line":1163,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt8_ofIntTruncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt8_ofIntTruncate\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt8_ofIntTruncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">Int8.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1160-L1162","name":"Int16.toInt8_ofIntTruncate","line":1160,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt8_ofIntTruncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt8_ofIntTruncate\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt8_ofIntTruncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">15</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">15</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">Int8.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1158-L1158","name":"ISize.toInt8_ofNat","line":1158,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt8_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt8_ofNat\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt8_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1157-L1157","name":"Int64.toInt8_ofNat","line":1157,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt8_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt8_ofNat\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt8_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1156-L1156","name":"Int32.toInt8_ofNat","line":1156,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt8_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt8_ofNat\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt8_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1155-L1155","name":"Int16.toInt8_ofNat","line":1155,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt8_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt8_ofNat\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt8_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1150-L1153","name":"ISize.toInt8_ofInt","line":1150,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt8_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt8_ofInt\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt8_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">Int8.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1148-L1149","name":"Int64.toInt8_ofInt","line":1148,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt8_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt8_ofInt\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt8_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">Int8.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1146-L1147","name":"Int32.toInt8_ofInt","line":1146,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt8_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt8_ofInt\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt8_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">Int8.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1144-L1145","name":"Int16.toInt8_ofInt","line":1144,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt8_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt8_ofInt\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt8_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">Int8.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1138-L1142","name":"ISize.toInt8_ofNat'","line":1138,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt8_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt8_ofNat'\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt8_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">Int8.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1136-L1137","name":"Int64.toInt8_ofNat'","line":1136,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt8_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt8_ofNat'\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt8_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">Int8.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1134-L1135","name":"Int32.toInt8_ofNat'","line":1134,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt8_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt8_ofNat'\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt8_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">Int8.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1132-L1133","name":"Int16.toInt8_ofNat'","line":1132,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt8_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt8_ofNat'\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt8_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">Int8.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1130-L1130","name":"ISize.toInt8_ofBitVec","line":1130,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt8_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt8_ofBitVec\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt8_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">Int8.ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">8</span> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1129-L1129","name":"Int64.toInt8_ofBitVec","line":1129,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt8_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt8_ofBitVec\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt8_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">Int8.ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">8</span> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1128-L1128","name":"Int32.toInt8_ofBitVec","line":1128,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt8_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt8_ofBitVec\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt8_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">Int8.ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">8</span> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1127-L1127","name":"Int16.toInt8_ofBitVec","line":1127,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt8_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt8_ofBitVec\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt8_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">Int8.ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">8</span> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1125-L1125","name":"ISize.toInt8_ofIntLE","line":1125,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt8_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt8_ofIntLE\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt8_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">Int8.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1124-L1124","name":"Int64.toInt8_ofIntLE","line":1124,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt8_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt8_ofIntLE\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt8_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">Int8.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1123-L1123","name":"Int32.toInt8_ofIntLE","line":1123,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt8_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt8_ofIntLE\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt8_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">Int8.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1122-L1122","name":"Int16.toInt8_ofIntLE","line":1122,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt8_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt8_ofIntLE\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt8_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">Int8.ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1120-L1120","name":"ISize.toUSize_ofNat","line":1120,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toUSize_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toUSize_ofNat\"><span class=\"name\">ISize</span>.<span class=\"name\">toUSize_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1119-L1119","name":"Int64.toUInt64_ofNat","line":1119,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toUInt64_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toUInt64_ofNat\"><span class=\"name\">Int64</span>.<span class=\"name\">toUInt64_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1118-L1118","name":"Int32.toUInt32_ofNat","line":1118,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toUInt32_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toUInt32_ofNat\"><span class=\"name\">Int32</span>.<span class=\"name\">toUInt32_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1117-L1117","name":"Int16.toUInt16_ofNat","line":1117,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toUInt16_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toUInt16_ofNat\"><span class=\"name\">Int16</span>.<span class=\"name\">toUInt16_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1116-L1116","name":"Int8.toUInt8_ofNat","line":1116,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toUInt8_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toUInt8_ofNat\"><span class=\"name\">Int8</span>.<span class=\"name\">toUInt8_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1114-L1114","name":"ISize.toUSize_ofNat'","line":1114,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toUSize_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toUSize_ofNat'\"><span class=\"name\">ISize</span>.<span class=\"name\">toUSize_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#USize.ofNat\">USize.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1113-L1113","name":"Int64.toUInt64_ofNat'","line":1113,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toUInt64_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toUInt64_ofNat'\"><span class=\"name\">Int64</span>.<span class=\"name\">toUInt64_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNat\">UInt64.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1112-L1112","name":"Int32.toUInt32_ofNat'","line":1112,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toUInt32_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toUInt32_ofNat'\"><span class=\"name\">Int32</span>.<span class=\"name\">toUInt32_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">UInt32.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1111-L1111","name":"Int16.toUInt16_ofNat'","line":1111,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toUInt16_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toUInt16_ofNat'\"><span class=\"name\">Int16</span>.<span class=\"name\">toUInt16_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt16.ofNat\">UInt16.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1110-L1110","name":"Int8.toUInt8_ofNat'","line":1110,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toUInt8_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toUInt8_ofNat'\"><span class=\"name\">Int8</span>.<span class=\"name\">toUInt8_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt8.ofNat\">UInt8.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1108-L1108","name":"ISize.toUSize_ofBitVec","line":1108,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toUSize_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toUSize_ofBitVec\"><span class=\"name\">ISize</span>.<span class=\"name\">toUSize_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1107-L1107","name":"Int64.toUInt64_ofBitVec","line":1107,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toUInt64_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toUInt64_ofBitVec\"><span class=\"name\">Int64</span>.<span class=\"name\">toUInt64_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1106-L1106","name":"Int32.toUInt32_ofBitVec","line":1106,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toUInt32_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toUInt32_ofBitVec\"><span class=\"name\">Int32</span>.<span class=\"name\">toUInt32_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1105-L1105","name":"Int16.toUInt16_ofBitVec","line":1105,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toUInt16_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toUInt16_ofBitVec\"><span class=\"name\">Int16</span>.<span class=\"name\">toUInt16_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1104-L1104","name":"Int8.toUInt8_ofBitVec","line":1104,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toUInt8_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toUInt8_ofBitVec\"><span class=\"name\">Int8</span>.<span class=\"name\">toUInt8_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1099-L1102","name":"ISize.toNatClampNeg_ofIntTruncate_of_lt","line":1099,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_ofIntTruncate_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_ofIntTruncate_of_lt\"><span class=\"name\">ISize</span>.<span class=\"name\">toNatClampNeg_ofIntTruncate_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1090-L1098","name":"ISize.toNatClampNeg_ofIntTruncate_of_lt_two_pow_numBits","line":1090,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_ofIntTruncate_of_lt_two_pow_numBits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_ofIntTruncate_of_lt_two_pow_numBits\"><span class=\"name\">ISize</span>.<span class=\"name\">toNatClampNeg_ofIntTruncate_of_lt_two_pow_numBits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>))</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1081-L1089","name":"Int64.toNatClampNeg_ofIntTruncate_of_lt","line":1081,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toNatClampNeg_ofIntTruncate_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toNatClampNeg_ofIntTruncate_of_lt\"><span class=\"name\">Int64</span>.<span class=\"name\">toNatClampNeg_ofIntTruncate_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1072-L1080","name":"Int32.toNatClampNeg_ofIntTruncate_of_lt","line":1072,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_ofIntTruncate_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_ofIntTruncate_of_lt\"><span class=\"name\">Int32</span>.<span class=\"name\">toNatClampNeg_ofIntTruncate_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1063-L1071","name":"Int16.toNatClampNeg_ofIntTruncate_of_lt","line":1063,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_ofIntTruncate_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_ofIntTruncate_of_lt\"><span class=\"name\">Int16</span>.<span class=\"name\">toNatClampNeg_ofIntTruncate_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">15</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1054-L1062","name":"Int8.toNatClampNeg_ofIntTruncate_of_lt","line":1054,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_ofIntTruncate_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_ofIntTruncate_of_lt\"><span class=\"name\">Int8</span>.<span class=\"name\">toNatClampNeg_ofIntTruncate_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">7</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1050-L1052","name":"ISize.toNatClampNeg_ofInt_of_two_pow_numBits","line":1050,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_ofInt_of_two_pow_numBits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_ofInt_of_two_pow_numBits\"><span class=\"name\">ISize</span>.<span class=\"name\">toNatClampNeg_ofInt_of_two_pow_numBits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>))</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1047-L1049","name":"ISize.toNatClampNeg_ofInt_of_le","line":1047,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_ofInt_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_ofInt_of_le\"><span class=\"name\">ISize</span>.<span class=\"name\">toNatClampNeg_ofInt_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1045-L1046","name":"Int64.toNatClampNeg_ofInt_of_le","line":1045,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toNatClampNeg_ofInt_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toNatClampNeg_ofInt_of_le\"><span class=\"name\">Int64</span>.<span class=\"name\">toNatClampNeg_ofInt_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1043-L1044","name":"Int32.toNatClampNeg_ofInt_of_le","line":1043,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_ofInt_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_ofInt_of_le\"><span class=\"name\">Int32</span>.<span class=\"name\">toNatClampNeg_ofInt_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1041-L1042","name":"Int16.toNatClampNeg_ofInt_of_le","line":1041,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_ofInt_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_ofInt_of_le\"><span class=\"name\">Int16</span>.<span class=\"name\">toNatClampNeg_ofInt_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">15</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">15</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1039-L1040","name":"Int8.toNatClampNeg_ofInt_of_le","line":1039,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_ofInt_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_ofInt_of_le\"><span class=\"name\">Int8</span>.<span class=\"name\">toNatClampNeg_ofInt_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">7</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">7</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1037-L1037","name":"ISize.toNatClampNeg_ofBitVec","line":1037,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_ofBitVec\"><span class=\"name\">ISize</span>.<span class=\"name\">toNatClampNeg_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1036-L1036","name":"Int64.toNatClampNeg_ofBitVec","line":1036,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toNatClampNeg_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toNatClampNeg_ofBitVec\"><span class=\"name\">Int64</span>.<span class=\"name\">toNatClampNeg_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1035-L1035","name":"Int32.toNatClampNeg_ofBitVec","line":1035,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_ofBitVec\"><span class=\"name\">Int32</span>.<span class=\"name\">toNatClampNeg_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1034-L1034","name":"Int16.toNatClampNeg_ofBitVec","line":1034,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_ofBitVec\"><span class=\"name\">Int16</span>.<span class=\"name\">toNatClampNeg_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1033-L1033","name":"Int8.toNatClampNeg_ofBitVec","line":1033,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_ofBitVec\"><span class=\"name\">Int8</span>.<span class=\"name\">toNatClampNeg_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1027-L1031","name":"ISize.toNatClampNeg_ofIntLE","line":1027,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_ofIntLE\"><span class=\"name\">ISize</span>.<span class=\"name\">toNatClampNeg_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1025-L1026","name":"Int64.toNatClampNeg_ofIntLE","line":1025,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toNatClampNeg_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toNatClampNeg_ofIntLE\"><span class=\"name\">Int64</span>.<span class=\"name\">toNatClampNeg_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1023-L1024","name":"Int32.toNatClampNeg_ofIntLE","line":1023,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_ofIntLE\"><span class=\"name\">Int32</span>.<span class=\"name\">toNatClampNeg_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1021-L1022","name":"Int16.toNatClampNeg_ofIntLE","line":1021,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_ofIntLE\"><span class=\"name\">Int16</span>.<span class=\"name\">toNatClampNeg_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1019-L1020","name":"Int8.toNatClampNeg_ofIntLE","line":1019,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_ofIntLE\"><span class=\"name\">Int8</span>.<span class=\"name\">toNatClampNeg_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1017-L1017","name":"ISize.toInt_ofBitVec","line":1017,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_ofBitVec\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1016-L1016","name":"Int64.toInt_ofBitVec","line":1016,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_ofBitVec\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1015-L1015","name":"Int32.toInt_ofBitVec","line":1015,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_ofBitVec\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1014-L1014","name":"Int16.toInt_ofBitVec","line":1014,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_ofBitVec\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1013-L1013","name":"Int8.toInt_ofBitVec","line":1013,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_ofBitVec\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1009-L1011","name":"ISize.toBitVec_ofIntTruncate","line":1009,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_ofIntTruncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_ofIntTruncate\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_ofIntTruncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofInt\">BitVec.ofInt</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1006-L1008","name":"Int64.toBitVec_ofIntTruncate","line":1006,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_ofIntTruncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_ofIntTruncate\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_ofIntTruncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofInt\">BitVec.ofInt</a> <span class=\"fn\">64</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1003-L1005","name":"Int32.toBitVec_ofIntTruncate","line":1003,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_ofIntTruncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_ofIntTruncate\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_ofIntTruncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofInt\">BitVec.ofInt</a> <span class=\"fn\">32</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L1000-L1002","name":"Int16.toBitVec_ofIntTruncate","line":1000,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_ofIntTruncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_ofIntTruncate\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_ofIntTruncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofInt\">BitVec.ofInt</a> <span class=\"fn\">16</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L997-L999","name":"Int8.toBitVec_ofIntTruncate","line":997,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_ofIntTruncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_ofIntTruncate\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_ofIntTruncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofInt\">BitVec.ofInt</a> <span class=\"fn\">8</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L995-L995","name":"ISize.toBitVec_ofBitVec","line":995,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_ofBitVec\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L994-L994","name":"Int64.toBitVec_ofBitVec","line":994,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_ofBitVec\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L993-L993","name":"Int32.toBitVec_ofBitVec","line":993,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_ofBitVec\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L992-L992","name":"Int16.toBitVec_ofBitVec","line":992,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_ofBitVec\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L991-L991","name":"Int8.toBitVec_ofBitVec","line":991,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_ofBitVec\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L989-L989","name":"USize.toISize_ofBitVec","line":989,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#USize.toISize_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#USize.toISize_ofBitVec\"><span class=\"name\">USize</span>.<span class=\"name\">toISize_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a>.<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ISize.ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L988-L988","name":"UInt64.toInt64_ofBitVec","line":988,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt64.toInt64_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt64.toInt64_ofBitVec\"><span class=\"name\">UInt64</span>.<span class=\"name\">toInt64_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a>.<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">Int64.ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L987-L987","name":"UInt32.toInt32_ofBitVec","line":987,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt32.toInt32_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt32.toInt32_ofBitVec\"><span class=\"name\">UInt32</span>.<span class=\"name\">toInt32_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a>.<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">Int32.ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L986-L986","name":"UInt16.toInt16_ofBitVec","line":986,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt16.toInt16_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt16.toInt16_ofBitVec\"><span class=\"name\">UInt16</span>.<span class=\"name\">toInt16_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a>.<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">Int16.ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L985-L985","name":"UInt8.toInt8_ofBitVec","line":985,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt8.toInt8_ofBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt8.toInt8_ofBitVec\"><span class=\"name\">UInt8</span>.<span class=\"name\">toInt8_ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a>.<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">Int8.ofBitVec</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L983-L983","name":"USize.toISize_ofNat","line":983,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#USize.toISize_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#USize.toISize_ofNat\"><span class=\"name\">USize</span>.<span class=\"name\">toISize_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L982-L982","name":"UInt64.toInt64_ofNat","line":982,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt64.toInt64_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt64.toInt64_ofNat\"><span class=\"name\">UInt64</span>.<span class=\"name\">toInt64_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L981-L981","name":"UInt32.toInt32_ofNat","line":981,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt32.toInt32_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt32.toInt32_ofNat\"><span class=\"name\">UInt32</span>.<span class=\"name\">toInt32_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L980-L980","name":"UInt16.toInt16_ofNat","line":980,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt16.toInt16_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt16.toInt16_ofNat\"><span class=\"name\">UInt16</span>.<span class=\"name\">toInt16_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L979-L979","name":"UInt8.toInt8_ofNat","line":979,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt8.toInt8_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt8.toInt8_ofNat\"><span class=\"name\">UInt8</span>.<span class=\"name\">toInt8_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L977-L977","name":"USize.toISize_ofNat'","line":977,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#USize.toISize_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#USize.toISize_ofNat'\"><span class=\"name\">USize</span>.<span class=\"name\">toISize_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/UInt/BasicAux.html#USize.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ISize.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L976-L976","name":"UInt64.toInt64_ofNat'","line":976,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt64.toInt64_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt64.toInt64_ofNat'\"><span class=\"name\">UInt64</span>.<span class=\"name\">toInt64_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">Int64.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L975-L975","name":"UInt32.toInt32_ofNat'","line":975,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt32.toInt32_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt32.toInt32_ofNat'\"><span class=\"name\">UInt32</span>.<span class=\"name\">toInt32_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">Int32.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L974-L974","name":"UInt16.toInt16_ofNat'","line":974,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt16.toInt16_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt16.toInt16_ofNat'\"><span class=\"name\">UInt16</span>.<span class=\"name\">toInt16_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">Int16.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L973-L973","name":"UInt8.toInt8_ofNat'","line":973,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt8.toInt8_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt8.toInt8_ofNat'\"><span class=\"name\">UInt8</span>.<span class=\"name\">toInt8_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">Int8.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L970-L971","name":"USize.toISize_ofNatLT","line":970,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#USize.toISize_ofNatLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#USize.toISize_ofNatLT\"><span class=\"name\">USize</span>.<span class=\"name\">toISize_ofNatLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#USize.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#USize.ofNatLT\">ofNatLT</a> <span class=\"fn\">n</span> <span class=\"fn\">hn</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ISize.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L968-L969","name":"UInt64.toInt64_ofNatLT","line":968,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt64.toInt64_ofNatLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt64.toInt64_ofNatLT\"><span class=\"name\">UInt64</span>.<span class=\"name\">toInt64_ofNatLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt64.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#UInt64.ofNatLT\">ofNatLT</a> <span class=\"fn\">n</span> <span class=\"fn\">hn</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">Int64.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L966-L967","name":"UInt32.toInt32_ofNatLT","line":966,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt32.toInt32_ofNatLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt32.toInt32_ofNatLT\"><span class=\"name\">UInt32</span>.<span class=\"name\">toInt32_ofNatLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#UInt32.ofNatLT\">ofNatLT</a> <span class=\"fn\">n</span> <span class=\"fn\">hn</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">Int32.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L964-L965","name":"UInt16.toInt16_ofNatLT","line":964,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt16.toInt16_ofNatLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt16.toInt16_ofNatLT\"><span class=\"name\">UInt16</span>.<span class=\"name\">toInt16_ofNatLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt16.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#UInt16.ofNatLT\">ofNatLT</a> <span class=\"fn\">n</span> <span class=\"fn\">hn</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">Int16.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L962-L963","name":"UInt8.toInt8_ofNatLT","line":962,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt8.toInt8_ofNatLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt8.toInt8_ofNatLT\"><span class=\"name\">UInt8</span>.<span class=\"name\">toInt8_ofNatLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt8.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#UInt8.ofNatLT\">ofNatLT</a> <span class=\"fn\">n</span> <span class=\"fn\">hn</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">Int8.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L959-L960","name":"ISize.toISize_toInt64","line":959,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toISize_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toISize_toInt64\"><span class=\"name\">ISize</span>.<span class=\"name\">toISize_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L956-L957","name":"ISize.toInt32_toInt64","line":956,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt32_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt32_toInt64\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt32_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L953-L954","name":"ISize.toInt16_toInt64","line":953,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt16_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt16_toInt64\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt16_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L951-L952","name":"ISize.toInt16_toInt32","line":951,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt16_toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt16_toInt32\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt16_toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L948-L949","name":"ISize.toInt8_toInt64","line":948,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt8_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt8_toInt64\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt8_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L946-L947","name":"ISize.toInt8_toInt32","line":946,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt8_toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt8_toInt32\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt8_toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L944-L945","name":"ISize.toInt8_toInt16","line":944,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt8_toInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt8_toInt16\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt8_toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L941-L942","name":"Int64.toInt32_toISize","line":941,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt32_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt32_toISize\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt32_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L938-L939","name":"Int64.toInt16_toISize","line":938,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt16_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt16_toISize\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt16_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L936-L937","name":"Int64.toInt16_toInt32","line":936,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt16_toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt16_toInt32\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt16_toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L933-L934","name":"Int64.toInt8_toISize","line":933,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt8_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt8_toISize\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt8_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L931-L932","name":"Int64.toInt8_toInt32","line":931,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt8_toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt8_toInt32\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt8_toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L929-L930","name":"Int64.toInt8_toInt16","line":929,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt8_toInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt8_toInt16\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt8_toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L926-L927","name":"Int32.toISize_toInt64","line":926,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toISize_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toISize_toInt64\"><span class=\"name\">Int32</span>.<span class=\"name\">toISize_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L923-L924","name":"Int32.toInt64_toISize","line":923,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt64_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt64_toISize\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt64_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L920-L921","name":"Int32.toInt32_toISize","line":920,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt32_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt32_toISize\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt32_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L918-L919","name":"Int32.toInt32_toInt64","line":918,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt32_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt32_toInt64\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt32_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L915-L916","name":"Int32.toInt16_toISize","line":915,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt16_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt16_toISize\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt16_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L913-L914","name":"Int32.toInt16_toInt64","line":913,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt16_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt16_toInt64\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt16_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L910-L911","name":"Int32.toInt8_toISize","line":910,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt8_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt8_toISize\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt8_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L908-L909","name":"Int32.toInt8_toInt64","line":908,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt8_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt8_toInt64\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt8_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L906-L907","name":"Int32.toInt8_toInt16","line":906,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt8_toInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt8_toInt16\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt8_toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L903-L904","name":"Int16.toISize_toInt64","line":903,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toISize_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toISize_toInt64\"><span class=\"name\">Int16</span>.<span class=\"name\">toISize_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L901-L902","name":"Int16.toISize_toInt32","line":901,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toISize_toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toISize_toInt32\"><span class=\"name\">Int16</span>.<span class=\"name\">toISize_toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L898-L899","name":"Int16.toInt64_toISize","line":898,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt64_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt64_toISize\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt64_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L896-L897","name":"Int16.toInt64_toInt32","line":896,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt64_toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt64_toInt32\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt64_toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L893-L894","name":"Int16.toInt32_toISize","line":893,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt32_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt32_toISize\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt32_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L891-L892","name":"Int16.toInt32_toInt64","line":891,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt32_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt32_toInt64\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt32_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L888-L889","name":"Int16.toInt16_toISize","line":888,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt16_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt16_toISize\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt16_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L886-L887","name":"Int16.toInt16_toInt64","line":886,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt16_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt16_toInt64\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt16_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L884-L885","name":"Int16.toInt16_toInt32","line":884,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt16_toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt16_toInt32\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt16_toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L881-L882","name":"Int16.toInt8_toISize","line":881,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt8_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt8_toISize\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt8_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L879-L880","name":"Int16.toInt8_toInt64","line":879,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt8_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt8_toInt64\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt8_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L877-L878","name":"Int16.toInt8_toInt32","line":877,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt8_toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt8_toInt32\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt8_toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L874-L875","name":"Int8.toISize_toInt64","line":874,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toISize_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toISize_toInt64\"><span class=\"name\">Int8</span>.<span class=\"name\">toISize_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L872-L873","name":"Int8.toISize_toInt32","line":872,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toISize_toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toISize_toInt32\"><span class=\"name\">Int8</span>.<span class=\"name\">toISize_toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L870-L871","name":"Int8.toISize_toInt16","line":870,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toISize_toInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toISize_toInt16\"><span class=\"name\">Int8</span>.<span class=\"name\">toISize_toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L867-L868","name":"Int8.toInt64_toISize","line":867,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt64_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt64_toISize\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt64_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L865-L866","name":"Int8.toInt64_toInt32","line":865,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt64_toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt64_toInt32\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt64_toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L863-L864","name":"Int8.toInt64_toInt16","line":863,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt64_toInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt64_toInt16\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt64_toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L860-L861","name":"Int8.toInt32_toISize","line":860,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt32_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt32_toISize\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt32_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L858-L859","name":"Int8.toInt32_toInt64","line":858,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt32_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt32_toInt64\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt32_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L856-L857","name":"Int8.toInt32_toInt16","line":856,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt32_toInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt32_toInt16\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt32_toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L853-L854","name":"Int8.toInt16_toISize","line":853,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt16_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt16_toISize\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt16_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L851-L852","name":"Int8.toInt16_toInt64","line":851,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt16_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt16_toInt64\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt16_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L849-L850","name":"Int8.toInt16_toInt32","line":849,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt16_toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt16_toInt32\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt16_toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L846-L847","name":"Int8.toInt8_toISize","line":846,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt8_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt8_toISize\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt8_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L844-L845","name":"Int8.toInt8_toInt64","line":844,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt8_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt8_toInt64\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt8_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L842-L843","name":"Int8.toInt8_toInt32","line":842,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt8_toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt8_toInt32\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt8_toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L840-L841","name":"Int8.toInt8_toInt16","line":840,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt8_toInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt8_toInt16\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt8_toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L836-L838","name":"ISize.ofNat_int32ToNatClampNeg","line":836,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofNat_int32ToNatClampNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofNat_int32ToNatClampNeg\"><span class=\"name\">ISize</span>.<span class=\"name\">ofNat_int32ToNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\">toNatClampNeg</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L833-L835","name":"Int64.ofNat_int32ToNatClampNeg","line":833,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofNat_int32ToNatClampNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofNat_int32ToNatClampNeg\"><span class=\"name\">Int64</span>.<span class=\"name\">ofNat_int32ToNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\">toNatClampNeg</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L829-L831","name":"ISize.ofNat_int16ToNatClampNeg","line":829,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofNat_int16ToNatClampNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofNat_int16ToNatClampNeg\"><span class=\"name\">ISize</span>.<span class=\"name\">ofNat_int16ToNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L826-L828","name":"Int64.ofNat_int16ToNatClampNeg","line":826,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofNat_int16ToNatClampNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofNat_int16ToNatClampNeg\"><span class=\"name\">Int64</span>.<span class=\"name\">ofNat_int16ToNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L823-L825","name":"Int32.ofNat_int16ToNatClampNeg","line":823,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofNat_int16ToNatClampNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofNat_int16ToNatClampNeg\"><span class=\"name\">Int32</span>.<span class=\"name\">ofNat_int16ToNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L819-L821","name":"ISize.ofNat_int8ToNatClampNeg","line":819,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofNat_int8ToNatClampNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofNat_int8ToNatClampNeg\"><span class=\"name\">ISize</span>.<span class=\"name\">ofNat_int8ToNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L816-L818","name":"Int64.ofNat_int8ToNatClampNeg","line":816,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofNat_int8ToNatClampNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofNat_int8ToNatClampNeg\"><span class=\"name\">Int64</span>.<span class=\"name\">ofNat_int8ToNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L813-L815","name":"Int32.ofNat_int8ToNatClampNeg","line":813,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofNat_int8ToNatClampNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofNat_int8ToNatClampNeg\"><span class=\"name\">Int32</span>.<span class=\"name\">ofNat_int8ToNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L810-L812","name":"Int16.ofNat_int8ToNatClampNeg","line":810,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofNat_int8ToNatClampNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofNat_int8ToNatClampNeg\"><span class=\"name\">Int16</span>.<span class=\"name\">ofNat_int8ToNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L806-L808","name":"ISize.ofNat_toNatClampNeg","line":806,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofNat_toNatClampNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofNat_toNatClampNeg\"><span class=\"name\">ISize</span>.<span class=\"name\">ofNat_toNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L804-L805","name":"Int64.ofNat_toNatClampNeg","line":804,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofNat_toNatClampNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofNat_toNatClampNeg\"><span class=\"name\">Int64</span>.<span class=\"name\">ofNat_toNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg\">toNatClampNeg</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L802-L803","name":"Int32.ofNat_toNatClampNeg","line":802,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofNat_toNatClampNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofNat_toNatClampNeg\"><span class=\"name\">Int32</span>.<span class=\"name\">ofNat_toNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\">toNatClampNeg</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L800-L801","name":"Int16.ofNat_toNatClampNeg","line":800,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofNat_toNatClampNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofNat_toNatClampNeg\"><span class=\"name\">Int16</span>.<span class=\"name\">ofNat_toNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L798-L799","name":"Int8.ofNat_toNatClampNeg","line":798,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofNat_toNatClampNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofNat_toNatClampNeg\"><span class=\"name\">Int8</span>.<span class=\"name\">ofNat_toNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L795-L796","name":"ISize.cast_toNatClampNeg","line":795,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.cast_toNatClampNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.cast_toNatClampNeg\"><span class=\"name\">ISize</span>.<span class=\"name\">cast_toNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L793-L794","name":"Int64.cast_toNatClampNeg","line":793,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.cast_toNatClampNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.cast_toNatClampNeg\"><span class=\"name\">Int64</span>.<span class=\"name\">cast_toNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg\">toNatClampNeg</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L791-L792","name":"Int32.cast_toNatClampNeg","line":791,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.cast_toNatClampNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.cast_toNatClampNeg\"><span class=\"name\">Int32</span>.<span class=\"name\">cast_toNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\">toNatClampNeg</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L789-L790","name":"Int16.cast_toNatClampNeg","line":789,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.cast_toNatClampNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.cast_toNatClampNeg\"><span class=\"name\">Int16</span>.<span class=\"name\">cast_toNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L787-L788","name":"Int8.cast_toNatClampNeg","line":787,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.cast_toNatClampNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.cast_toNatClampNeg\"><span class=\"name\">Int8</span>.<span class=\"name\">cast_toNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L785-L785","name":"ISize.lt_iff_toInt_lt","line":785,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.lt_iff_toInt_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.lt_iff_toInt_lt\"><span class=\"name\">ISize</span>.<span class=\"name\">lt_iff_toInt_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L784-L784","name":"Int64.lt_iff_toInt_lt","line":784,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.lt_iff_toInt_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.lt_iff_toInt_lt\"><span class=\"name\">Int64</span>.<span class=\"name\">lt_iff_toInt_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L783-L783","name":"Int32.lt_iff_toInt_lt","line":783,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.lt_iff_toInt_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.lt_iff_toInt_lt\"><span class=\"name\">Int32</span>.<span class=\"name\">lt_iff_toInt_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L782-L782","name":"Int16.lt_iff_toInt_lt","line":782,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.lt_iff_toInt_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.lt_iff_toInt_lt\"><span class=\"name\">Int16</span>.<span class=\"name\">lt_iff_toInt_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L781-L781","name":"Int8.lt_iff_toInt_lt","line":781,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.lt_iff_toInt_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.lt_iff_toInt_lt\"><span class=\"name\">Int8</span>.<span class=\"name\">lt_iff_toInt_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L779-L779","name":"ISize.le_iff_toInt_le","line":779,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.le_iff_toInt_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.le_iff_toInt_le\"><span class=\"name\">ISize</span>.<span class=\"name\">le_iff_toInt_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L778-L778","name":"Int64.le_iff_toInt_le","line":778,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.le_iff_toInt_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.le_iff_toInt_le\"><span class=\"name\">Int64</span>.<span class=\"name\">le_iff_toInt_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L777-L777","name":"Int32.le_iff_toInt_le","line":777,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.le_iff_toInt_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.le_iff_toInt_le\"><span class=\"name\">Int32</span>.<span class=\"name\">le_iff_toInt_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L776-L776","name":"Int16.le_iff_toInt_le","line":776,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.le_iff_toInt_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.le_iff_toInt_le\"><span class=\"name\">Int16</span>.<span class=\"name\">le_iff_toInt_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L775-L775","name":"Int8.le_iff_toInt_le","line":775,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.le_iff_toInt_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.le_iff_toInt_le\"><span class=\"name\">Int8</span>.<span class=\"name\">le_iff_toInt_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L769-L773","name":"Int64.ofIntTruncate_iSizeToInt","line":769,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofIntTruncate_iSizeToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofIntTruncate_iSizeToInt\"><span class=\"name\">Int64</span>.<span class=\"name\">ofIntTruncate_iSizeToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L763-L767","name":"ISize.ofIntTruncate_int32ToInt","line":763,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofIntTruncate_int32ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofIntTruncate_int32ToInt\"><span class=\"name\">ISize</span>.<span class=\"name\">ofIntTruncate_int32ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L758-L762","name":"Int64.ofIntTruncate_int32ToInt","line":758,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofIntTruncate_int32ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofIntTruncate_int32ToInt\"><span class=\"name\">Int64</span>.<span class=\"name\">ofIntTruncate_int32ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L752-L756","name":"ISize.ofIntTruncate_int16ToInt","line":752,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofIntTruncate_int16ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofIntTruncate_int16ToInt\"><span class=\"name\">ISize</span>.<span class=\"name\">ofIntTruncate_int16ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L747-L751","name":"Int64.ofIntTruncate_int16ToInt","line":747,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofIntTruncate_int16ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofIntTruncate_int16ToInt\"><span class=\"name\">Int64</span>.<span class=\"name\">ofIntTruncate_int16ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L742-L746","name":"Int32.ofIntTruncate_int16ToInt","line":742,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofIntTruncate_int16ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofIntTruncate_int16ToInt\"><span class=\"name\">Int32</span>.<span class=\"name\">ofIntTruncate_int16ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L736-L740","name":"ISize.ofIntTruncate_int8ToInt","line":736,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofIntTruncate_int8ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofIntTruncate_int8ToInt\"><span class=\"name\">ISize</span>.<span class=\"name\">ofIntTruncate_int8ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L731-L735","name":"Int64.ofIntTruncate_int8ToInt","line":731,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofIntTruncate_int8ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofIntTruncate_int8ToInt\"><span class=\"name\">Int64</span>.<span class=\"name\">ofIntTruncate_int8ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L726-L730","name":"Int32.ofIntTruncate_int8ToInt","line":726,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofIntTruncate_int8ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofIntTruncate_int8ToInt\"><span class=\"name\">Int32</span>.<span class=\"name\">ofIntTruncate_int8ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L721-L725","name":"Int16.ofIntTruncate_int8ToInt","line":721,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofIntTruncate_int8ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofIntTruncate_int8ToInt\"><span class=\"name\">Int16</span>.<span class=\"name\">ofIntTruncate_int8ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L718-L719","name":"ISize.ofIntTruncate_toInt","line":718,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofIntTruncate_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofIntTruncate_toInt\"><span class=\"name\">ISize</span>.<span class=\"name\">ofIntTruncate_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L716-L717","name":"Int64.ofIntTruncate_toInt","line":716,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofIntTruncate_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofIntTruncate_toInt\"><span class=\"name\">Int64</span>.<span class=\"name\">ofIntTruncate_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L714-L715","name":"Int32.ofIntTruncate_toInt","line":714,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofIntTruncate_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofIntTruncate_toInt\"><span class=\"name\">Int32</span>.<span class=\"name\">ofIntTruncate_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L712-L713","name":"Int16.ofIntTruncate_toInt","line":712,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofIntTruncate_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofIntTruncate_toInt\"><span class=\"name\">Int16</span>.<span class=\"name\">ofIntTruncate_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L710-L711","name":"Int8.ofIntTruncate_toInt","line":710,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofIntTruncate_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofIntTruncate_toInt\"><span class=\"name\">Int8</span>.<span class=\"name\">ofIntTruncate_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L706-L708","name":"ISize.toInt_ofIntTruncate","line":706,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_ofIntTruncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_ofIntTruncate\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_ofIntTruncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L703-L705","name":"Int64.toInt_ofIntTruncate","line":703,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_ofIntTruncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_ofIntTruncate\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_ofIntTruncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L700-L702","name":"Int32.toInt_ofIntTruncate","line":700,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_ofIntTruncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_ofIntTruncate\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_ofIntTruncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L697-L699","name":"Int16.toInt_ofIntTruncate","line":697,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_ofIntTruncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_ofIntTruncate\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_ofIntTruncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L694-L696","name":"Int8.toInt_ofIntTruncate","line":694,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_ofIntTruncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_ofIntTruncate\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_ofIntTruncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L692-L692","name":"ISize.ofIntLE_eq_ofInt","line":692,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofIntLE_eq_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofIntLE_eq_ofInt\"><span class=\"name\">ISize</span>.<span class=\"name\">ofIntLE_eq_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L691-L691","name":"Int64.ofIntLE_eq_ofInt","line":691,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofIntLE_eq_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofIntLE_eq_ofInt\"><span class=\"name\">Int64</span>.<span class=\"name\">ofIntLE_eq_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L690-L690","name":"Int32.ofIntLE_eq_ofInt","line":690,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofIntLE_eq_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofIntLE_eq_ofInt\"><span class=\"name\">Int32</span>.<span class=\"name\">ofIntLE_eq_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L689-L689","name":"Int16.ofIntLE_eq_ofInt","line":689,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofIntLE_eq_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofIntLE_eq_ofInt\"><span class=\"name\">Int16</span>.<span class=\"name\">ofIntLE_eq_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L688-L688","name":"Int8.ofIntLE_eq_ofInt","line":688,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofIntLE_eq_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofIntLE_eq_ofInt\"><span class=\"name\">Int8</span>.<span class=\"name\">ofIntLE_eq_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\">ofIntLE</a> <span class=\"fn\">n</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L685-L686","name":"ISize.ofIntLE_eq_ofIntTruncate","line":685,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofIntLE_eq_ofIntTruncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofIntLE_eq_ofIntTruncate\"><span class=\"name\">ISize</span>.<span class=\"name\">ofIntLE_eq_ofIntTruncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₂</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ofIntLE</a> <span class=\"fn\">x</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L683-L684","name":"Int64.ofIntLE_eq_ofIntTruncate","line":683,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofIntLE_eq_ofIntTruncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofIntLE_eq_ofIntTruncate\"><span class=\"name\">Int64</span>.<span class=\"name\">ofIntLE_eq_ofIntTruncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₂</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">ofIntLE</a> <span class=\"fn\">x</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L681-L682","name":"Int32.ofIntLE_eq_ofIntTruncate","line":681,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofIntLE_eq_ofIntTruncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofIntLE_eq_ofIntTruncate\"><span class=\"name\">Int32</span>.<span class=\"name\">ofIntLE_eq_ofIntTruncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₂</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">ofIntLE</a> <span class=\"fn\">x</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L679-L680","name":"Int16.ofIntLE_eq_ofIntTruncate","line":679,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofIntLE_eq_ofIntTruncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofIntLE_eq_ofIntTruncate\"><span class=\"name\">Int16</span>.<span class=\"name\">ofIntLE_eq_ofIntTruncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₂</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\">ofIntLE</a> <span class=\"fn\">x</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L677-L678","name":"Int8.ofIntLE_eq_ofIntTruncate","line":677,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofIntLE_eq_ofIntTruncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofIntLE_eq_ofIntTruncate\"><span class=\"name\">Int8</span>.<span class=\"name\">ofIntLE_eq_ofIntTruncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₂</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\">ofIntLE</a> <span class=\"fn\">x</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntTruncate\">ofIntTruncate</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L671-L675","name":"ISize.toInt_ofIntLE","line":671,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_ofIntLE\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₂</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ofIntLE</a> <span class=\"fn\">x</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L669-L670","name":"Int64.toInt_ofIntLE","line":669,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_ofIntLE\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₂</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">ofIntLE</a> <span class=\"fn\">x</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L667-L668","name":"Int32.toInt_ofIntLE","line":667,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_ofIntLE\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₂</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">ofIntLE</a> <span class=\"fn\">x</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L665-L666","name":"Int16.toInt_ofIntLE","line":665,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_ofIntLE\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₂</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\">ofIntLE</a> <span class=\"fn\">x</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L663-L664","name":"Int8.toInt_ofIntLE","line":663,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_ofIntLE\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_ofIntLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₂</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\">ofIntLE</a> <span class=\"fn\">x</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L661-L661","name":"ISize.ofInt_int64ToInt","line":661,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofInt_int64ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofInt_int64ToInt\"><span class=\"name\">ISize</span>.<span class=\"name\">ofInt_int64ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L660-L660","name":"ISize.ofInt_int32ToInt","line":660,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofInt_int32ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofInt_int32ToInt\"><span class=\"name\">ISize</span>.<span class=\"name\">ofInt_int32ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L659-L659","name":"ISize.ofInt_int16ToInt","line":659,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofInt_int16ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofInt_int16ToInt\"><span class=\"name\">ISize</span>.<span class=\"name\">ofInt_int16ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L658-L658","name":"ISize.ofInt_int8ToInt","line":658,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofInt_int8ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofInt_int8ToInt\"><span class=\"name\">ISize</span>.<span class=\"name\">ofInt_int8ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L656-L656","name":"Int64.ofInt_iSizeToInt","line":656,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofInt_iSizeToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofInt_iSizeToInt\"><span class=\"name\">Int64</span>.<span class=\"name\">ofInt_iSizeToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L655-L655","name":"Int64.ofInt_int32ToInt","line":655,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofInt_int32ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofInt_int32ToInt\"><span class=\"name\">Int64</span>.<span class=\"name\">ofInt_int32ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L654-L654","name":"Int64.ofInt_int16ToInt","line":654,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofInt_int16ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofInt_int16ToInt\"><span class=\"name\">Int64</span>.<span class=\"name\">ofInt_int16ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L653-L653","name":"Int64.ofInt_int8ToInt","line":653,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofInt_int8ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofInt_int8ToInt\"><span class=\"name\">Int64</span>.<span class=\"name\">ofInt_int8ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L651-L651","name":"Int32.ofInt_iSizeToInt","line":651,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofInt_iSizeToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofInt_iSizeToInt\"><span class=\"name\">Int32</span>.<span class=\"name\">ofInt_iSizeToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L650-L650","name":"Int32.ofInt_int64ToInt","line":650,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofInt_int64ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofInt_int64ToInt\"><span class=\"name\">Int32</span>.<span class=\"name\">ofInt_int64ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L649-L649","name":"Int32.ofInt_int16ToInt","line":649,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofInt_int16ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofInt_int16ToInt\"><span class=\"name\">Int32</span>.<span class=\"name\">ofInt_int16ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L648-L648","name":"Int32.ofInt_int8ToInt","line":648,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofInt_int8ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofInt_int8ToInt\"><span class=\"name\">Int32</span>.<span class=\"name\">ofInt_int8ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L646-L646","name":"Int16.ofInt_iSizeToInt","line":646,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofInt_iSizeToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofInt_iSizeToInt\"><span class=\"name\">Int16</span>.<span class=\"name\">ofInt_iSizeToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L645-L645","name":"Int16.ofInt_int64ToInt","line":645,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofInt_int64ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofInt_int64ToInt\"><span class=\"name\">Int16</span>.<span class=\"name\">ofInt_int64ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L644-L644","name":"Int16.ofInt_int32ToInt","line":644,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofInt_int32ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofInt_int32ToInt\"><span class=\"name\">Int16</span>.<span class=\"name\">ofInt_int32ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L643-L643","name":"Int16.ofInt_int8ToInt","line":643,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofInt_int8ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofInt_int8ToInt\"><span class=\"name\">Int16</span>.<span class=\"name\">ofInt_int8ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L641-L641","name":"Int8.ofInt_iSizeToInt","line":641,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofInt_iSizeToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofInt_iSizeToInt\"><span class=\"name\">Int8</span>.<span class=\"name\">ofInt_iSizeToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L640-L640","name":"Int8.ofInt_int64ToInt","line":640,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofInt_int64ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofInt_int64ToInt\"><span class=\"name\">Int8</span>.<span class=\"name\">ofInt_int64ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L639-L639","name":"Int8.ofInt_int32ToInt","line":639,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofInt_int32ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofInt_int32ToInt\"><span class=\"name\">Int8</span>.<span class=\"name\">ofInt_int32ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L638-L638","name":"Int8.ofInt_int16ToInt","line":638,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofInt_int16ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofInt_int16ToInt\"><span class=\"name\">Int8</span>.<span class=\"name\">ofInt_int16ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L636-L636","name":"ISize.ofInt_toInt","line":636,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofInt_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofInt_toInt\"><span class=\"name\">ISize</span>.<span class=\"name\">ofInt_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L635-L635","name":"Int64.ofInt_toInt","line":635,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofInt_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofInt_toInt\"><span class=\"name\">Int64</span>.<span class=\"name\">ofInt_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L634-L634","name":"Int32.ofInt_toInt","line":634,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofInt_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofInt_toInt\"><span class=\"name\">Int32</span>.<span class=\"name\">ofInt_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L633-L633","name":"Int16.ofInt_toInt","line":633,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofInt_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofInt_toInt\"><span class=\"name\">Int16</span>.<span class=\"name\">ofInt_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L632-L632","name":"Int8.ofInt_toInt","line":632,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofInt_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofInt_toInt\"><span class=\"name\">Int8</span>.<span class=\"name\">ofInt_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L630-L630","name":"ISize.ofIntLE_int64ToInt","line":630,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofIntLE_int64ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofIntLE_int64ToInt\"><span class=\"name\">ISize</span>.<span class=\"name\">ofIntLE_int64ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L628-L629","name":"ISize.ofIntLE_int32ToInt","line":628,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofIntLE_int32ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofIntLE_int32ToInt\"><span class=\"name\">ISize</span>.<span class=\"name\">ofIntLE_int32ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L626-L627","name":"ISize.ofIntLE_int16ToInt","line":626,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofIntLE_int16ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofIntLE_int16ToInt\"><span class=\"name\">ISize</span>.<span class=\"name\">ofIntLE_int16ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L624-L625","name":"ISize.ofIntLE_int8ToInt","line":624,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofIntLE_int8ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofIntLE_int8ToInt\"><span class=\"name\">ISize</span>.<span class=\"name\">ofIntLE_int8ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L621-L622","name":"Int64.ofIntLE_iSizeToInt","line":621,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofIntLE_iSizeToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofIntLE_iSizeToInt\"><span class=\"name\">Int64</span>.<span class=\"name\">ofIntLE_iSizeToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L619-L620","name":"Int64.ofIntLE_int32ToInt","line":619,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofIntLE_int32ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofIntLE_int32ToInt\"><span class=\"name\">Int64</span>.<span class=\"name\">ofIntLE_int32ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L617-L618","name":"Int64.ofIntLE_int16ToInt","line":617,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofIntLE_int16ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofIntLE_int16ToInt\"><span class=\"name\">Int64</span>.<span class=\"name\">ofIntLE_int16ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L615-L616","name":"Int64.ofIntLE_int8ToInt","line":615,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofIntLE_int8ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofIntLE_int8ToInt\"><span class=\"name\">Int64</span>.<span class=\"name\">ofIntLE_int8ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L613-L613","name":"Int32.ofIntLE_iSizeToInt","line":613,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofIntLE_iSizeToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofIntLE_iSizeToInt\"><span class=\"name\">Int32</span>.<span class=\"name\">ofIntLE_iSizeToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L612-L612","name":"Int32.ofIntLE_int64ToInt","line":612,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofIntLE_int64ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofIntLE_int64ToInt\"><span class=\"name\">Int32</span>.<span class=\"name\">ofIntLE_int64ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L610-L611","name":"Int32.ofIntLE_int16ToInt","line":610,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofIntLE_int16ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofIntLE_int16ToInt\"><span class=\"name\">Int32</span>.<span class=\"name\">ofIntLE_int16ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L608-L609","name":"Int32.ofIntLE_int8ToInt","line":608,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofIntLE_int8ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofIntLE_int8ToInt\"><span class=\"name\">Int32</span>.<span class=\"name\">ofIntLE_int8ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L606-L606","name":"Int16.ofIntLE_iSizeToInt","line":606,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofIntLE_iSizeToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofIntLE_iSizeToInt\"><span class=\"name\">Int16</span>.<span class=\"name\">ofIntLE_iSizeToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L605-L605","name":"Int16.ofIntLE_int64ToInt","line":605,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofIntLE_int64ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofIntLE_int64ToInt\"><span class=\"name\">Int16</span>.<span class=\"name\">ofIntLE_int64ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L604-L604","name":"Int16.ofIntLE_int32ToInt","line":604,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofIntLE_int32ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofIntLE_int32ToInt\"><span class=\"name\">Int16</span>.<span class=\"name\">ofIntLE_int32ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L602-L603","name":"Int16.ofIntLE_int8ToInt","line":602,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofIntLE_int8ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofIntLE_int8ToInt\"><span class=\"name\">Int16</span>.<span class=\"name\">ofIntLE_int8ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L600-L600","name":"Int8.ofIntLE_iSizeToInt","line":600,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofIntLE_iSizeToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofIntLE_iSizeToInt\"><span class=\"name\">Int8</span>.<span class=\"name\">ofIntLE_iSizeToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L599-L599","name":"Int8.ofIntLE_int64ToInt","line":599,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofIntLE_int64ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofIntLE_int64ToInt\"><span class=\"name\">Int8</span>.<span class=\"name\">ofIntLE_int64ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L598-L598","name":"Int8.ofIntLE_int32ToInt","line":598,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofIntLE_int32ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofIntLE_int32ToInt\"><span class=\"name\">Int8</span>.<span class=\"name\">ofIntLE_int32ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L597-L597","name":"Int8.ofIntLE_int16ToInt","line":597,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofIntLE_int16ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofIntLE_int16ToInt\"><span class=\"name\">Int8</span>.<span class=\"name\">ofIntLE_int16ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L595-L595","name":"ISize.ofIntLE_toInt","line":595,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofIntLE_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofIntLE_toInt\"><span class=\"name\">ISize</span>.<span class=\"name\">ofIntLE_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L594-L594","name":"Int64.ofIntLE_toInt","line":594,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofIntLE_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofIntLE_toInt\"><span class=\"name\">Int64</span>.<span class=\"name\">ofIntLE_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L593-L593","name":"Int32.ofIntLE_toInt","line":593,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofIntLE_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofIntLE_toInt\"><span class=\"name\">Int32</span>.<span class=\"name\">ofIntLE_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L592-L592","name":"Int16.ofIntLE_toInt","line":592,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofIntLE_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofIntLE_toInt\"><span class=\"name\">Int16</span>.<span class=\"name\">ofIntLE_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L591-L591","name":"Int8.ofIntLE_toInt","line":591,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofIntLE_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofIntLE_toInt\"><span class=\"name\">Int8</span>.<span class=\"name\">ofIntLE_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\">ofIntLE</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L588-L589","name":"BitVec.ofInt_iSizeToInt","line":588,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#BitVec.ofInt_iSizeToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#BitVec.ofInt_iSizeToInt\"><span class=\"name\">BitVec</span>.<span class=\"name\">ofInt_iSizeToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofInt\">BitVec.ofInt</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L587-L587","name":"BitVec.ofInt_int64ToInt","line":587,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#BitVec.ofInt_int64ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#BitVec.ofInt_int64ToInt\"><span class=\"name\">BitVec</span>.<span class=\"name\">ofInt_int64ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofInt\">BitVec.ofInt</a> <span class=\"fn\">64</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L586-L586","name":"BitVec.ofInt_int32ToInt","line":586,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#BitVec.ofInt_int32ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#BitVec.ofInt_int32ToInt\"><span class=\"name\">BitVec</span>.<span class=\"name\">ofInt_int32ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofInt\">BitVec.ofInt</a> <span class=\"fn\">32</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L585-L585","name":"BitVec.ofInt_int16ToInt","line":585,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#BitVec.ofInt_int16ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#BitVec.ofInt_int16ToInt\"><span class=\"name\">BitVec</span>.<span class=\"name\">ofInt_int16ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofInt\">BitVec.ofInt</a> <span class=\"fn\">16</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L584-L584","name":"BitVec.ofInt_int8ToInt","line":584,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#BitVec.ofInt_int8ToInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#BitVec.ofInt_int8ToInt\"><span class=\"name\">BitVec</span>.<span class=\"name\">ofInt_int8ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofInt\">BitVec.ofInt</a> <span class=\"fn\">8</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L579-L582","name":"Int32.toInt_bmod_two_pow_numBits","line":579,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_bmod_two_pow_numBits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_bmod_two_pow_numBits\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_bmod_two_pow_numBits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L575-L578","name":"Int16.toInt_bmod_two_pow_numBits","line":575,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_bmod_two_pow_numBits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_bmod_two_pow_numBits\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_bmod_two_pow_numBits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L571-L574","name":"Int8.toInt_bmod_two_pow_numBits","line":571,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_bmod_two_pow_numBits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_bmod_two_pow_numBits\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_bmod_two_pow_numBits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L569-L570","name":"ISize.toInt_bmod_18446744073709551616","line":569,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_bmod_18446744073709551616","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_bmod_18446744073709551616\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_bmod_18446744073709551616</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <span class=\"fn\">18446744073709551616</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L567-L568","name":"Int32.toInt_bmod_18446744073709551616","line":567,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_bmod_18446744073709551616","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_bmod_18446744073709551616\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_bmod_18446744073709551616</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <span class=\"fn\">18446744073709551616</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L565-L566","name":"Int16.toInt_bmod_18446744073709551616","line":565,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_bmod_18446744073709551616","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_bmod_18446744073709551616\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_bmod_18446744073709551616</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <span class=\"fn\">18446744073709551616</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L563-L564","name":"Int8.toInt_bmod_18446744073709551616","line":563,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_bmod_18446744073709551616","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_bmod_18446744073709551616\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_bmod_18446744073709551616</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <span class=\"fn\">18446744073709551616</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L561-L562","name":"Int16.toInt_bmod_4294967296","line":561,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_bmod_4294967296","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_bmod_4294967296\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_bmod_4294967296</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <span class=\"fn\">4294967296</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L559-L560","name":"Int8.toInt_bmod_4294967296","line":559,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_bmod_4294967296","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_bmod_4294967296\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_bmod_4294967296</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <span class=\"fn\">4294967296</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L557-L558","name":"Int8.toInt_bmod_65536","line":557,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_bmod_65536","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_bmod_65536\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_bmod_65536</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <span class=\"fn\">65536</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L550-L555","name":"ISize.toInt_bmod_two_pow_numBits","line":550,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_bmod_two_pow_numBits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_bmod_two_pow_numBits\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_bmod_two_pow_numBits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L549-L549","name":"Int64.toInt_bmod","line":549,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_bmod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_bmod\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_bmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <span class=\"fn\">18446744073709551616</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L548-L548","name":"Int32.toInt_bmod","line":548,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_bmod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_bmod\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_bmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <span class=\"fn\">4294967296</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L547-L547","name":"Int16.toInt_bmod","line":547,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_bmod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_bmod\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_bmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <span class=\"fn\">65536</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L546-L546","name":"Int8.toInt_bmod","line":546,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_bmod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_bmod\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_bmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <span class=\"fn\">256</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L544-L544","name":"ISize.toBitVec_ofIntLE","line":544,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_ofIntLE\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_ofIntLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\">ofIntLE</a> <span class=\"fn\">x</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofInt\">BitVec.ofInt</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L543-L543","name":"Int64.toBitVec_ofIntLE","line":543,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_ofIntLE\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_ofIntLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\">ofIntLE</a> <span class=\"fn\">x</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofInt\">BitVec.ofInt</a> <span class=\"fn\">64</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L542-L542","name":"Int32.toBitVec_ofIntLE","line":542,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_ofIntLE\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_ofIntLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\">ofIntLE</a> <span class=\"fn\">x</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofInt\">BitVec.ofInt</a> <span class=\"fn\">32</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L541-L541","name":"Int16.toBitVec_ofIntLE","line":541,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_ofIntLE\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_ofIntLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\">ofIntLE</a> <span class=\"fn\">x</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofInt\">BitVec.ofInt</a> <span class=\"fn\">16</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L540-L540","name":"Int8.toBitVec_ofIntLE","line":540,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_ofIntLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_ofIntLE\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_ofIntLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\">ofIntLE</a> <span class=\"fn\">x</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofInt\">BitVec.ofInt</a> <span class=\"fn\">8</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L538-L538","name":"ISize.ofBitVec_int64ToBitVec","line":538,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_int64ToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_int64ToBitVec\"><span class=\"name\">ISize</span>.<span class=\"name\">ofBitVec_int64ToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L537-L537","name":"ISize.ofBitVec_int32ToBitVec","line":537,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_int32ToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_int32ToBitVec\"><span class=\"name\">ISize</span>.<span class=\"name\">ofBitVec_int32ToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L536-L536","name":"ISize.ofBitVec_int16ToBitVec","line":536,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_int16ToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_int16ToBitVec\"><span class=\"name\">ISize</span>.<span class=\"name\">ofBitVec_int16ToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L535-L535","name":"ISize.ofBitVec_int8ToBitVec","line":535,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_int8ToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_int8ToBitVec\"><span class=\"name\">ISize</span>.<span class=\"name\">ofBitVec_int8ToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L533-L533","name":"Int64.ofBitVec_iSizeToBitVec","line":533,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_iSizeToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_iSizeToBitVec\"><span class=\"name\">Int64</span>.<span class=\"name\">ofBitVec_iSizeToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">64</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L532-L532","name":"Int64.ofBitVec_int32ToBitVec","line":532,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_int32ToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_int32ToBitVec\"><span class=\"name\">Int64</span>.<span class=\"name\">ofBitVec_int32ToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">64</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L531-L531","name":"Int64.ofBitVec_int16ToBitVec","line":531,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_int16ToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_int16ToBitVec\"><span class=\"name\">Int64</span>.<span class=\"name\">ofBitVec_int16ToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">64</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L530-L530","name":"Int64.ofBitVec_int8ToBitVec","line":530,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_int8ToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_int8ToBitVec\"><span class=\"name\">Int64</span>.<span class=\"name\">ofBitVec_int8ToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">64</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L528-L528","name":"Int32.ofBitVec_iSizeToBitVec","line":528,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_iSizeToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_iSizeToBitVec\"><span class=\"name\">Int32</span>.<span class=\"name\">ofBitVec_iSizeToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">32</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L527-L527","name":"Int32.ofBitVec_int64ToBitVec","line":527,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_int64ToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_int64ToBitVec\"><span class=\"name\">Int32</span>.<span class=\"name\">ofBitVec_int64ToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">32</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L526-L526","name":"Int32.ofBitVec_int16ToBitVec","line":526,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_int16ToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_int16ToBitVec\"><span class=\"name\">Int32</span>.<span class=\"name\">ofBitVec_int16ToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">32</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L525-L525","name":"Int32.ofBitVec_int8ToBitVec","line":525,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_int8ToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_int8ToBitVec\"><span class=\"name\">Int32</span>.<span class=\"name\">ofBitVec_int8ToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">32</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L523-L523","name":"Int16.ofBitVec_iSizeToBitVec","line":523,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_iSizeToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_iSizeToBitVec\"><span class=\"name\">Int16</span>.<span class=\"name\">ofBitVec_iSizeToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">16</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L522-L522","name":"Int16.ofBitVec_int64ToBitVec","line":522,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_int64ToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_int64ToBitVec\"><span class=\"name\">Int16</span>.<span class=\"name\">ofBitVec_int64ToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">16</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L521-L521","name":"Int16.ofBitVec_int32ToBitVec","line":521,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_int32ToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_int32ToBitVec\"><span class=\"name\">Int16</span>.<span class=\"name\">ofBitVec_int32ToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">16</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L520-L520","name":"Int16.ofBitVec_int8ToBitVec","line":520,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_int8ToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_int8ToBitVec\"><span class=\"name\">Int16</span>.<span class=\"name\">ofBitVec_int8ToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">16</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L518-L518","name":"Int8.ofBitVec_iSizeToBitVec","line":518,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_iSizeToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_iSizeToBitVec\"><span class=\"name\">Int8</span>.<span class=\"name\">ofBitVec_iSizeToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">8</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L517-L517","name":"Int8.ofBitVec_int64ToBitVec","line":517,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_int64ToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_int64ToBitVec\"><span class=\"name\">Int8</span>.<span class=\"name\">ofBitVec_int64ToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">8</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L516-L516","name":"Int8.ofBitVec_int32ToBitVec","line":516,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_int32ToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_int32ToBitVec\"><span class=\"name\">Int8</span>.<span class=\"name\">ofBitVec_int32ToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">8</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L515-L515","name":"Int8.ofBitVec_int16ToBitVec","line":515,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_int16ToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_int16ToBitVec\"><span class=\"name\">Int8</span>.<span class=\"name\">ofBitVec_int16ToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">8</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L513-L513","name":"ISize.ofBitVec_toBitVec","line":513,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_toBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_toBitVec\"><span class=\"name\">ISize</span>.<span class=\"name\">ofBitVec_toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L512-L512","name":"Int64.ofBitVec_toBitVec","line":512,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_toBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_toBitVec\"><span class=\"name\">Int64</span>.<span class=\"name\">ofBitVec_toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L511-L511","name":"Int32.ofBitVec_toBitVec","line":511,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_toBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_toBitVec\"><span class=\"name\">Int32</span>.<span class=\"name\">ofBitVec_toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L510-L510","name":"Int16.ofBitVec_toBitVec","line":510,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_toBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_toBitVec\"><span class=\"name\">Int16</span>.<span class=\"name\">ofBitVec_toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L509-L509","name":"Int8.ofBitVec_toBitVec","line":509,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_toBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_toBitVec\"><span class=\"name\">Int8</span>.<span class=\"name\">ofBitVec_toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L507-L507","name":"USize.ofBitVec_iSizeToBitVec","line":507,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#USize.ofBitVec_iSizeToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#USize.ofBitVec_iSizeToBitVec\"><span class=\"name\">USize</span>.<span class=\"name\">ofBitVec_iSizeToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L506-L506","name":"UInt64.ofBitVec_int64ToBitVec","line":506,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt64.ofBitVec_int64ToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt64.ofBitVec_int64ToBitVec\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofBitVec_int64ToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L505-L505","name":"UInt32.ofBitVec_int32ToBitVec","line":505,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt32.ofBitVec_int32ToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt32.ofBitVec_int32ToBitVec\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofBitVec_int32ToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L504-L504","name":"UInt16.ofBitVec_int16ToBitVec","line":504,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt16.ofBitVec_int16ToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt16.ofBitVec_int16ToBitVec\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofBitVec_int16ToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L503-L503","name":"UInt8.ofBitVec_int8ToBitVec","line":503,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt8.ofBitVec_int8ToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt8.ofBitVec_int8ToBitVec\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofBitVec_int8ToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L501-L501","name":"ISize.toBitVec_toUSize","line":501,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_toUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_toUSize\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_toUSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span>.<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L500-L500","name":"Int64.toBitVec_toUInt64","line":500,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_toUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_toUInt64\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_toUInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span>.<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L499-L499","name":"Int32.toBitVec_toUInt32","line":499,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_toUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_toUInt32\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_toUInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span>.<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L498-L498","name":"Int16.toBitVec_toUInt16","line":498,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_toUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_toUInt16\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_toUInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span>.<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L497-L497","name":"Int8.toBitVec_toUInt8","line":497,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_toUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_toUInt8\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_toUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span>.<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L495-L495","name":"ISize.toFin_toBitVec","line":495,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toFin_toBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toFin_toBitVec\"><span class=\"name\">ISize</span>.<span class=\"name\">toFin_toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Prelude.html#BitVec.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toFin\">toFin</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L494-L494","name":"Int64.toFin_toBitVec","line":494,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toFin_toBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toFin_toBitVec\"><span class=\"name\">Int64</span>.<span class=\"name\">toFin_toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Prelude.html#BitVec.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toFin\">toFin</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L493-L493","name":"Int32.toFin_toBitVec","line":493,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toFin_toBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toFin_toBitVec\"><span class=\"name\">Int32</span>.<span class=\"name\">toFin_toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Prelude.html#BitVec.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toFin\">toFin</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L492-L492","name":"Int16.toFin_toBitVec","line":492,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toFin_toBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toFin_toBitVec\"><span class=\"name\">Int16</span>.<span class=\"name\">toFin_toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Prelude.html#BitVec.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toFin\">toFin</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L491-L491","name":"Int8.toFin_toBitVec","line":491,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toFin_toBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toFin_toBitVec\"><span class=\"name\">Int8</span>.<span class=\"name\">toFin_toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Prelude.html#BitVec.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toFin\">toFin</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L488-L489","name":"ISize.toNat_toUSize_of_le","line":488,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toNat_toUSize_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toNat_toUSize_of_le\"><span class=\"name\">ISize</span>.<span class=\"name\">toNat_toUSize_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L486-L487","name":"Int64.toNat_toUInt64_of_le","line":486,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toNat_toUInt64_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toNat_toUInt64_of_le\"><span class=\"name\">Int64</span>.<span class=\"name\">toNat_toUInt64_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L484-L485","name":"Int32.toNat_toUInt32_of_le","line":484,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toNat_toUInt32_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toNat_toUInt32_of_le\"><span class=\"name\">Int32</span>.<span class=\"name\">toNat_toUInt32_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span>.<a href=\"./Init/Prelude.html#UInt32.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L482-L483","name":"Int16.toNat_toUInt16_of_le","line":482,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toNat_toUInt16_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toNat_toUInt16_of_le\"><span class=\"name\">Int16</span>.<span class=\"name\">toNat_toUInt16_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L480-L481","name":"Int8.toNat_toUInt8_of_le","line":480,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toNat_toUInt8_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toNat_toUInt8_of_le\"><span class=\"name\">Int8</span>.<span class=\"name\">toNat_toUInt8_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L477-L478","name":"ISize.toNat_toBitVec_of_le","line":477,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toNat_toBitVec_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toNat_toBitVec_of_le\"><span class=\"name\">ISize</span>.<span class=\"name\">toNat_toBitVec_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L475-L476","name":"Int64.toNat_toBitVec_of_le","line":475,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toNat_toBitVec_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toNat_toBitVec_of_le\"><span class=\"name\">Int64</span>.<span class=\"name\">toNat_toBitVec_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L473-L474","name":"Int32.toNat_toBitVec_of_le","line":473,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toNat_toBitVec_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toNat_toBitVec_of_le\"><span class=\"name\">Int32</span>.<span class=\"name\">toNat_toBitVec_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L471-L472","name":"Int16.toNat_toBitVec_of_le","line":471,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toNat_toBitVec_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toNat_toBitVec_of_le\"><span class=\"name\">Int16</span>.<span class=\"name\">toNat_toBitVec_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L469-L470","name":"Int8.toNat_toBitVec_of_le","line":469,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toNat_toBitVec_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toNat_toBitVec_of_le\"><span class=\"name\">Int8</span>.<span class=\"name\">toNat_toBitVec_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L467-L467","name":"ISize.toNat_toBitVec","line":467,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toNat_toBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toNat_toBitVec\"><span class=\"name\">ISize</span>.<span class=\"name\">toNat_toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L466-L466","name":"Int64.toNat_toBitVec","line":466,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toNat_toBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toNat_toBitVec\"><span class=\"name\">Int64</span>.<span class=\"name\">toNat_toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toNat\">toNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L465-L465","name":"Int32.toNat_toBitVec","line":465,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toNat_toBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toNat_toBitVec\"><span class=\"name\">Int32</span>.<span class=\"name\">toNat_toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span>.<a href=\"./Init/Prelude.html#UInt32.toNat\">toNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L464-L464","name":"Int16.toNat_toBitVec","line":464,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toNat_toBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toNat_toBitVec\"><span class=\"name\">Int16</span>.<span class=\"name\">toNat_toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toNat\">toNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L463-L463","name":"Int8.toNat_toBitVec","line":463,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toNat_toBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toNat_toBitVec\"><span class=\"name\">Int8</span>.<span class=\"name\">toNat_toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toNat\">toNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L461-L461","name":"ISize.toISize_toUSize","line":461,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toISize_toUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toISize_toUSize\"><span class=\"name\">ISize</span>.<span class=\"name\">toISize_toUSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L460-L460","name":"Int64.toInt64_toUInt64","line":460,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt64_toUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt64_toUInt64\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt64_toUInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L459-L459","name":"Int32.toInt32_toUInt32","line":459,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt32_toUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt32_toUInt32\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt32_toUInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span>.<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L458-L458","name":"Int16.toInt16_toUInt16","line":458,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt16_toUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt16_toUInt16\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt16_toUInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span>.<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L457-L457","name":"Int8.toInt8_toUInt8","line":457,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt8_toUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt8_toUInt8\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt8_toUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span>.<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L454-L455","name":"ISize.toNatClampNeg_toInt64","line":454,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_toInt64\"><span class=\"name\">ISize</span>.<span class=\"name\">toNatClampNeg_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L451-L452","name":"Int32.toNatClampNeg_toISize","line":451,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_toISize\"><span class=\"name\">Int32</span>.<span class=\"name\">toNatClampNeg_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L449-L450","name":"Int32.toNatClampNeg_toInt64","line":449,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_toInt64\"><span class=\"name\">Int32</span>.<span class=\"name\">toNatClampNeg_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L446-L447","name":"Int16.toNatClampNeg_toISize","line":446,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_toISize\"><span class=\"name\">Int16</span>.<span class=\"name\">toNatClampNeg_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L444-L445","name":"Int16.toNatClampNeg_toInt64","line":444,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_toInt64\"><span class=\"name\">Int16</span>.<span class=\"name\">toNatClampNeg_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L442-L443","name":"Int16.toNatClampNeg_toInt32","line":442,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_toInt32\"><span class=\"name\">Int16</span>.<span class=\"name\">toNatClampNeg_toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L439-L440","name":"Int8.toNatClampNeg_toISize","line":439,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_toISize\"><span class=\"name\">Int8</span>.<span class=\"name\">toNatClampNeg_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L437-L438","name":"Int8.toNatClampNeg_toInt64","line":437,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_toInt64\"><span class=\"name\">Int8</span>.<span class=\"name\">toNatClampNeg_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L435-L436","name":"Int8.toNatClampNeg_toInt32","line":435,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_toInt32\"><span class=\"name\">Int8</span>.<span class=\"name\">toNatClampNeg_toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L433-L434","name":"Int8.toNatClampNeg_toInt16","line":433,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_toInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_toInt16\"><span class=\"name\">Int8</span>.<span class=\"name\">toNatClampNeg_toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L430-L431","name":"ISize.toInt_toInt64","line":430,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_toInt64\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L428-L429","name":"ISize.toInt_toInt32","line":428,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_toInt32\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L426-L427","name":"ISize.toInt_toInt16","line":426,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_toInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_toInt16\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">16</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L424-L425","name":"ISize.toInt_toInt8","line":424,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_toInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_toInt8\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_toInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L421-L422","name":"Int64.toInt_toISize","line":421,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_toISize\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L419-L420","name":"Int64.toInt_toInt32","line":419,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_toInt32\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L417-L418","name":"Int64.toInt_toInt16","line":417,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_toInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_toInt16\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">16</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L415-L416","name":"Int64.toInt_toInt8","line":415,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_toInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_toInt8\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_toInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L412-L413","name":"Int32.toInt_toISize","line":412,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_toISize\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L410-L411","name":"Int32.toInt_toInt64","line":410,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_toInt64\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L408-L409","name":"Int32.toInt_toInt16","line":408,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_toInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_toInt16\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">16</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L406-L407","name":"Int32.toInt_toInt8","line":406,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_toInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_toInt8\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_toInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L403-L404","name":"Int16.toInt_toISize","line":403,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_toISize\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L401-L402","name":"Int16.toInt_toInt64","line":401,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_toInt64\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L399-L400","name":"Int16.toInt_toInt32","line":399,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_toInt32\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L397-L398","name":"Int16.toInt_toInt8","line":397,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_toInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_toInt8\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_toInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L394-L395","name":"Int8.toInt_toISize","line":394,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_toISize\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L392-L393","name":"Int8.toInt_toInt64","line":392,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_toInt64\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L390-L391","name":"Int8.toInt_toInt32","line":390,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_toInt32\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L388-L389","name":"Int8.toInt_toInt16","line":388,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_toInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_toInt16\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L386-L386","name":"ISize.toNatClampNeg_lt","line":386,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_lt\"><span class=\"name\">ISize</span>.<span class=\"name\">toNatClampNeg_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L382-L385","name":"ISize.toNatClampNeg_lt_two_pow_numBits","line":382,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_lt_two_pow_numBits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_lt_two_pow_numBits\"><span class=\"name\">ISize</span>.<span class=\"name\">toNatClampNeg_lt_two_pow_numBits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L381-L381","name":"Int64.toNatClampNeg_lt","line":381,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toNatClampNeg_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toNatClampNeg_lt\"><span class=\"name\">Int64</span>.<span class=\"name\">toNatClampNeg_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L380-L380","name":"Int32.toNatClampNeg_lt","line":380,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_lt\"><span class=\"name\">Int32</span>.<span class=\"name\">toNatClampNeg_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L379-L379","name":"Int16.toNatClampNeg_lt","line":379,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_lt\"><span class=\"name\">Int16</span>.<span class=\"name\">toNatClampNeg_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">15</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L378-L378","name":"Int8.toNatClampNeg_lt","line":378,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_lt\"><span class=\"name\">Int8</span>.<span class=\"name\">toNatClampNeg_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">7</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L375-L376","name":"ISize.toInt_le_int64MaxValue","line":375,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_le_int64MaxValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_le_int64MaxValue\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_le_int64MaxValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">Int64.maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L373-L374","name":"ISize.int64MinValue_le_toInt","line":373,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.int64MinValue_le_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.int64MinValue_le_toInt\"><span class=\"name\">ISize</span>.<span class=\"name\">int64MinValue_le_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">Int64.minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L370-L371","name":"Int32.toInt_le_iSizeMaxValue","line":370,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_le_iSizeMaxValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_le_iSizeMaxValue\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_le_iSizeMaxValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">ISize.maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L368-L369","name":"Int32.iSizeMinValue_le_toInt","line":368,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.iSizeMinValue_le_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.iSizeMinValue_le_toInt\"><span class=\"name\">Int32</span>.<span class=\"name\">iSizeMinValue_le_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">ISize.minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L366-L367","name":"Int16.toInt_le_iSizeMaxValue","line":366,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_le_iSizeMaxValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_le_iSizeMaxValue\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_le_iSizeMaxValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">ISize.maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L364-L365","name":"Int16.iSizeMinValue_le_toInt","line":364,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.iSizeMinValue_le_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.iSizeMinValue_le_toInt\"><span class=\"name\">Int16</span>.<span class=\"name\">iSizeMinValue_le_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">ISize.minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L362-L363","name":"Int8.toInt_le_iSizeMaxValue","line":362,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_le_iSizeMaxValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_le_iSizeMaxValue\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_le_iSizeMaxValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">ISize.maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L360-L361","name":"Int8.iSizeMinValue_le_toInt","line":360,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.iSizeMinValue_le_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.iSizeMinValue_le_toInt\"><span class=\"name\">Int8</span>.<span class=\"name\">iSizeMinValue_le_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">ISize.minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L356-L358","name":"ISize.le_toInt_maxValue","line":356,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.le_toInt_maxValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.le_toInt_maxValue\"><span class=\"name\">ISize</span>.<span class=\"name\">le_toInt_maxValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L352-L354","name":"ISize.toInt_minValue_le","line":352,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_minValue_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_minValue_le\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_minValue_le</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L346-L350","name":"ISize.minValue_le_toInt","line":346,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.minValue_le_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.minValue_le_toInt\"><span class=\"name\">ISize</span>.<span class=\"name\">minValue_le_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L345-L345","name":"Int64.minValue_le_toInt","line":345,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.minValue_le_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.minValue_le_toInt\"><span class=\"name\">Int64</span>.<span class=\"name\">minValue_le_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L344-L344","name":"Int32.minValue_le_toInt","line":344,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.minValue_le_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.minValue_le_toInt\"><span class=\"name\">Int32</span>.<span class=\"name\">minValue_le_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L343-L343","name":"Int16.minValue_le_toInt","line":343,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.minValue_le_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.minValue_le_toInt\"><span class=\"name\">Int16</span>.<span class=\"name\">minValue_le_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L342-L342","name":"Int8.minValue_le_toInt","line":342,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.minValue_le_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.minValue_le_toInt\"><span class=\"name\">Int8</span>.<span class=\"name\">minValue_le_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L337-L341","name":"ISize.toInt_le","line":337,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_le\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L336-L336","name":"Int64.toInt_le","line":336,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_le\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L335-L335","name":"Int32.toInt_le","line":335,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_le\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L334-L334","name":"Int16.toInt_le","line":334,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_le\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L333-L333","name":"Int8.toInt_le","line":333,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_le\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L330-L331","name":"ISize.le_toInt","line":330,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.le_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.le_toInt\"><span class=\"name\">ISize</span>.<span class=\"name\">le_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L328-L329","name":"ISize.toInt_lt","line":328,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_lt\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L326-L327","name":"ISize.two_pow_numBits_le_toInt","line":326,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.two_pow_numBits_le_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.two_pow_numBits_le_toInt\"><span class=\"name\">ISize</span>.<span class=\"name\">two_pow_numBits_le_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L324-L325","name":"ISize.toInt_lt_two_pow_numBits","line":324,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_lt_two_pow_numBits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_lt_two_pow_numBits\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_lt_two_pow_numBits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L323-L323","name":"Int64.le_toInt","line":323,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.le_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.le_toInt\"><span class=\"name\">Int64</span>.<span class=\"name\">le_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L322-L322","name":"Int64.toInt_lt","line":322,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_lt\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L321-L321","name":"Int32.le_toInt","line":321,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.le_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.le_toInt\"><span class=\"name\">Int32</span>.<span class=\"name\">le_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L320-L320","name":"Int32.toInt_lt","line":320,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_lt\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L319-L319","name":"Int16.le_toInt","line":319,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.le_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.le_toInt\"><span class=\"name\">Int16</span>.<span class=\"name\">le_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">15</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L318-L318","name":"Int16.toInt_lt","line":318,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_lt\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">15</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L317-L317","name":"Int8.le_toInt","line":317,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.le_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.le_toInt\"><span class=\"name\">Int8</span>.<span class=\"name\">le_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">7</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L316-L316","name":"Int8.toInt_lt","line":316,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_lt\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">7</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L314-L314","name":"ISize.toBitVec_toInt64","line":314,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_toInt64\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">64</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L313-L313","name":"ISize.toBitVec_toInt32","line":313,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_toInt32\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">32</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L312-L312","name":"ISize.toBitVec_toInt16","line":312,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_toInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_toInt16\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">16</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L311-L311","name":"ISize.toBitVec_toInt8","line":311,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_toInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_toInt8\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_toInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">8</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L309-L309","name":"Int64.toBitVec_toISize","line":309,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_toISize\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L308-L308","name":"Int64.toBitVec_toInt32","line":308,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_toInt32\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">32</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L307-L307","name":"Int64.toBitVec_toInt16","line":307,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_toInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_toInt16\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">16</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L306-L306","name":"Int64.toBitVec_toInt8","line":306,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_toInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_toInt8\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_toInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">8</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L304-L304","name":"Int32.toBitVec_toISize","line":304,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_toISize\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L303-L303","name":"Int32.toBitVec_toInt64","line":303,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_toInt64\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">64</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L302-L302","name":"Int32.toBitVec_toInt16","line":302,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_toInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_toInt16\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">16</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L301-L301","name":"Int32.toBitVec_toInt8","line":301,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_toInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_toInt8\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_toInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">8</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L299-L299","name":"Int16.toBitVec_toISize","line":299,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_toISize\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L298-L298","name":"Int16.toBitVec_toInt64","line":298,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_toInt64\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">64</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L297-L297","name":"Int16.toBitVec_toInt32","line":297,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_toInt32\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">32</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L296-L296","name":"Int16.toBitVec_toInt8","line":296,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_toInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_toInt8\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_toInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">8</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L294-L294","name":"Int8.toBitVec_toISize","line":294,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_toISize\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L293-L293","name":"Int8.toBitVec_toInt64","line":293,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_toInt64\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">64</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L292-L292","name":"Int8.toBitVec_toInt32","line":292,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_toInt32\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">32</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L291-L291","name":"Int8.toBitVec_toInt16","line":291,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_toInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_toInt16\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">16</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L289-L289","name":"ISize.toInt_toBitVec","line":289,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_toBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_toBitVec\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L288-L288","name":"Int64.toInt_toBitVec","line":288,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_toBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_toBitVec\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L287-L287","name":"Int32.toInt_toBitVec","line":287,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_toBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_toBitVec\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L286-L286","name":"Int16.toInt_toBitVec","line":286,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_toBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_toBitVec\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L285-L285","name":"Int8.toInt_toBitVec","line":285,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_toBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_toBitVec\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L283-L283","name":"ISize.toNat_toInt","line":283,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toNat_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toNat_toInt\"><span class=\"name\">ISize</span>.<span class=\"name\">toNat_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L282-L282","name":"Int64.toNat_toInt","line":282,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toNat_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toNat_toInt\"><span class=\"name\">Int64</span>.<span class=\"name\">toNat_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L281-L281","name":"Int32.toNat_toInt","line":281,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toNat_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toNat_toInt\"><span class=\"name\">Int32</span>.<span class=\"name\">toNat_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L280-L280","name":"Int16.toNat_toInt","line":280,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toNat_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toNat_toInt\"><span class=\"name\">Int16</span>.<span class=\"name\">toNat_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L279-L279","name":"Int8.toNat_toInt","line":279,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toNat_toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toNat_toInt\"><span class=\"name\">Int8</span>.<span class=\"name\">toNat_toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L277-L277","name":"USize.toUSize_toISize","line":277,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#USize.toUSize_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#USize.toUSize_toISize\"><span class=\"name\">USize</span>.<span class=\"name\">toUSize_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L276-L276","name":"UInt64.toUInt64_toInt64","line":276,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt64.toUInt64_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt64.toUInt64_toInt64\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt64_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L275-L275","name":"UInt32.toUInt32_toInt32","line":275,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt32.toUInt32_toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt32.toUInt32_toInt32\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt32_toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L274-L274","name":"UInt16.toUInt16_toInt16","line":274,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt16.toUInt16_toInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt16.toUInt16_toInt16\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt16_toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L273-L273","name":"UInt8.toUInt8_toInt8","line":273,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt8.toUInt8_toInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt8.toUInt8_toInt8\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt8_toInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L271-L271","name":"ISize.ofBitVec_uSizeToBitVec","line":271,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_uSizeToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofBitVec_uSizeToBitVec\"><span class=\"name\">ISize</span>.<span class=\"name\">ofBitVec_uSizeToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L270-L270","name":"Int64.ofBitVec_uInt64ToBitVec","line":270,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_uInt64ToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofBitVec_uInt64ToBitVec\"><span class=\"name\">Int64</span>.<span class=\"name\">ofBitVec_uInt64ToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L269-L269","name":"Int32.ofBitVec_uInt32ToBitVec","line":269,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_uInt32ToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofBitVec_uInt32ToBitVec\"><span class=\"name\">Int32</span>.<span class=\"name\">ofBitVec_uInt32ToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L268-L268","name":"Int16.ofBitVec_uInt16ToBitVec","line":268,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_uInt16ToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofBitVec_uInt16ToBitVec\"><span class=\"name\">Int16</span>.<span class=\"name\">ofBitVec_uInt16ToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L267-L267","name":"Int8.ofBitVec_uInt8ToBitVec","line":267,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_uInt8ToBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofBitVec_uInt8ToBitVec\"><span class=\"name\">Int8</span>.<span class=\"name\">ofBitVec_uInt8ToBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L265-L265","name":"USize.toBitVec_toISize","line":265,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#USize.toBitVec_toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#USize.toBitVec_toISize\"><span class=\"name\">USize</span>.<span class=\"name\">toBitVec_toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L264-L264","name":"UInt64.toBitVec_toInt64","line":264,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt64.toBitVec_toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt64.toBitVec_toInt64\"><span class=\"name\">UInt64</span>.<span class=\"name\">toBitVec_toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L263-L263","name":"UInt32.toBitVec_toInt32","line":263,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt32.toBitVec_toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt32.toBitVec_toInt32\"><span class=\"name\">UInt32</span>.<span class=\"name\">toBitVec_toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L262-L262","name":"UInt16.toBitVec_toInt16","line":262,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt16.toBitVec_toInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt16.toBitVec_toInt16\"><span class=\"name\">UInt16</span>.<span class=\"name\">toBitVec_toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L261-L261","name":"UInt8.toBitVec_toInt8","line":261,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#UInt8.toBitVec_toInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#UInt8.toBitVec_toInt8\"><span class=\"name\">UInt8</span>.<span class=\"name\">toBitVec_toInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L257-L259","name":"ISize.toNatClampNeg_minValue","line":257,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_minValue\"><span class=\"name\">ISize</span>.<span class=\"name\">toNatClampNeg_minValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L256-L256","name":"Int64.toNatClampNeg_minValue","line":256,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toNatClampNeg_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toNatClampNeg_minValue\"><span class=\"name\">Int64</span>.<span class=\"name\">toNatClampNeg_minValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L255-L255","name":"Int32.toNatClampNeg_minValue","line":255,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_minValue\"><span class=\"name\">Int32</span>.<span class=\"name\">toNatClampNeg_minValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L254-L254","name":"Int16.toNatClampNeg_minValue","line":254,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_minValue\"><span class=\"name\">Int16</span>.<span class=\"name\">toNatClampNeg_minValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L253-L253","name":"Int8.toNatClampNeg_minValue","line":253,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_minValue\"><span class=\"name\">Int8</span>.<span class=\"name\">toNatClampNeg_minValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L249-L251","name":"ISize.toInt_maxValue","line":249,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_maxValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_maxValue\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_maxValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L248-L248","name":"Int64.toInt_maxValue","line":248,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_maxValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_maxValue\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_maxValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L247-L247","name":"Int32.toInt_maxValue","line":247,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_maxValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_maxValue\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_maxValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L246-L246","name":"Int16.toInt_maxValue","line":246,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_maxValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_maxValue\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_maxValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">15</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L245-L245","name":"Int8.toInt_maxValue","line":245,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_maxValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_maxValue\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_maxValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">7</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L241-L243","name":"ISize.toInt_minValue","line":241,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_minValue\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_minValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L240-L240","name":"Int64.toInt_minValue","line":240,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_minValue\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_minValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L239-L239","name":"Int32.toInt_minValue","line":239,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_minValue\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_minValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L238-L238","name":"Int16.toInt_minValue","line":238,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_minValue\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_minValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">15</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L237-L237","name":"Int8.toInt_minValue","line":237,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_minValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_minValue\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_minValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">7</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L235-L235","name":"ISize.toInt_zero","line":235,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_zero\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L234-L234","name":"Int64.toInt_zero","line":234,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_zero\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L233-L233","name":"Int32.toInt_zero","line":233,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_zero\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L232-L232","name":"Int16.toInt_zero","line":232,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_zero\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L231-L231","name":"Int8.toInt_zero","line":231,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_zero\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L228-L229","name":"ISize.toInt_neg_ofNat_of_le","line":228,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_neg_ofNat_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_neg_ofNat_of_le\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_neg_ofNat_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">n</span></span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">↑<span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L226-L227","name":"Int64.toInt_neg_ofNat_of_le","line":226,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_neg_ofNat_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_neg_ofNat_of_le\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_neg_ofNat_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">n</span></span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">↑<span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L221-L224","name":"ISize.toInt_ofNat_of_lt_two_pow_numBits","line":221,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_ofNat_of_lt_two_pow_numBits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_ofNat_of_lt_two_pow_numBits\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_ofNat_of_lt_two_pow_numBits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>))</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L219-L220","name":"ISize.toInt_ofNat_of_lt","line":219,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_ofNat_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_ofNat_of_lt\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_ofNat_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L217-L218","name":"Int64.toInt_ofNat_of_lt","line":217,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_ofNat_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_ofNat_of_lt\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_ofNat_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L215-L216","name":"Int32.toInt_ofNat_of_lt","line":215,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_ofNat_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_ofNat_of_lt\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_ofNat_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L213-L214","name":"Int16.toInt_ofNat_of_lt","line":213,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_ofNat_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_ofNat_of_lt\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_ofNat_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">15</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L211-L212","name":"Int8.toInt_ofNat_of_lt","line":211,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_ofNat_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_ofNat_of_lt\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_ofNat_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">7</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L207-L209","name":"ISize.toNatClampNeg_neg_ofNat_of_le","line":207,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_neg_ofNat_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_neg_ofNat_of_le\"><span class=\"name\">ISize</span>.<span class=\"name\">toNatClampNeg_neg_ofNat_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">n</span></span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L201-L205","name":"ISize.toNatClampNeg_ofNat_of_lt_two_pow_numBits","line":201,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_ofNat_of_lt_two_pow_numBits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_ofNat_of_lt_two_pow_numBits\"><span class=\"name\">ISize</span>.<span class=\"name\">toNatClampNeg_ofNat_of_lt_two_pow_numBits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>))</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L199-L200","name":"ISize.toNatClampNeg_ofNat_of_lt","line":199,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_ofNat_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_ofNat_of_lt\"><span class=\"name\">ISize</span>.<span class=\"name\">toNatClampNeg_ofNat_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L197-L198","name":"Int64.toNatClampNeg_ofNat_of_lt","line":197,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toNatClampNeg_ofNat_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toNatClampNeg_ofNat_of_lt\"><span class=\"name\">Int64</span>.<span class=\"name\">toNatClampNeg_ofNat_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L195-L196","name":"Int32.toNatClampNeg_ofNat_of_lt","line":195,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_ofNat_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toNatClampNeg_ofNat_of_lt\"><span class=\"name\">Int32</span>.<span class=\"name\">toNatClampNeg_ofNat_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L193-L194","name":"Int16.toNatClampNeg_ofNat_of_lt","line":193,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_ofNat_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toNatClampNeg_ofNat_of_lt\"><span class=\"name\">Int16</span>.<span class=\"name\">toNatClampNeg_ofNat_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">15</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L191-L192","name":"Int8.toNatClampNeg_ofNat_of_lt","line":191,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_ofNat_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toNatClampNeg_ofNat_of_lt\"><span class=\"name\">Int8</span>.<span class=\"name\">toNatClampNeg_ofNat_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">7</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L188-L189","name":"ISize.neg_ofNat","line":188,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.neg_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.neg_ofNat\"><span class=\"name\">ISize</span>.<span class=\"name\">neg_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">↑<span class=\"fn\">n</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L186-L187","name":"Int64.neg_ofNat","line":186,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.neg_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.neg_ofNat\"><span class=\"name\">Int64</span>.<span class=\"name\">neg_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">↑<span class=\"fn\">n</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L184-L185","name":"Int32.neg_ofNat","line":184,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.neg_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.neg_ofNat\"><span class=\"name\">Int32</span>.<span class=\"name\">neg_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">↑<span class=\"fn\">n</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L182-L183","name":"Int16.neg_ofNat","line":182,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.neg_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.neg_ofNat\"><span class=\"name\">Int16</span>.<span class=\"name\">neg_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">↑<span class=\"fn\">n</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L180-L181","name":"Int8.neg_ofNat","line":180,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.neg_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.neg_ofNat\"><span class=\"name\">Int8</span>.<span class=\"name\">neg_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">↑<span class=\"fn\">n</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L177-L178","name":"ISize.toInt_ofNat","line":177,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_ofNat\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <a href=\"./Init/Data/SInt/Basic.html#ISize.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L175-L176","name":"Int64.toInt_ofNat","line":175,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_ofNat\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <a href=\"./Init/Data/SInt/Basic.html#Int64.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L173-L174","name":"Int32.toInt_ofNat","line":173,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_ofNat\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <a href=\"./Init/Data/SInt/Basic.html#Int32.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L171-L172","name":"Int16.toInt_ofNat","line":171,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_ofNat\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <a href=\"./Init/Data/SInt/Basic.html#Int16.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L169-L170","name":"Int8.toInt_ofNat","line":169,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_ofNat\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <a href=\"./Init/Data/SInt/Basic.html#Int8.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L167-L167","name":"ISize.ofInt_eq_ofNat","line":167,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ofInt_eq_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ofInt_eq_ofNat\"><span class=\"name\">ISize</span>.<span class=\"name\">ofInt_eq_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L166-L166","name":"Int64.ofInt_eq_ofNat","line":166,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ofInt_eq_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ofInt_eq_ofNat\"><span class=\"name\">Int64</span>.<span class=\"name\">ofInt_eq_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L165-L165","name":"Int32.ofInt_eq_ofNat","line":165,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ofInt_eq_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ofInt_eq_ofNat\"><span class=\"name\">Int32</span>.<span class=\"name\">ofInt_eq_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L164-L164","name":"Int16.ofInt_eq_ofNat","line":164,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ofInt_eq_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ofInt_eq_ofNat\"><span class=\"name\">Int16</span>.<span class=\"name\">ofInt_eq_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L163-L163","name":"Int8.ofInt_eq_ofNat","line":163,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ofInt_eq_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ofInt_eq_ofNat\"><span class=\"name\">Int8</span>.<span class=\"name\">ofInt_eq_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L160-L161","name":"ISize.neg_ofInt","line":160,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.neg_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.neg_ofInt\"><span class=\"name\">ISize</span>.<span class=\"name\">neg_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">n</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L158-L159","name":"Int64.neg_ofInt","line":158,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.neg_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.neg_ofInt\"><span class=\"name\">Int64</span>.<span class=\"name\">neg_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">n</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L156-L157","name":"Int32.neg_ofInt","line":156,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.neg_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.neg_ofInt\"><span class=\"name\">Int32</span>.<span class=\"name\">neg_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">n</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L154-L155","name":"Int16.neg_ofInt","line":154,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.neg_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.neg_ofInt\"><span class=\"name\">Int16</span>.<span class=\"name\">neg_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">n</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L152-L153","name":"Int8.neg_ofInt","line":152,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.neg_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.neg_ofInt\"><span class=\"name\">Int8</span>.<span class=\"name\">neg_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">n</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L148-L150","name":"ISize.toNatClampNeg_ofInt_eq_zero","line":148,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_ofInt_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toNatClampNeg_ofInt_eq_zero\"><span class=\"name\">ISize</span>.<span class=\"name\">toNatClampNeg_ofInt_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn'</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\">toNatClampNeg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L143-L146","name":"ISize.toInt_ofInt_of_two_pow_numBits_le","line":143,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_ofInt_of_two_pow_numBits_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_ofInt_of_two_pow_numBits_le\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_ofInt_of_two_pow_numBits_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn'</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>))</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L139-L141","name":"ISize.toInt_ofInt_of_le","line":139,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_ofInt_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_ofInt_of_le\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_ofInt_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn'</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L137-L138","name":"Int64.toInt_ofInt_of_le","line":137,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_ofInt_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_ofInt_of_le\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_ofInt_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn'</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">63</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L135-L136","name":"Int32.toInt_ofInt_of_le","line":135,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_ofInt_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_ofInt_of_le\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_ofInt_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn'</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">31</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L133-L134","name":"Int16.toInt_ofInt_of_le","line":133,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_ofInt_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_ofInt_of_le\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_ofInt_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">15</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn'</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">15</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L131-L132","name":"Int8.toInt_ofInt_of_le","line":131,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_ofInt_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_ofInt_of_le\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_ofInt_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">7</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn'</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">7</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L128-L129","name":"ISize.toInt_ofInt","line":128,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_ofInt\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <a href=\"./Init/Data/SInt/Basic.html#ISize.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L126-L127","name":"Int64.toInt_ofInt","line":126,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_ofInt\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <a href=\"./Init/Data/SInt/Basic.html#Int64.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L124-L125","name":"Int32.toInt_ofInt","line":124,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_ofInt\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <a href=\"./Init/Data/SInt/Basic.html#Int32.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L122-L123","name":"Int16.toInt_ofInt","line":122,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_ofInt\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <a href=\"./Init/Data/SInt/Basic.html#Int16.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L120-L121","name":"Int8.toInt_ofInt","line":120,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_ofInt\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <a href=\"./Init/Data/SInt/Basic.html#Int8.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L116-L118","name":"ISize.toNat_toBitVec_ofNat_of_lt","line":116,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toNat_toBitVec_ofNat_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toNat_toBitVec_ofNat_of_lt\"><span class=\"name\">ISize</span>.<span class=\"name\">toNat_toBitVec_ofNat_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L114-L114","name":"ISize.neg_zero","line":114,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.neg_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.neg_zero\"><span class=\"name\">ISize</span>.<span class=\"name\">neg_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L113-L113","name":"Int64.neg_zero","line":113,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.neg_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.neg_zero\"><span class=\"name\">Int64</span>.<span class=\"name\">neg_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L112-L112","name":"Int32.neg_zero","line":112,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.neg_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.neg_zero\"><span class=\"name\">Int32</span>.<span class=\"name\">neg_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L111-L111","name":"Int16.neg_zero","line":111,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.neg_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.neg_zero\"><span class=\"name\">Int16</span>.<span class=\"name\">neg_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L110-L110","name":"Int8.neg_zero","line":110,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.neg_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.neg_zero\"><span class=\"name\">Int8</span>.<span class=\"name\">neg_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L108-L108","name":"ISize.toBitVec_ofInt","line":108,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_ofInt\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\">ofInt</a> <span class=\"fn\">i</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofInt\">BitVec.ofInt</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L107-L107","name":"Int64.toBitVec_ofInt","line":107,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_ofInt\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\">ofInt</a> <span class=\"fn\">i</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofInt\">BitVec.ofInt</a> <span class=\"fn\">64</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L106-L106","name":"Int32.toBitVec_ofInt","line":106,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_ofInt\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\">ofInt</a> <span class=\"fn\">i</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofInt\">BitVec.ofInt</a> <span class=\"fn\">32</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L105-L105","name":"Int16.toBitVec_ofInt","line":105,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_ofInt\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\">ofInt</a> <span class=\"fn\">i</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofInt\">BitVec.ofInt</a> <span class=\"fn\">16</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L104-L104","name":"Int8.toBitVec_ofInt","line":104,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_ofInt\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\">ofInt</a> <span class=\"fn\">i</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofInt\">BitVec.ofInt</a> <span class=\"fn\">8</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L102-L102","name":"ISize.toBitVec_one","line":102,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_one\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> 1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L101-L101","name":"Int64.toBitVec_one","line":101,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_one\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> 1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">64</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L100-L100","name":"Int32.toBitVec_one","line":100,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_one\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> 1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">32</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L99-L99","name":"Int16.toBitVec_one","line":99,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_one\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> 1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">16</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L98-L98","name":"Int8.toBitVec_one","line":98,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_one\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> 1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">8</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L96-L96","name":"ISize.toBitVec_zero","line":96,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_zero\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L95-L95","name":"Int64.toBitVec_zero","line":95,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_zero\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">64</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L94-L94","name":"Int32.toBitVec_zero","line":94,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_zero\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">32</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L93-L93","name":"Int16.toBitVec_zero","line":93,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_zero\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">16</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L92-L92","name":"Int8.toBitVec_zero","line":92,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_zero\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">8</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L90-L90","name":"ISize.toBitVec_neg","line":90,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_neg\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L89-L89","name":"Int64.toBitVec_neg","line":89,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_neg\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L88-L88","name":"Int32.toBitVec_neg","line":88,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_neg\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L87-L87","name":"Int16.toBitVec_neg","line":87,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_neg\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L86-L86","name":"Int8.toBitVec_neg","line":86,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_neg\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L84-L84","name":"ISize.toInt_inj","line":84,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt_inj\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L83-L83","name":"ISize.toInt.inj","line":83,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toInt.inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toInt.inj\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt</span>.<span class=\"name\">inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L82-L82","name":"Int64.toInt_inj","line":82,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt_inj\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L81-L81","name":"Int64.toInt.inj","line":81,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toInt.inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toInt.inj\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt</span>.<span class=\"name\">inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L80-L80","name":"Int32.toInt_inj","line":80,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt_inj\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L79-L79","name":"Int32.toInt.inj","line":79,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toInt.inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toInt.inj\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt</span>.<span class=\"name\">inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L78-L78","name":"Int16.toInt_inj","line":78,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt_inj\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L77-L77","name":"Int16.toInt.inj","line":77,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toInt.inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toInt.inj\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt</span>.<span class=\"name\">inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L76-L76","name":"Int8.toInt_inj","line":76,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt_inj\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L75-L75","name":"Int8.toInt.inj","line":75,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toInt.inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toInt.inj\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt</span>.<span class=\"name\">inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L72-L73","name":"ISize.lt_def","line":72,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.lt_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.lt_def\"><span class=\"name\">ISize</span>.<span class=\"name\">lt_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.slt\">slt</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L70-L71","name":"Int64.lt_def","line":70,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.lt_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.lt_def\"><span class=\"name\">Int64</span>.<span class=\"name\">lt_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.slt\">slt</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L68-L69","name":"Int32.lt_def","line":68,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.lt_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.lt_def\"><span class=\"name\">Int32</span>.<span class=\"name\">lt_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.slt\">slt</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L66-L67","name":"Int16.lt_def","line":66,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.lt_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.lt_def\"><span class=\"name\">Int16</span>.<span class=\"name\">lt_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.slt\">slt</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L64-L65","name":"Int8.lt_def","line":64,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.lt_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.lt_def\"><span class=\"name\">Int8</span>.<span class=\"name\">lt_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.slt\">slt</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L61-L62","name":"ISize.le_def","line":61,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.le_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.le_def\"><span class=\"name\">ISize</span>.<span class=\"name\">le_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sle\">sle</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L59-L60","name":"Int64.le_def","line":59,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.le_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.le_def\"><span class=\"name\">Int64</span>.<span class=\"name\">le_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sle\">sle</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L57-L58","name":"Int32.le_def","line":57,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.le_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.le_def\"><span class=\"name\">Int32</span>.<span class=\"name\">le_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sle\">sle</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L55-L56","name":"Int16.le_def","line":55,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.le_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.le_def\"><span class=\"name\">Int16</span>.<span class=\"name\">le_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sle\">sle</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L53-L54","name":"Int8.le_def","line":53,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.le_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.le_def\"><span class=\"name\">Int8</span>.<span class=\"name\">le_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sle\">sle</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L51-L51","name":"ISize.eq_iff_toBitVec_eq","line":51,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.eq_iff_toBitVec_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.eq_iff_toBitVec_eq\"><span class=\"name\">ISize</span>.<span class=\"name\">eq_iff_toBitVec_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L51-L51","name":"ISize.toBitVec_sub","line":51,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_sub\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L51-L51","name":"ISize.ne_iff_toBitVec_ne","line":51,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.ne_iff_toBitVec_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.ne_iff_toBitVec_ne\"><span class=\"name\">ISize</span>.<span class=\"name\">ne_iff_toBitVec_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L51-L51","name":"ISize.toBitVec_div","line":51,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_div\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\">sdiv</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L51-L51","name":"ISize.toBitVec_inj","line":51,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_inj\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L51-L51","name":"ISize.lt_iff_toBitVec_slt","line":51,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.lt_iff_toBitVec_slt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.lt_iff_toBitVec_slt\"><span class=\"name\">ISize</span>.<span class=\"name\">lt_iff_toBitVec_slt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.slt\">slt</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L51-L51","name":"ISize.toBitVec_mul","line":51,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_mul\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L51-L51","name":"ISize.toBitVec_add","line":51,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_add\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L51-L51","name":"ISize.toBitVec_mod","line":51,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_mod\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_mod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.srem\">srem</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L51-L51","name":"ISize.toBitVec_ofNat'","line":51,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_ofNat'\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L51-L51","name":"ISize.toBitVec_ofNat","line":51,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.toBitVec_ofNat\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L51-L51","name":"ISize.le_iff_toBitVec_sle","line":51,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#ISize.le_iff_toBitVec_sle","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#ISize.le_iff_toBitVec_sle\"><span class=\"name\">ISize</span>.<span class=\"name\">le_iff_toBitVec_sle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sle\">sle</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L50-L50","name":"Int64.ne_iff_toBitVec_ne","line":50,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.ne_iff_toBitVec_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.ne_iff_toBitVec_ne\"><span class=\"name\">Int64</span>.<span class=\"name\">ne_iff_toBitVec_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L50-L50","name":"Int64.le_iff_toBitVec_sle","line":50,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.le_iff_toBitVec_sle","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.le_iff_toBitVec_sle\"><span class=\"name\">Int64</span>.<span class=\"name\">le_iff_toBitVec_sle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sle\">sle</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L50-L50","name":"Int64.lt_iff_toBitVec_slt","line":50,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.lt_iff_toBitVec_slt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.lt_iff_toBitVec_slt\"><span class=\"name\">Int64</span>.<span class=\"name\">lt_iff_toBitVec_slt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.slt\">slt</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L50-L50","name":"Int64.toBitVec_mul","line":50,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_mul\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L50-L50","name":"Int64.toBitVec_add","line":50,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_add\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L50-L50","name":"Int64.toBitVec_div","line":50,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_div\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\">sdiv</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L50-L50","name":"Int64.toBitVec_sub","line":50,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_sub\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L50-L50","name":"Int64.toBitVec_mod","line":50,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_mod\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_mod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.srem\">srem</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L50-L50","name":"Int64.toBitVec_ofNat","line":50,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_ofNat\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L50-L50","name":"Int64.toBitVec_ofNat'","line":50,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_ofNat'\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">64</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L50-L50","name":"Int64.eq_iff_toBitVec_eq","line":50,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.eq_iff_toBitVec_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.eq_iff_toBitVec_eq\"><span class=\"name\">Int64</span>.<span class=\"name\">eq_iff_toBitVec_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L50-L50","name":"Int64.toBitVec_inj","line":50,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int64.toBitVec_inj\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L49-L49","name":"Int32.toBitVec_inj","line":49,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_inj\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L49-L49","name":"Int32.toBitVec_ofNat","line":49,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_ofNat\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L49-L49","name":"Int32.toBitVec_add","line":49,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_add\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L49-L49","name":"Int32.toBitVec_mul","line":49,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_mul\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L49-L49","name":"Int32.ne_iff_toBitVec_ne","line":49,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.ne_iff_toBitVec_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.ne_iff_toBitVec_ne\"><span class=\"name\">Int32</span>.<span class=\"name\">ne_iff_toBitVec_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L49-L49","name":"Int32.toBitVec_div","line":49,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_div\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\">sdiv</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L49-L49","name":"Int32.toBitVec_sub","line":49,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_sub\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L49-L49","name":"Int32.eq_iff_toBitVec_eq","line":49,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.eq_iff_toBitVec_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.eq_iff_toBitVec_eq\"><span class=\"name\">Int32</span>.<span class=\"name\">eq_iff_toBitVec_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L49-L49","name":"Int32.le_iff_toBitVec_sle","line":49,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.le_iff_toBitVec_sle","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.le_iff_toBitVec_sle\"><span class=\"name\">Int32</span>.<span class=\"name\">le_iff_toBitVec_sle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sle\">sle</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L49-L49","name":"Int32.lt_iff_toBitVec_slt","line":49,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.lt_iff_toBitVec_slt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.lt_iff_toBitVec_slt\"><span class=\"name\">Int32</span>.<span class=\"name\">lt_iff_toBitVec_slt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.slt\">slt</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L49-L49","name":"Int32.toBitVec_mod","line":49,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_mod\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_mod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.srem\">srem</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L49-L49","name":"Int32.toBitVec_ofNat'","line":49,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int32.toBitVec_ofNat'\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">32</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L48-L48","name":"Int16.toBitVec_inj","line":48,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_inj\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L48-L48","name":"Int16.toBitVec_sub","line":48,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_sub\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L48-L48","name":"Int16.toBitVec_ofNat'","line":48,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_ofNat'\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">16</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L48-L48","name":"Int16.lt_iff_toBitVec_slt","line":48,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.lt_iff_toBitVec_slt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.lt_iff_toBitVec_slt\"><span class=\"name\">Int16</span>.<span class=\"name\">lt_iff_toBitVec_slt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.slt\">slt</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L48-L48","name":"Int16.eq_iff_toBitVec_eq","line":48,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.eq_iff_toBitVec_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.eq_iff_toBitVec_eq\"><span class=\"name\">Int16</span>.<span class=\"name\">eq_iff_toBitVec_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L48-L48","name":"Int16.toBitVec_mul","line":48,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_mul\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L48-L48","name":"Int16.ne_iff_toBitVec_ne","line":48,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.ne_iff_toBitVec_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.ne_iff_toBitVec_ne\"><span class=\"name\">Int16</span>.<span class=\"name\">ne_iff_toBitVec_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L48-L48","name":"Int16.toBitVec_ofNat","line":48,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_ofNat\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L48-L48","name":"Int16.toBitVec_add","line":48,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_add\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L48-L48","name":"Int16.le_iff_toBitVec_sle","line":48,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.le_iff_toBitVec_sle","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.le_iff_toBitVec_sle\"><span class=\"name\">Int16</span>.<span class=\"name\">le_iff_toBitVec_sle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sle\">sle</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L48-L48","name":"Int16.toBitVec_mod","line":48,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_mod\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_mod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.srem\">srem</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L48-L48","name":"Int16.toBitVec_div","line":48,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int16.toBitVec_div\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\">sdiv</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L47-L47","name":"Int8.toBitVec_add","line":47,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_add\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L47-L47","name":"Int8.ne_iff_toBitVec_ne","line":47,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.ne_iff_toBitVec_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.ne_iff_toBitVec_ne\"><span class=\"name\">Int8</span>.<span class=\"name\">ne_iff_toBitVec_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L47-L47","name":"Int8.toBitVec_inj","line":47,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_inj\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L47-L47","name":"Int8.toBitVec_ofNat","line":47,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_ofNat\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L47-L47","name":"Int8.lt_iff_toBitVec_slt","line":47,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.lt_iff_toBitVec_slt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.lt_iff_toBitVec_slt\"><span class=\"name\">Int8</span>.<span class=\"name\">lt_iff_toBitVec_slt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.slt\">slt</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L47-L47","name":"Int8.le_iff_toBitVec_sle","line":47,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.le_iff_toBitVec_sle","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.le_iff_toBitVec_sle\"><span class=\"name\">Int8</span>.<span class=\"name\">le_iff_toBitVec_sle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sle\">sle</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L47-L47","name":"Int8.toBitVec_ofNat'","line":47,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_ofNat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_ofNat'\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">8</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L47-L47","name":"Int8.toBitVec_mod","line":47,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_mod\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_mod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.srem\">srem</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L47-L47","name":"Int8.toBitVec_sub","line":47,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_sub\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L47-L47","name":"Int8.toBitVec_div","line":47,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_div\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\">sdiv</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L47-L47","name":"Int8.eq_iff_toBitVec_eq","line":47,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.eq_iff_toBitVec_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.eq_iff_toBitVec_eq\"><span class=\"name\">Int8</span>.<span class=\"name\">eq_iff_toBitVec_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L47-L47","name":"Int8.toBitVec_mul","line":47,"kind":"theorem","docLink":"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#Int8.toBitVec_mul\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/SInt/Lemmas.lean#L21-L45","name":"commandDeclare_int_theorems__","line":21,"kind":"def","docLink":"./Init/Data/SInt/Lemmas.html#commandDeclare_int_theorems__","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Lemmas.html#commandDeclare_int_theorems__\"><span class=\"name\">commandDeclare_int_theorems__</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}