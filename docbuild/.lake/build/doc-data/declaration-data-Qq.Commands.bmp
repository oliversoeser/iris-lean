{"name":"Qq.Commands","instances":[],"imports":["Init","Qq.Macro","Lean"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/e9c65db4823976353cd0bb03199a172719efbeb7/Qq/Commands.lean#L63-L82","name":"Qq.«tacticRun_tacq_=>_»","line":63,"kind":"def","docLink":"./Qq/Commands.html#Qq.«tacticRun_tacq_=>_»","doc":"`run_tacq` is the Qq analogue to `run_tac` which allows executing arbitrary `TacticM` code.\nIn contrast to `run_tac`, the local context of the main goal can be directly accessed as quoted\nexpressions. Optionally, the annotated goal can also be saved using the syntax `run_tacq $g =>`.\nExample:\n```\nexample (a b : Nat) (h : a = b) : True := by\n  run_tacq goal =>\n    let p : Q(Prop) := q($a = $b)\n    let t ← Lean.Meta.inferType h\n    Lean.logInfo p\n    Lean.logInfo <| toString (← Lean.Meta.isDefEq t p)\n    Lean.logInfo <| toString (← Lean.Meta.isDefEq h.ty p)\n    Lean.logInfo goal\n    Lean.logInfo goal.ty\n  trivial\n```\nSee also: `by_elabq`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Commands.html#Qq.«tacticRun_tacq_=&gt;_»\"><span class=\"name\">Qq</span>.<span class=\"name\">«tacticRun_tacq_=&gt;_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/e9c65db4823976353cd0bb03199a172719efbeb7/Qq/Commands.lean#L26-L61","name":"Qq.termBy_elabq_","line":26,"kind":"def","docLink":"./Qq/Commands.html#Qq.termBy_elabq_","doc":"`by_elabq` is the Qq analogue to `by_elab` which allows executing arbitrary `TermElabM` code in\nplace of a term. In contrast to `by_elab`, the local context can be directly accessed as quoted\nexpressions and the return type is Q-annotated.\nExample:\n```\ndef f (x : Prop) [Decidable x] : Int :=\n  by_elabq\n    Lean.logInfo x\n    Lean.logInfo x.ty\n    return q(if $x then 2 else 3)\n```\nSee also: `run_tacq`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Commands.html#Qq.termBy_elabq_\"><span class=\"name\">Qq</span>.<span class=\"name\">termBy_elabq_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}