{"name":"Lean.Meta.Tactic.Grind.Arith.CommRing.DenoteExpr","instances":[],"imports":["Lean.Meta.Tactic.Grind.Arith.CommRing.Util","Lean.Meta.Tactic.Grind.Arith.CommRing.Var"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.lean#L83-L84","name":"Lean.Meta.Grind.Arith.CommRing.DiseqCnstr.denoteExpr","line":83,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr.denoteExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr.denoteExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">DiseqCnstr</span>.<span class=\"name\">denoteExpr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.MonadGetRing\">MonadGetRing</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.lean#L80-L81","name":"Lean.Meta.Grind.Arith.CommRing.PolyDerivation.denoteExpr","line":80,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation.denoteExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation.denoteExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">PolyDerivation</span>.<span class=\"name\">denoteExpr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.MonadGetRing\">MonadGetRing</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation\">PolyDerivation</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.lean#L77-L78","name":"Lean.Meta.Grind.Arith.CommRing.EqCnstr.denoteExpr","line":77,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.denoteExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.denoteExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">denoteExpr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.MonadGetRing\">MonadGetRing</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.lean#L64-L71","name":"Lean.Grind.CommRing.Expr.denoteExpr.go","line":64,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.html#Lean.Grind.CommRing.Expr.denoteExpr.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.html#Lean.Grind.CommRing.Expr.denoteExpr.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denoteExpr</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.MonadGetRing\">Meta.Grind.Arith.CommRing.MonadGetRing</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.RingExpr\">Meta.Grind.Arith.CommRing.RingExpr</a> → <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.lean#L61-L71","name":"Lean.Grind.CommRing.Expr.denoteExpr","line":61,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.html#Lean.Grind.CommRing.Expr.denoteExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.html#Lean.Grind.CommRing.Expr.denoteExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denoteExpr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.MonadGetRing\">Meta.Grind.Arith.CommRing.MonadGetRing</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.RingExpr\">Meta.Grind.Arith.CommRing.RingExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.lean#L55-L59","name":"Lean.Grind.CommRing.Poly.denoteExpr.go","line":55,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.html#Lean.Grind.CommRing.Poly.denoteExpr.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.html#Lean.Grind.CommRing.Poly.denoteExpr.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteExpr</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.MonadGetRing\">Meta.Grind.Arith.CommRing.MonadGetRing</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/CommRing/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.lean#L49-L53","name":"Lean.Grind.CommRing.Poly.denoteExpr.denoteTerm","line":49,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.html#Lean.Grind.CommRing.Poly.denoteExpr.denoteTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.html#Lean.Grind.CommRing.Poly.denoteExpr.denoteTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteExpr</span>.<span class=\"name\">denoteTerm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.MonadGetRing\">Meta.Grind.Arith.CommRing.MonadGetRing</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/CommRing/Poly.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.lean#L44-L59","name":"Lean.Grind.CommRing.Poly.denoteExpr","line":44,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.html#Lean.Grind.CommRing.Poly.denoteExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.html#Lean.Grind.CommRing.Poly.denoteExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteExpr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.MonadGetRing\">Meta.Grind.Arith.CommRing.MonadGetRing</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/CommRing/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.lean#L39-L42","name":"Lean.Grind.CommRing.Mon.denoteExpr.go","line":39,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.html#Lean.Grind.CommRing.Mon.denoteExpr.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.html#Lean.Grind.CommRing.Mon.denoteExpr.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">denoteExpr</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.MonadGetRing\">Meta.Grind.Arith.CommRing.MonadGetRing</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/CommRing/Poly.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.lean#L34-L42","name":"Lean.Grind.CommRing.Mon.denoteExpr","line":34,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.html#Lean.Grind.CommRing.Mon.denoteExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.html#Lean.Grind.CommRing.Mon.denoteExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">denoteExpr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.MonadGetRing\">Meta.Grind.Arith.CommRing.MonadGetRing</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/CommRing/Poly.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.lean#L27-L32","name":"Lean.Grind.CommRing.Power.denoteExpr","line":27,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.html#Lean.Grind.CommRing.Power.denoteExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/DenoteExpr.html#Lean.Grind.CommRing.Power.denoteExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Power</span>.<span class=\"name\">denoteExpr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.MonadGetRing\">Meta.Grind.Arith.CommRing.MonadGetRing</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pw</span> : <a href=\"./Init/Grind/CommRing/Poly.html#Lean.Grind.CommRing.Power\">Power</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"}]}