{"name":"Lean.Meta.Hint","instances":[{"typeNames":["Lean.Meta.Tactic.TryThis.SuggestionText","Lean.Meta.Hint.Suggestion"],"name":"Lean.Meta.Hint.instCoeSuggestionTextSuggestion","className":"Coe"},{"typeNames":["Lean.Meta.Hint.Suggestion"],"name":"Lean.Meta.Hint.instToMessageDataSuggestion","className":"Lean.ToMessageData"}],"imports":["Lean.CoreM","Lean.Data.Lsp.Utf16","Lean.Message","Lean.Meta.TryThis","Lean.Util.Diff","Lean.Widget.Types","Lean.PrettyPrinter"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Hint.lean#L198-L218","name":"Lean.MessageData.hint","line":198,"kind":"def","docLink":"./Lean/Meta/Hint.html#Lean.MessageData.hint","doc":"Creates a hint message with associated code action suggestions.\n\nTo provide a hint without an associated code action, use `MessageData.hint'`.\n\nThe arguments are as follows:\n* `hint`: the main message of the hint, which precedes its code action suggestions.\n* `suggestions`: the suggestions to display.\n* `ref?`: if specified, the syntax location for the code action suggestions; otherwise, default to\n  the syntax reference in the monadic state. Will be overridden by the `span?` field on any\n  suggestions that specify it.\n* `codeActionPrefix?`: if specified, text to display in place of \"Try this: \" in the code action\n  label\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.MessageData.hint\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">hint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hint</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suggestions</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion\">Meta.Hint.Suggestion</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">codeActionPrefix?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Hint.lean#L158-L196","name":"Lean.Meta.Hint.mkSuggestionsMessage","line":158,"kind":"def","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.mkSuggestionsMessage","doc":"Creates message data corresponding to a `HintSuggestions` collection and adds the corresponding info\nleaf.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.mkSuggestionsMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">mkSuggestionsMessage</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suggestions</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion\">Suggestion</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">codeActionPrefix?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Hint.lean#L145-L156","name":"Lean.Meta.Hint.readableDiff.joinEdits","line":145,"kind":"def","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.readableDiff.joinEdits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.readableDiff.joinEdits\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">readableDiff</span>.<span class=\"name\">joinEdits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Util/Diff.html#Lean.Diff.Action\">Diff.Action</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Util/Diff.html#Lean.Diff.Action\">Diff.Action</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Hint.lean#L142-L143","name":"Lean.Meta.Hint.readableDiff.splitChars","line":142,"kind":"def","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.readableDiff.splitChars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.readableDiff.splitChars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">readableDiff</span>.<span class=\"name\">splitChars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Hint.lean#L116-L156","name":"Lean.Meta.Hint.readableDiff","line":116,"kind":"def","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.readableDiff","doc":"Produces a diff that splits either on characters, tokens, or not at all, depending on the edit\ndistance between the arguments.\n\nGuarantees that all actions in the output will be maximally grouped; that is, instead of returning\n`#[(.insert, \"a\"), (.insert, \"b\")]`, it will return `#[(.insert, \"ab\")]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.readableDiff\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">readableDiff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">s'</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Util/Diff.html#Lean.Diff.Action\">Diff.Action</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Hint.lean#L113-L114","name":"Lean.Meta.Hint.instToMessageDataSuggestion","line":113,"kind":"instance","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.instToMessageDataSuggestion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.instToMessageDataSuggestion\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">instToMessageDataSuggestion</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion\">Suggestion</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Hint.lean#L110-L111","name":"Lean.Meta.Hint.instCoeSuggestionTextSuggestion","line":110,"kind":"instance","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.instCoeSuggestionTextSuggestion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.instCoeSuggestionTextSuggestion\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">instCoeSuggestionTextSuggestion</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Lean/Meta/TryThis.html#Lean.Meta.Tactic.TryThis.SuggestionText\">Tactic.TryThis.SuggestionText</a> <a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion\">Suggestion</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Hint.lean#L108-L108","name":"Lean.Meta.Hint.Suggestion.span?","line":108,"kind":"def","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion.span?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion.span?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">Suggestion</span>.<span class=\"name\">span?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion\">Suggestion</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Hint.lean#L107-L107","name":"Lean.Meta.Hint.Suggestion.mk","line":107,"kind":"ctor","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">Suggestion</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toTryThisSuggestion</span> : <a href=\"./Lean/Meta/TryThis.html#Lean.Meta.Tactic.TryThis.Suggestion\">Tactic.TryThis.Suggestion</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">span?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion\">Suggestion</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Hint.lean#L107-L108","name":"Lean.Meta.Hint.Suggestion.toTryThisSuggestion","line":107,"kind":"def","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion.toTryThisSuggestion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion.toTryThisSuggestion\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">Suggestion</span>.<span class=\"name\">toTryThisSuggestion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion\">Suggestion</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/TryThis.html#Lean.Meta.Tactic.TryThis.Suggestion\">Tactic.TryThis.Suggestion</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Hint.lean#L100-L108","name":"Lean.Meta.Hint.Suggestion","line":100,"kind":"structure","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion","doc":"A code action suggestion associated with a hint in a message.\n\nRefer to `TryThis.Suggestion`; this extends that structure with a `span?` field, allowing a single\nhint to suggest modifications at different locations. If `span?` is not specified, then the syntax\nreference provided to `MessageData.hint` will be used.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">Suggestion</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Meta/TryThis.html#Lean.Meta.Tactic.TryThis.Suggestion\">Lean.Meta.Tactic.TryThis.Suggestion</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Hint.lean#L21-L75","name":"Lean.Meta.Hint.tryThisDiffWidget","line":21,"kind":"def","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.tryThisDiffWidget","doc":"A widget for rendering code action suggestions in error messages. Generally, this widget should not\nbe used directly; instead, use `MessageData.hint`. Note that this widget is intended only for use\nwithin message data; it may not display line breaks properly if rendered as a panel widget.\n\nThe props to this widget are of the following form:\n```json\n{\n  \"diff\": [\n    {\"type\": \"unchanged\", \"text\": \"h\"},\n    {\"type\": \"deletion\", \"text\": \"ello\"},\n    {\"type\": \"insertion\", \"text\": \"i\"}\n  ]\n}\n```\n\nNote: we cannot add the `builtin_widget_module` attribute here because that would require importing\n`Lean.Widget.UserWidget`, which in turn imports much of `Lean.Elab` -- the module where we want to\nbe able to use this widget. Instead, we register the attribute post-hoc when we declare the regular\n\"Try This\" widget in `Lean.Meta.Tactic.TryThis`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.tryThisDiffWidget\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">tryThisDiffWidget</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Widget/Types.html#Lean.Widget.Module\">Widget.Module</a></div></div>"}]}