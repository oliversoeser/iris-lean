{"name":"Std.Data.Iterators.Combinators.Monadic.Zip","instances":[{"typeNames":["Std.Iterators.Zip","Prod"],"name":"Std.Iterators.Zip.instIterator","className":"Std.Iterators.Iterator"},{"typeNames":["Std.Iterators.Zip"],"name":"Std.Iterators.Zip.instFinite₁","className":"Std.Iterators.Finite"},{"typeNames":["Std.Iterators.Zip"],"name":"Std.Iterators.Zip.instFinite₂","className":"Std.Iterators.Finite"},{"typeNames":["Std.Iterators.Zip"],"name":"Std.Iterators.Zip.instProductive","className":"Std.Iterators.Productive"},{"typeNames":["Std.Iterators.Zip"],"name":"Std.Iterators.Zip.instIteratorCollect","className":"Std.Iterators.IteratorCollect"},{"typeNames":["Std.Iterators.Zip"],"name":"Std.Iterators.Zip.instIteratorCollectPartial","className":"Std.Iterators.IteratorCollectPartial"},{"typeNames":["Std.Iterators.Zip"],"name":"Std.Iterators.Zip.instIteratorLoop","className":"Std.Iterators.IteratorLoop"},{"typeNames":["Std.Iterators.Zip"],"name":"Std.Iterators.Zip.instIteratorLoopPartial","className":"Std.Iterators.IteratorLoopPartial"}],"imports":["Init.Data.Option.Lemmas","Std.Data.Iterators.Basic","Std.Data.Iterators.Consumers.Collect","Std.Data.Iterators.Consumers.Loop","Std.Data.Iterators.Internal.Termination"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L391-L393","name":"Std.Iterators.Zip.instIteratorLoopPartial","line":391,"kind":"instance","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.instIteratorLoopPartial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.instIteratorLoopPartial\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">instIteratorLoopPartial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoopPartial\">IteratorLoopPartial</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip\">Zip</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">α₂</span> <span class=\"fn\">β₂</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L387-L389","name":"Std.Iterators.Zip.instIteratorLoop","line":387,"kind":"instance","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.instIteratorLoop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.instIteratorLoop\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">instIteratorLoop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoop\">IteratorLoop</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip\">Zip</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">α₂</span> <span class=\"fn\">β₂</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L383-L385","name":"Std.Iterators.Zip.instIteratorCollectPartial","line":383,"kind":"instance","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.instIteratorCollectPartial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.instIteratorCollectPartial\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">instIteratorCollectPartial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollectPartial\">IteratorCollectPartial</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip\">Zip</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">α₂</span> <span class=\"fn\">β₂</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L379-L381","name":"Std.Iterators.Zip.instIteratorCollect","line":379,"kind":"instance","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.instIteratorCollect","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.instIteratorCollect\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">instIteratorCollect</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollect\">IteratorCollect</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip\">Zip</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">α₂</span> <span class=\"fn\">β₂</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L375-L377","name":"Std.Iterators.Zip.instProductive","line":375,"kind":"instance","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.instProductive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.instProductive\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">instProductive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip\">Zip</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">α₂</span> <span class=\"fn\">β₂</span>)</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L348-L373","name":"Std.Iterators.Zip.instProductivenessRelation","line":348,"kind":"def","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.instProductivenessRelation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.instProductivenessRelation\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">instProductivenessRelation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Internal/Termination.html#Std.Iterators.ProductivenessRelation\">ProductivenessRelation</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip\">Zip</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">α₂</span> <span class=\"fn\">β₂</span>)</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L340-L346","name":"Std.Iterators.Zip.rel₃_of_right","line":340,"kind":"theorem","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.rel₃_of_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.rel₃_of_right\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">rel₃_of_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">left</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">b'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">out</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">it</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleOutput\">IsPlausibleOutput</a></span> <span class=\"fn\">out</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it' </span><span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.finitelyManySkips\">finitelyManySkips</a></span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.Rel\">Rel</a></span> <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.finitelyManySkips\">finitelyManySkips</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.Rel₃\">Rel₃</a> <span class=\"fn\">m</span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">{</a> <span class=\"fn\">internalState</span> := <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">{</a> <span class=\"fn\">left</span> := <span class=\"fn\">left</span>, <span class=\"fn\">memoizedLeft</span> := <span class=\"fn\">b'</span>, <span class=\"fn\">right</span> := <span class=\"fn\">it'</span> <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">}</a> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">}</a>\n  <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">{</a> <span class=\"fn\">internalState</span> := <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">{</a> <span class=\"fn\">left</span> := <span class=\"fn\">left</span>, <span class=\"fn\">memoizedLeft</span> := <span class=\"fn\">b</span>, <span class=\"fn\">right</span> := <span class=\"fn\">it</span> <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">}</a> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L334-L338","name":"Std.Iterators.Zip.rel₃_of_left","line":334,"kind":"theorem","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.rel₃_of_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.rel₃_of_left\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">rel₃_of_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">left' </span><span class=\"fn\">left</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">out</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">it</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleOutput\">IsPlausibleOutput</a></span> <span class=\"fn\">out</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">right' </span><span class=\"fn\">right</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">left'</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.finitelyManySkips\">finitelyManySkips</a></span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.Rel\">Rel</a></span> <span class=\"fn\"><span class=\"fn\">left</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.finitelyManySkips\">finitelyManySkips</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.Rel₃\">Rel₃</a> <span class=\"fn\">m</span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">{</a> <span class=\"fn\">internalState</span> := <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">{</a> <span class=\"fn\">left</span> := <span class=\"fn\">left'</span>, <span class=\"fn\">memoizedLeft</span> := <span class=\"fn\">b</span>, <span class=\"fn\">right</span> := <span class=\"fn\">right'</span> <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">}</a> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">}</a>\n  <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">{</a> <span class=\"fn\">internalState</span> := <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">{</a> <span class=\"fn\">left</span> := <span class=\"fn\">left</span>, <span class=\"fn\">memoizedLeft</span> := <span class=\"fn\">b</span>, <span class=\"fn\">right</span> := <span class=\"fn\">right</span> <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">}</a> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L329-L332","name":"Std.Iterators.Zip.rel₃_of_memoizedLeft","line":329,"kind":"theorem","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.rel₃_of_memoizedLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.rel₃_of_memoizedLeft\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">rel₃_of_memoizedLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it' </span><span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> (<span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β₂</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Internal.Option.SomeLtNone.lt\">Internal.Option.SomeLtNone.lt</a> <a href=\"./Init/Core.html#emptyRelation\">emptyRelation</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.memoizedLeft\">memoizedLeft</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.memoizedLeft\">memoizedLeft</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.Rel₃\">Rel₃</a> <span class=\"fn\">m</span> <span class=\"fn\">it'</span> <span class=\"fn\">it</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L322-L327","name":"Std.Iterators.Zip.Rel₃","line":322,"kind":"def","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.Rel₃","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.Rel₃\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">Rel₃</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> (<span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β₂</span>)</span> → <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> (<span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β₂</span>)</span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L317-L319","name":"Std.Iterators.Zip.instFinite₂","line":317,"kind":"instance","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.instFinite₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.instFinite₂\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">instFinite₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip\">Zip</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">α₂</span> <span class=\"fn\">β₂</span>)</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L281-L315","name":"Std.Iterators.Zip.instFinitenessRelation₂","line":281,"kind":"def","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.instFinitenessRelation₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.instFinitenessRelation₂\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">instFinitenessRelation₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Internal/Termination.html#Std.Iterators.FinitenessRelation\">FinitenessRelation</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip\">Zip</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">α₂</span> <span class=\"fn\">β₂</span>)</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L273-L279","name":"Std.Iterators.Zip.rel₂_of_left","line":273,"kind":"theorem","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.rel₂_of_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.rel₂_of_left\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">rel₂_of_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">right</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">b'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">out</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">it</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleOutput\">IsPlausibleOutput</a></span> <span class=\"fn\">out</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it' </span><span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.finitelyManySkips\">finitelyManySkips</a></span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.Rel\">Rel</a></span> <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.finitelyManySkips\">finitelyManySkips</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.Rel₂\">Rel₂</a> <span class=\"fn\">m</span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">{</a> <span class=\"fn\">internalState</span> := <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">{</a> <span class=\"fn\">left</span> := <span class=\"fn\">it'</span>, <span class=\"fn\">memoizedLeft</span> := <span class=\"fn\">b'</span>, <span class=\"fn\">right</span> := <span class=\"fn\">right</span> <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">}</a> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">}</a>\n  <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">{</a> <span class=\"fn\">internalState</span> := <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">{</a> <span class=\"fn\">left</span> := <span class=\"fn\">it</span>, <span class=\"fn\">memoizedLeft</span> := <span class=\"fn\">b</span>, <span class=\"fn\">right</span> := <span class=\"fn\">right</span> <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">}</a> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L267-L271","name":"Std.Iterators.Zip.rel₂_of_memoizedLeft","line":267,"kind":"theorem","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.rel₂_of_memoizedLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.rel₂_of_memoizedLeft\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">rel₂_of_memoizedLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">right</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b' </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">out</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">it</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleOutput\">IsPlausibleOutput</a></span> <span class=\"fn\">out</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">left' </span><span class=\"fn\">left</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Internal.Option.SomeLtNone.lt\">Internal.Option.SomeLtNone.lt</a> <a href=\"./Init/Core.html#emptyRelation\">emptyRelation</a> <span class=\"fn\">b'</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.Rel₂\">Rel₂</a> <span class=\"fn\">m</span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">{</a> <span class=\"fn\">internalState</span> := <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">{</a> <span class=\"fn\">left</span> := <span class=\"fn\">left</span>, <span class=\"fn\">memoizedLeft</span> := <span class=\"fn\">b'</span>, <span class=\"fn\">right</span> := <span class=\"fn\">right</span> <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">}</a> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">}</a>\n  <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">{</a> <span class=\"fn\">internalState</span> := <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">{</a> <span class=\"fn\">left</span> := <span class=\"fn\">left'</span>, <span class=\"fn\">memoizedLeft</span> := <span class=\"fn\">b</span>, <span class=\"fn\">right</span> := <span class=\"fn\">right</span> <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">}</a> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L263-L265","name":"Std.Iterators.Zip.rel₂_of_right","line":263,"kind":"theorem","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.rel₂_of_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.rel₂_of_right\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">rel₂_of_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it' </span><span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> (<span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β₂</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.right\">right</a></span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.finitelyManySteps\">finitelyManySteps</a></span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.Rel\">Rel</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.right\">right</a></span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.finitelyManySteps\">finitelyManySteps</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.Rel₂\">Rel₂</a> <span class=\"fn\">m</span> <span class=\"fn\">it'</span> <span class=\"fn\">it</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L256-L261","name":"Std.Iterators.Zip.Rel₂","line":256,"kind":"def","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.Rel₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.Rel₂\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">Rel₂</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> (<span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β₂</span>)</span> → <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> (<span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β₂</span>)</span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L251-L253","name":"Std.Iterators.Zip.instFinite₁","line":251,"kind":"instance","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.instFinite₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.instFinite₁\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">instFinite₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip\">Zip</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">α₂</span> <span class=\"fn\">β₂</span>)</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L215-L249","name":"Std.Iterators.Zip.instFinitenessRelation₁","line":215,"kind":"def","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.instFinitenessRelation₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.instFinitenessRelation₁\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">instFinitenessRelation₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Internal/Termination.html#Std.Iterators.FinitenessRelation\">FinitenessRelation</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip\">Zip</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">α₂</span> <span class=\"fn\">β₂</span>)</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L207-L213","name":"Std.Iterators.Zip.rel₁_of_right","line":207,"kind":"theorem","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.rel₁_of_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.rel₁_of_right\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">rel₁_of_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">left</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">b'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">out</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">it</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleOutput\">IsPlausibleOutput</a></span> <span class=\"fn\">out</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it' </span><span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.finitelyManySkips\">finitelyManySkips</a></span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.Rel\">Rel</a></span> <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.finitelyManySkips\">finitelyManySkips</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.Rel₁\">Rel₁</a> <span class=\"fn\">m</span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">{</a> <span class=\"fn\">internalState</span> := <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">{</a> <span class=\"fn\">left</span> := <span class=\"fn\">left</span>, <span class=\"fn\">memoizedLeft</span> := <span class=\"fn\">b'</span>, <span class=\"fn\">right</span> := <span class=\"fn\">it'</span> <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">}</a> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">}</a>\n  <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">{</a> <span class=\"fn\">internalState</span> := <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">{</a> <span class=\"fn\">left</span> := <span class=\"fn\">left</span>, <span class=\"fn\">memoizedLeft</span> := <span class=\"fn\">b</span>, <span class=\"fn\">right</span> := <span class=\"fn\">it</span> <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">}</a> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L201-L205","name":"Std.Iterators.Zip.rel₁_of_memoizedLeft","line":201,"kind":"theorem","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.rel₁_of_memoizedLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.rel₁_of_memoizedLeft\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">rel₁_of_memoizedLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">left</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b' </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">out</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">it</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleOutput\">IsPlausibleOutput</a></span> <span class=\"fn\">out</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">right' </span><span class=\"fn\">right</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/Option/Basic.html#Option.lt\">Option.lt</a> <a href=\"./Init/Core.html#emptyRelation\">emptyRelation</a> <span class=\"fn\">b'</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.Rel₁\">Rel₁</a> <span class=\"fn\">m</span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">{</a> <span class=\"fn\">internalState</span> := <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">{</a> <span class=\"fn\">left</span> := <span class=\"fn\">left</span>, <span class=\"fn\">memoizedLeft</span> := <span class=\"fn\">b'</span>, <span class=\"fn\">right</span> := <span class=\"fn\">right'</span> <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">}</a> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">}</a>\n  <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">{</a> <span class=\"fn\">internalState</span> := <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">{</a> <span class=\"fn\">left</span> := <span class=\"fn\">left</span>, <span class=\"fn\">memoizedLeft</span> := <span class=\"fn\">b</span>, <span class=\"fn\">right</span> := <span class=\"fn\">right</span> <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">}</a> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L196-L199","name":"Std.Iterators.Zip.rel₁_of_left","line":196,"kind":"theorem","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.rel₁_of_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.rel₁_of_left\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">rel₁_of_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it' </span><span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> (<span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β₂</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.left\">left</a></span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.finitelyManySteps\">finitelyManySteps</a></span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.Rel\">Rel</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.left\">left</a></span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.finitelyManySteps\">finitelyManySteps</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.Rel₁\">Rel₁</a> <span class=\"fn\">m</span> <span class=\"fn\">it'</span> <span class=\"fn\">it</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L189-L194","name":"Std.Iterators.Zip.Rel₁","line":189,"kind":"def","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.Rel₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.Rel₁\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">Rel₁</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> (<span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β₂</span>)</span> → <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> (<span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β₂</span>)</span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L152-L186","name":"Std.Iterators.IterM.zip","line":152,"kind":"def","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.IterM.zip","doc":"Given two iterators `left` and `right`, `left.zip right` is an iterator that yields pairs of\noutputs of `left` and `right`. When one of them terminates,\nthe `zip` iterator will also terminate.\n\n**Marble diagram:**\n\n```text\nleft               --a        ---b        --c\nright                 --x         --y        --⊥\nleft.zip right     -----(a, x)------(b, y)-----⊥\n```\n\n**Termination properties:**\n\n* `Finite` instance: only if either `left` or `right` is finite and the other is productive\n* `Productive` instance: only if `left` and `right` are productive\n\nThere are situations where `left.zip right` is finite (or productive) but none of the instances\nabove applies. For example, if the computation happens in an `Except` monad and `left` immediately\nfails when calling `step`, then `left.zip right` will also do so. In such a case, the `Finite`\n(or `Productive`) instance needs to be proved manually.\n\n**Performance:**\n\nThis combinator incurs an additional O(1) cost with each step taken by `left` or `right`.\n\nRight now, the compiler does not unbox the internal state, leading to worse performance than\npossible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.IterM.zip\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">zip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">left</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">right</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> (<span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β₂</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L130-L150","name":"Std.Iterators.Zip.instIterator","line":130,"kind":"instance","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.instIterator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.instIterator\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">instIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip\">Zip</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">α₂</span> <span class=\"fn\">β₂</span>)</span> <span class=\"fn\">m</span> (<span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β₂</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L126-L128","name":"Std.Iterators.Zip.PlausibleStep.doneRight","line":126,"kind":"ctor","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.PlausibleStep.doneRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.PlausibleStep.doneRight\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">PlausibleStep</span>.<span class=\"name\">doneRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> (<span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β₂</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out₁</span> : <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">out</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">it</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleOutput\">IsPlausibleOutput</a></span> <span class=\"fn\">out</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.memoizedLeft\">memoizedLeft</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">out₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.right\">right</a></span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.done\">IterStep.done</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.PlausibleStep\">PlausibleStep</a> <span class=\"fn\">it</span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.done\">IterStep.done</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L123-L125","name":"Std.Iterators.Zip.PlausibleStep.skipRight","line":123,"kind":"ctor","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.PlausibleStep.skipRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.PlausibleStep.skipRight\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">PlausibleStep</span>.<span class=\"name\">skipRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> (<span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β₂</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out₁</span> : <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">out</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">it</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleOutput\">IsPlausibleOutput</a></span> <span class=\"fn\">out</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.memoizedLeft\">memoizedLeft</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">out₁</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it₂'</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.right\">right</a></span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <span class=\"fn\">it₂'</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.PlausibleStep\">PlausibleStep</a> <span class=\"fn\">it</span>\n  <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">{</a> <span class=\"fn\">internalState</span> := <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">{</a> <span class=\"fn\">left</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.left\">left</a></span>, <span class=\"fn\">memoizedLeft</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">out₁</span></span>, <span class=\"fn\">right</span> := <span class=\"fn\">it₂'</span> <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">}</a> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">}</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L120-L122","name":"Std.Iterators.Zip.PlausibleStep.yieldRight","line":120,"kind":"ctor","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.PlausibleStep.yieldRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.PlausibleStep.yieldRight\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">PlausibleStep</span>.<span class=\"name\">yieldRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> (<span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β₂</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out₁</span> : <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">out</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">it</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleOutput\">IsPlausibleOutput</a></span> <span class=\"fn\">out</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.memoizedLeft\">memoizedLeft</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">out₁</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it₂'</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out₂</span> : <span class=\"fn\">β₂</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.right\">right</a></span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <span class=\"fn\">it₂'</span> <span class=\"fn\">out₂</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.PlausibleStep\">PlausibleStep</a> <span class=\"fn\">it</span>\n  <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">{</a> <span class=\"fn\">internalState</span> := <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">{</a> <span class=\"fn\">left</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.left\">left</a></span>, <span class=\"fn\">memoizedLeft</span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>, <span class=\"fn\">right</span> := <span class=\"fn\">it₂'</span> <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">}</a> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">}</a>\n    <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">out₁</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">out₂</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L117-L119","name":"Std.Iterators.Zip.PlausibleStep.doneLeft","line":117,"kind":"ctor","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.PlausibleStep.doneLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.PlausibleStep.doneLeft\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">PlausibleStep</span>.<span class=\"name\">doneLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> (<span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β₂</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.memoizedLeft\">memoizedLeft</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.left\">left</a></span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.done\">IterStep.done</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.PlausibleStep\">PlausibleStep</a> <span class=\"fn\">it</span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.done\">IterStep.done</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L114-L116","name":"Std.Iterators.Zip.PlausibleStep.skipLeft","line":114,"kind":"ctor","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.PlausibleStep.skipLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.PlausibleStep.skipLeft\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">PlausibleStep</span>.<span class=\"name\">skipLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> (<span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β₂</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.memoizedLeft\">memoizedLeft</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.left\">left</a></span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <span class=\"fn\">it'</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.PlausibleStep\">PlausibleStep</a> <span class=\"fn\">it</span>\n  <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">{</a> <span class=\"fn\">internalState</span> := <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">{</a> <span class=\"fn\">left</span> := <span class=\"fn\">it'</span>, <span class=\"fn\">memoizedLeft</span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>, <span class=\"fn\">right</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.right\">right</a></span> <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">}</a> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">}</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L111-L113","name":"Std.Iterators.Zip.PlausibleStep.yieldLeft","line":111,"kind":"ctor","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.PlausibleStep.yieldLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.PlausibleStep.yieldLeft\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">PlausibleStep</span>.<span class=\"name\">yieldLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> (<span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β₂</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.memoizedLeft\">memoizedLeft</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out</span> : <span class=\"fn\">β₁</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.left\">left</a></span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <span class=\"fn\">it'</span> <span class=\"fn\">out</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.PlausibleStep\">PlausibleStep</a> <span class=\"fn\">it</span>\n  <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">{</a> <span class=\"fn\">internalState</span> := <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">{</a> <span class=\"fn\">left</span> := <span class=\"fn\">it'</span>, <span class=\"fn\">memoizedLeft</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\">out</span>, <span class=\"fn\">⋯</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a></span>, <span class=\"fn\">right</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.right\">right</a></span> <a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\">}</a> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">}</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L104-L128","name":"Std.Iterators.Zip.PlausibleStep","line":104,"kind":"inductive","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.PlausibleStep","doc":"`it.PlausibleStep step` is the proposition that `step` is a possible next step from the\n`zip` iterator `it`. This is mostly internally relevant, except if one needs to manually\nprove termination (`Finite` or `Productive` instances, for example) of a `zip` iterator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.PlausibleStep\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">PlausibleStep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> (<span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β₂</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> (<span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β₂</span>))</span> (<span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β₂</span>)</span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L102-L102","name":"Std.Iterators.Zip.right","line":102,"kind":"def","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.right\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip\">Zip</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">α₂</span> <span class=\"fn\">β₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L101-L101","name":"Std.Iterators.Zip.memoizedLeft","line":101,"kind":"def","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.memoizedLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.memoizedLeft\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">memoizedLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip\">Zip</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">α₂</span> <span class=\"fn\">β₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">out</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">it</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleOutput\">IsPlausibleOutput</a></span> <span class=\"fn\">out</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L100-L100","name":"Std.Iterators.Zip.left","line":100,"kind":"def","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.left\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip\">Zip</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">α₂</span> <span class=\"fn\">β₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L99-L99","name":"Std.Iterators.Zip.mk","line":99,"kind":"ctor","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">left</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">memoizedLeft</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">out</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">it</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleOutput\">IsPlausibleOutput</a></span> <span class=\"fn\">out</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">right</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip\">Zip</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">α₂</span> <span class=\"fn\">β₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L95-L102","name":"Std.Iterators.Zip","line":95,"kind":"structure","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip","doc":"Internal state of the `zip` combinator. Do not depend on its internals.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Iterators.Zip\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Zip</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α₁</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β₁</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <span class=\"fn\">m</span> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> w</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L68-L84","name":"Std.Internal.Option.SomeLtNone.wellFounded_lt","line":68,"kind":"theorem","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Internal.Option.SomeLtNone.wellFounded_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Internal.Option.SomeLtNone.wellFounded_lt\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Option</span>.<span class=\"name\">SomeLtNone</span>.<span class=\"name\">wellFounded_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Internal.Option.SomeLtNone.lt\">lt</a> <span class=\"fn\">r</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L50-L66","name":"Std.Internal.Option.wellFounded_lt","line":50,"kind":"theorem","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Internal.Option.wellFounded_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Internal.Option.wellFounded_lt\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Option</span>.<span class=\"name\">wellFounded_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rel</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">rel</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">(<a href=\"./Init/Data/Option/Basic.html#Option.lt\">Option.lt</a> <span class=\"fn\">rel</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/Monadic/Zip.lean#L26-L45","name":"Std.Internal.Option.SomeLtNone.lt","line":26,"kind":"def","docLink":"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Internal.Option.SomeLtNone.lt","doc":"Lifts an ordering relation to `Option`, such that `none` is the greatest element.\n\nIt can be understood as adding a distinguished greatest element, represented by `none`, to both `α`\nand `β`.\n\nCaution: Given `LT α`, `Option.SomeLtNone.lt LT.lt` differs from the `LT (Option α)` instance,\nwhich is implemented by `Option.lt Lt.lt`.\n\nExamples:\n * `Option.lt (fun n k : Nat => n < k) none none = False`\n * `Option.lt (fun n k : Nat => n < k) none (some 3) = False`\n * `Option.lt (fun n k : Nat => n < k) (some 3) none = True`\n * `Option.lt (fun n k : Nat => n < k) (some 4) (some 5) = True`\n * `Option.lt (fun n k : Nat => n < k) (some 4) (some 4) = False`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/Zip.html#Std.Internal.Option.SomeLtNone.lt\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Option</span>.<span class=\"name\">SomeLtNone</span>.<span class=\"name\">lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"}]}