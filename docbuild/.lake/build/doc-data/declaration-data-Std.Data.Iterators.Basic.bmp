{"name":"Std.Data.Iterators.Basic","instances":[{"typeNames":["Std.Iterators.IterM.TerminationMeasures.Finite"],"name":"Std.Iterators.instWellFoundedRelationFiniteOfFinite","className":"WellFoundedRelation"},{"typeNames":["Std.Iterators.IterM.TerminationMeasures.Productive"],"name":"Std.Iterators.instWellFoundedRelationProductiveOfProductive","className":"WellFoundedRelation"},{"typeNames":[],"name":"Std.Iterators.instProductiveOfFinite","className":"Std.Iterators.Productive"}],"imports":["Init.Core","Init.Classical","Init.NotationExtra","Init.TacticsExtra"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L605-L610","name":"Std.Iterators.instProductiveOfFinite","line":605,"kind":"instance","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.instProductiveOfFinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.instProductiveOfFinite\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instProductiveOfFinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L592-L600","name":"Std.Iterators.Iter.TerminationMeasures.Productive.rel_of_skip","line":592,"kind":"theorem","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.TerminationMeasures.Productive.rel_of_skip","doc":"This theorem is used by a `decreasing_trivial` extension. It powers automatic termination proofs\nwith `Iter.finitelyManySkips`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.TerminationMeasures.Productive.rel_of_skip\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Productive</span>.<span class=\"name\">rel_of_skip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it </span><span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <span class=\"fn\">it'</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.mk\">{</a> <span class=\"fn\">it</span> := <span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\">toIterM</a></span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.mk\">}</a>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.Rel\">Rel</a></span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.mk\">{</a> <span class=\"fn\">it</span> := <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\">toIterM</a></span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L587-L590","name":"Std.Iterators.Iter.finitelyManySkips","line":587,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.finitelyManySkips","doc":"Termination measure to be used in well-founded recursive functions recursing over a productive\niterator (see also `Productive`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.finitelyManySkips\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">finitelyManySkips</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive\">IterM.TerminationMeasures.Productive</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L574-L582","name":"Std.Iterators.IterM.TerminationMeasures.Productive.rel_of_skip","line":574,"kind":"theorem","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.rel_of_skip","doc":"This theorem is used by a `decreasing_trivial` extension. It powers automatic termination proofs\nwith `IterM.finitelyManySkips`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.rel_of_skip\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Productive</span>.<span class=\"name\">rel_of_skip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it </span><span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <span class=\"fn\">it'</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.mk\">{</a> <span class=\"fn\">it</span> := <span class=\"fn\">it'</span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.mk\">}</a>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.Rel\">Rel</a></span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.mk\">{</a> <span class=\"fn\">it</span> := <span class=\"fn\">it</span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L566-L572","name":"Std.Iterators.IterM.finitelyManySkips","line":566,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.finitelyManySkips","doc":"Termination measure to be used in well-founded recursive functions recursing over a productive\niterator (see also `Productive`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.finitelyManySkips\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">finitelyManySkips</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive\">TerminationMeasures.Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L561-L564","name":"Std.Iterators.instWellFoundedRelationProductiveOfProductive","line":561,"kind":"instance","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.instWellFoundedRelationProductiveOfProductive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.instWellFoundedRelationProductiveOfProductive\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instWellFoundedRelationProductiveOfProductive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFoundedRelation\">WellFoundedRelation</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive\">IterM.TerminationMeasures.Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L552-L559","name":"Std.Iterators.IterM.TerminationMeasures.Productive.Rel","line":552,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.Rel","doc":"The relation of plausible successors while skipping on `IterM.TerminationMeasures.Productive`.\nIt is well-founded if there is a `Productive` instance.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.Rel\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Productive</span>.<span class=\"name\">Rel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive\">Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span> → <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive\">Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L550-L550","name":"Std.Iterators.IterM.TerminationMeasures.Productive.it","line":550,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.it","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.it\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Productive</span>.<span class=\"name\">it</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive\">Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L548-L548","name":"Std.Iterators.IterM.TerminationMeasures.Productive.mk","line":548,"kind":"ctor","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Productive</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive\">Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L544-L550","name":"Std.Iterators.IterM.TerminationMeasures.Productive","line":544,"kind":"structure","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive","doc":"This type is a wrapper around `IterM` so that it becomes a useful termination measure for\nrecursion over productive iterators. See also `IterM.finitelyManySkips` and `Iter.finitelyManySkips`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Productive\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Productive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> w</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L542-L542","name":"Std.Iterators.Productive.wf","line":542,"kind":"theorem","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive.wf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive.wf\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Productive</span>.<span class=\"name\">wf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleSkipSuccessorOf\">IterM.IsPlausibleSkipSuccessorOf</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L541-L541","name":"Std.Iterators.Productive.mk","line":541,"kind":"ctor","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Productive</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wf</span> : <span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleSkipSuccessorOf\">IterM.IsPlausibleSkipSuccessorOf</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L534-L542","name":"Std.Iterators.Productive","line":534,"kind":"class","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive","doc":"`Productive α m` asserts that `IterM (α := α) m` terminates or emits a value after finitely many\nskips. Technically, this means that the relation of plausible successors during skips is\nwell-founded.\nGiven this typeclass, termination proofs for well-founded recursion over an iterator `it` can use\n`it.finitelyManySkips` as a termination measure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Productive\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Productive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L524-L528","name":"Std.Iterators.IterM.isPlausibleSuccessorOf_of_skip","line":524,"kind":"theorem","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.isPlausibleSuccessorOf_of_skip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.isPlausibleSuccessorOf_of_skip\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">isPlausibleSuccessorOf_of_skip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it </span><span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <span class=\"fn\">it'</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleSuccessorOf\">IsPlausibleSuccessorOf</a></span> <span class=\"fn\">it</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L518-L522","name":"Std.Iterators.IterM.isPlausibleSuccessorOf_of_yield","line":518,"kind":"theorem","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.isPlausibleSuccessorOf_of_yield","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.isPlausibleSuccessorOf_of_yield\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">isPlausibleSuccessorOf_of_yield</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it' </span><span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <span class=\"fn\">it'</span> <span class=\"fn\">out</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleSuccessorOf\">IsPlausibleSuccessorOf</a></span> <span class=\"fn\">it</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L506-L511","name":"Std.Iterators.Iter.TerminationMeasures.Finite.rel_of_skip","line":506,"kind":"theorem","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.TerminationMeasures.Finite.rel_of_skip","doc":"This theorem is used by a `decreasing_trivial` extension. It powers automatic termination proofs\nwith `IterM.finitelyManySteps`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.TerminationMeasures.Finite.rel_of_skip\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Finite</span>.<span class=\"name\">rel_of_skip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it </span><span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <span class=\"fn\">it'</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">{</a> <span class=\"fn\">it</span> := <span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\">toIterM</a></span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">}</a>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.Rel\">Rel</a></span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">{</a> <span class=\"fn\">it</span> := <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\">toIterM</a></span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L496-L504","name":"Std.Iterators.Iter.TerminationMeasures.Finite.rel_of_yield","line":496,"kind":"theorem","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.TerminationMeasures.Finite.rel_of_yield","doc":"This theorem is used by a `decreasing_trivial` extension. It powers automatic termination proofs\nwith `IterM.finitelyManySteps`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.TerminationMeasures.Finite.rel_of_yield\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Finite</span>.<span class=\"name\">rel_of_yield</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it </span><span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <span class=\"fn\">it'</span> <span class=\"fn\">out</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">{</a> <span class=\"fn\">it</span> := <span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\">toIterM</a></span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">}</a>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.Rel\">Rel</a></span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">{</a> <span class=\"fn\">it</span> := <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\">toIterM</a></span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L491-L494","name":"Std.Iterators.Iter.finitelyManySteps","line":491,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.finitelyManySteps","doc":"Termination measure to be used in well-founded recursive functions recursing over a finite iterator\n(see also `Finite`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.finitelyManySteps\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">finitelyManySteps</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite\">IterM.TerminationMeasures.Finite</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L479-L484","name":"Std.Iterators.IterM.TerminationMeasures.Finite.rel_of_skip","line":479,"kind":"theorem","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.rel_of_skip","doc":"This theorem is used by a `decreasing_trivial` extension. It powers automatic termination proofs\nwith `IterM.finitelyManySteps`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.rel_of_skip\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Finite</span>.<span class=\"name\">rel_of_skip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it </span><span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <span class=\"fn\">it'</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">{</a> <span class=\"fn\">it</span> := <span class=\"fn\">it'</span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">}</a>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.Rel\">Rel</a></span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">{</a> <span class=\"fn\">it</span> := <span class=\"fn\">it</span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L469-L477","name":"Std.Iterators.IterM.TerminationMeasures.Finite.rel_of_yield","line":469,"kind":"theorem","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.rel_of_yield","doc":"This theorem is used by a `decreasing_trivial` extension. It powers automatic termination proofs\nwith `IterM.finitelyManySteps`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.rel_of_yield\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Finite</span>.<span class=\"name\">rel_of_yield</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it </span><span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <span class=\"fn\">it'</span> <span class=\"fn\">out</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">{</a> <span class=\"fn\">it</span> := <span class=\"fn\">it'</span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">}</a>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.Rel\">Rel</a></span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">{</a> <span class=\"fn\">it</span> := <span class=\"fn\">it</span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L461-L467","name":"Std.Iterators.IterM.finitelyManySteps","line":461,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.finitelyManySteps","doc":"Termination measure to be used in well-founded recursive functions recursing over a finite iterator\n(see also `Finite`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.finitelyManySteps\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">finitelyManySteps</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite\">TerminationMeasures.Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L456-L459","name":"Std.Iterators.instWellFoundedRelationFiniteOfFinite","line":456,"kind":"instance","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.instWellFoundedRelationFiniteOfFinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.instWellFoundedRelationFiniteOfFinite\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instWellFoundedRelationFiniteOfFinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFoundedRelation\">WellFoundedRelation</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite\">IterM.TerminationMeasures.Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L447-L454","name":"Std.Iterators.IterM.TerminationMeasures.Finite.Rel","line":447,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.Rel","doc":"The relation of plausible successors on `IterM.TerminationMeasures.Finite`. It is well-founded\nif there is a `Finite` instance.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.Rel\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Finite</span>.<span class=\"name\">Rel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite\">Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span> → <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite\">Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L445-L445","name":"Std.Iterators.IterM.TerminationMeasures.Finite.it","line":445,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.it","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.it\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Finite</span>.<span class=\"name\">it</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite\">Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L443-L443","name":"Std.Iterators.IterM.TerminationMeasures.Finite.mk","line":443,"kind":"ctor","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Finite</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite\">Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L439-L445","name":"Std.Iterators.IterM.TerminationMeasures.Finite","line":439,"kind":"structure","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite","doc":"This type is a wrapper around `IterM` so that it becomes a useful termination measure for\nrecursion over finite iterators. See also `IterM.finitelyManySteps` and `Iter.finitelyManySteps`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.TerminationMeasures.Finite\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">TerminationMeasures</span>.<span class=\"name\">Finite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> w</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L437-L437","name":"Std.Iterators.Finite.wf","line":437,"kind":"theorem","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Finite.wf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Finite.wf\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Finite</span>.<span class=\"name\">wf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleSuccessorOf\">IterM.IsPlausibleSuccessorOf</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L436-L436","name":"Std.Iterators.Finite.mk","line":436,"kind":"ctor","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Finite.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Finite.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Finite</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wf</span> : <span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleSuccessorOf\">IterM.IsPlausibleSuccessorOf</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L430-L437","name":"Std.Iterators.Finite","line":430,"kind":"class","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Finite","doc":"`Finite α m` asserts that `IterM (α := α) m` terminates after finitely many steps. Technically,\nthis means that the relation of plausible successors is well-founded.\nGiven this typeclass, termination proofs for well-founded recursion over an iterator `it` can use\n`it.finitelyManySteps` as a termination measure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Finite\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Finite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L417-L424","name":"Std.Iterators.Iter.step","line":417,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.step","doc":"Makes a single step with the given iterator `it`, potentially emitting a value and providing a\nsucceeding iterator. If this function is used recursively, termination can sometimes be proved with\nthe termination measures `it.finitelyManySteps` and `it.finitelyManySkips`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.step\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.Step\">Step</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L409-L415","name":"Std.Iterators.Iter.IsPlausibleSkipSuccessorOf","line":409,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleSkipSuccessorOf","doc":"Asserts that a certain iterator `it'` could plausibly be the directly succeeding iterator of another\ngiven iterator `it` while no value is emitted (see `IterStep.skip`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleSkipSuccessorOf\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">IsPlausibleSkipSuccessorOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it' </span><span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L401-L407","name":"Std.Iterators.Iter.IsPlausibleSuccessorOf","line":401,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleSuccessorOf","doc":"Asserts that a certain iterator `it'` could plausibly be the directly succeeding iterator of another\ngiven iterator `it`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleSuccessorOf\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">IsPlausibleSuccessorOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it' </span><span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L393-L399","name":"Std.Iterators.Iter.IsPlausibleOutput","line":393,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleOutput","doc":"Asserts that a certain output value could plausibly be emitted by the given iterator in its next\nstep.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleOutput\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">IsPlausibleOutput</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">out</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L388-L391","name":"Std.Iterators.IterM.Step.toPure_done","line":388,"kind":"theorem","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.Step.toPure_done","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.Step.toPure_done\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">Step</span>.<span class=\"name\">toPure_done</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.done\">IterStep.done</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.Step.toPure\">toPure</a> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.done\">IterStep.done</a>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.done\">PlausibleIterStep.done</a> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L383-L386","name":"Std.Iterators.IterM.Step.toPure_skip","line":383,"kind":"theorem","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.Step.toPure_skip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.Step.toPure_skip\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">Step</span>.<span class=\"name\">toPure_skip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it </span><span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <span class=\"fn\">it'</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.Step.toPure\">toPure</a> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <span class=\"fn\">it'</span></span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.skip\">PlausibleIterStep.skip</a> <span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.toIter\">toIter</a></span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L378-L381","name":"Std.Iterators.IterM.Step.toPure_yield","line":378,"kind":"theorem","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.Step.toPure_yield","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.Step.toPure_yield\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">Step</span>.<span class=\"name\">toPure_yield</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it </span><span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <span class=\"fn\">it'</span> <span class=\"fn\">out</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.Step.toPure\">toPure</a> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <span class=\"fn\">it'</span> <span class=\"fn\">out</span></span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.yield\">PlausibleIterStep.yield</a> <span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.toIter\">toIter</a></span> <span class=\"fn\">out</span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L370-L376","name":"Std.Iterators.IterM.Step.toPure","line":370,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.Step.toPure","doc":"Converts an `IterM.Step` into an `Iter.Step`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.Step.toPure\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">Step</span>.<span class=\"name\">toPure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> : <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.Step\">Step</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.toIter\">toIter</a></span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.Step\">Step</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L362-L368","name":"Std.Iterators.Iter.Step.toMonadic","line":362,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.Step.toMonadic","doc":"Converts an `Iter.Step` into an `IterM.Step`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.Step.toMonadic\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">Step</span>.<span class=\"name\">toMonadic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> : <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.Step\">Step</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\">toIterM</a></span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.Step\">Step</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L355-L360","name":"Std.Iterators.Iter.Step","line":355,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.Step","doc":"The type of the step object returned by `Iter.step`, containing an `IterStep`\nand a proof that this is a plausible step for the given iterator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.Step\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">Step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> w</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L347-L353","name":"Std.Iterators.Iter.IsPlausibleStep","line":347,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleStep","doc":"Asserts that certain step is plausibly the successor of a given iterator. What \"plausible\" means\nis up to the `Iterator` instance but it should be strong enough to allow termination proofs.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleStep\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">IsPlausibleStep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span>)</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L333-L341","name":"Std.Iterators.IterM.step","line":333,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.step","doc":"Makes a single step with the given iterator `it`, potentially emitting a value and providing a\nsucceeding iterator. If this function is used recursively, termination can sometimes be proved with\nthe termination measures `it.finitelyManySteps` and `it.finitelyManySkips`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.step\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.Step\">Step</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L325-L331","name":"Std.Iterators.IterM.IsPlausibleSkipSuccessorOf","line":325,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleSkipSuccessorOf","doc":"Asserts that a certain iterator `it'` could plausibly be the directly succeeding iterator of another\ngiven iterator `it` while no value is emitted (see `IterStep.skip`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleSkipSuccessorOf\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">IsPlausibleSkipSuccessorOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it' </span><span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L317-L323","name":"Std.Iterators.IterM.IsPlausibleSuccessorOf","line":317,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleSuccessorOf","doc":"Asserts that a certain iterator `it'` could plausibly be the directly succeeding iterator of another\ngiven iterator `it`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleSuccessorOf\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">IsPlausibleSuccessorOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it' </span><span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L309-L315","name":"Std.Iterators.IterM.IsPlausibleOutput","line":309,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleOutput","doc":"Asserts that a certain output value could plausibly be emitted by the given iterator in its next\nstep.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleOutput\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">IsPlausibleOutput</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">out</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L301-L307","name":"Std.Iterators.IterM.Step","line":301,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.Step","doc":"The type of the step object returned by `IterM.step`, containing an `IterStep`\nand a proof that this is a plausible step for the given iterator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.Step\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">Step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> w</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L293-L299","name":"Std.Iterators.IterM.IsPlausibleStep","line":293,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep","doc":"Asserts that certain step is plausibly the successor of a given iterator. What \"plausible\" means\nis up to the `Iterator` instance but it should be strong enough to allow termination proofs.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">IsPlausibleStep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L288-L291","name":"Std.Iterators.internalState_toIterM","line":288,"kind":"theorem","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.internalState_toIterM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.internalState_toIterM\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">internalState_toIterM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.toIterM\">toIterM</a> <span class=\"fn\">it</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span>)</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">it</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L283-L286","name":"Std.Iterators.toIterM_internalState","line":283,"kind":"theorem","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.toIterM_internalState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.toIterM_internalState\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">toIterM_internalState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.toIterM\">toIterM</a> <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">it</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L275-L281","name":"Std.Iterators.toIterM","line":275,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.toIterM","doc":"Converts wraps the state of an iterator into an `IterM` object.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.toIterM\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">toIterM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L271-L271","name":"Std.Iterators.Iterator.step","line":271,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator.step","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator.step\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep\">PlausibleIterStep</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator.IsPlausibleStep\">IsPlausibleStep</a> <span class=\"fn\">it</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L270-L270","name":"Std.Iterators.Iterator.IsPlausibleStep","line":270,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator.IsPlausibleStep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator.IsPlausibleStep\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">IsPlausibleStep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L269-L269","name":"Std.Iterators.Iterator.mk","line":269,"kind":"ctor","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">IsPlausibleStep</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> : <span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>) → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep\">PlausibleIterStep</a> <span class=\"fn\">(<span class=\"fn\">IsPlausibleStep</span> <span class=\"fn\">it</span>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L262-L271","name":"Std.Iterators.Iterator","line":262,"kind":"class","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator","doc":"The typeclass providing the step function of an iterator in `Iter (α := α) β` or\n`IterM (α := α) m β`.\n\nIn order to allow intrinsic termination proofs when iterating with the `step` function, the\nstep object is bundled with a proof that it is a \"plausible\" step for the given current iterator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iterator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max w w')</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L246-L258","name":"Std.Iterators.PlausibleIterStep.casesOn","line":246,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.casesOn","doc":"A more convenient `cases` eliminator for `PlausibleIterStep`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.casesOn\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">PlausibleIterStep</span>.<span class=\"name\">casesOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">IsPlausibleStep</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">motive</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep\">PlausibleIterStep</a> <span class=\"fn\">IsPlausibleStep</span></span> → <a href=\"./foundational_types.html\">Sort</a> x</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep\">PlausibleIterStep</a> <span class=\"fn\">IsPlausibleStep</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">yield</span> : <span class=\"fn\">(<span class=\"fn\">it'</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">out</span> : <span class=\"fn\">β</span>) → <span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">IsPlausibleStep</span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <span class=\"fn\">it'</span> <span class=\"fn\">out</span>)</span></span>) → <span class=\"fn\"><span class=\"fn\">motive</span> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <span class=\"fn\">it'</span> <span class=\"fn\">out</span></span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">skip</span> : <span class=\"fn\">(<span class=\"fn\">it'</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">IsPlausibleStep</span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <span class=\"fn\">it'</span>)</span></span>) → <span class=\"fn\"><span class=\"fn\">motive</span> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <span class=\"fn\">it'</span></span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">done</span> : <span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">IsPlausibleStep</span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.done\">IterStep.done</a></span>) → <span class=\"fn\"><span class=\"fn\">motive</span> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.done\">IterStep.done</a>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L238-L244","name":"Std.Iterators.PlausibleIterStep.done","line":238,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.done","doc":"Match pattern for the `done` case. See also `IterStep.done`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.done\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">PlausibleIterStep</span>.<span class=\"name\">done</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">IsPlausibleStep</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">IsPlausibleStep</span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.done\">IterStep.done</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep\">PlausibleIterStep</a> <span class=\"fn\">IsPlausibleStep</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L230-L236","name":"Std.Iterators.PlausibleIterStep.skip","line":230,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.skip","doc":"Match pattern for the `skip` case. See also `IterStep.skip`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.skip\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">PlausibleIterStep</span>.<span class=\"name\">skip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">IsPlausibleStep</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it'</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">IsPlausibleStep</span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <span class=\"fn\">it'</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep\">PlausibleIterStep</a> <span class=\"fn\">IsPlausibleStep</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L221-L228","name":"Std.Iterators.PlausibleIterStep.yield","line":221,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.yield","doc":"Match pattern for the `yield` case. See also `IterStep.yield`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.yield\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">PlausibleIterStep</span>.<span class=\"name\">yield</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">IsPlausibleStep</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it'</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">out</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">IsPlausibleStep</span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <span class=\"fn\">it'</span> <span class=\"fn\">out</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep\">PlausibleIterStep</a> <span class=\"fn\">IsPlausibleStep</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L212-L219","name":"Std.Iterators.PlausibleIterStep","line":212,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep","doc":"A variant of `IterStep` that bundles the step together with a proof that it is \"plausible\".\nThe plausibility predicate will later be chosen to assert that a state is a plausible successor\nof another state. Having this proof bundled up with the step is important for termination proofs.\n\nSee `IterM.Step` and `Iter.Step` for the concrete choice of the plausibility predicate.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">PlausibleIterStep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">IsPlausibleStep</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max 0 u w)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L207-L210","name":"Std.Iterators.IterStep.mapIterator_id","line":207,"kind":"theorem","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator_id\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterStep</span>.<span class=\"name\">mapIterator_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">step</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator\">mapIterator</a> <a href=\"./Init/Prelude.html#id\">id</a> <span class=\"fn\">step</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">step</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L201-L205","name":"Std.Iterators.IterStep.mapIterator_mapIterator","line":201,"kind":"theorem","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator_mapIterator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator_mapIterator\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterStep</span>.<span class=\"name\">mapIterator_mapIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α'</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α''</span> : <a href=\"./foundational_types.html\">Type</a> u''}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α'</span> → <span class=\"fn\">α''</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">step</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator\">mapIterator</a> <span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator\">mapIterator</a> <span class=\"fn\">f</span> <span class=\"fn\">step</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator\">mapIterator</a> (<span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>) <span class=\"fn\">step</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L196-L199","name":"Std.Iterators.IterStep.mapIterator_done","line":196,"kind":"theorem","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator_done","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator_done\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterStep</span>.<span class=\"name\">mapIterator_done</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α'</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α'</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator\">mapIterator</a> <span class=\"fn\">f</span> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.done\">done</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.done\">done</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L191-L194","name":"Std.Iterators.IterStep.mapIterator_skip","line":191,"kind":"theorem","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator_skip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator_skip\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterStep</span>.<span class=\"name\">mapIterator_skip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α'</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator\">mapIterator</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">skip</a> <span class=\"fn\">it</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">skip</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">it</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L186-L189","name":"Std.Iterators.IterStep.mapIterator_yield","line":186,"kind":"theorem","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator_yield","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator_yield\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterStep</span>.<span class=\"name\">mapIterator_yield</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α'</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator\">mapIterator</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">yield</a> <span class=\"fn\">it</span> <span class=\"fn\">out</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">yield</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">it</span>)</span> <span class=\"fn\">out</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L176-L184","name":"Std.Iterators.IterStep.mapIterator","line":176,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator","doc":"If present, applies `f` to the iterator of an `IterStep` and replaces the iterator\nwith the result of the application of `f`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterStep</span>.<span class=\"name\">mapIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α'</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">α'</span> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L167-L174","name":"Std.Iterators.IterStep.successor","line":167,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.successor","doc":"Returns the succeeding iterator stored in an iterator step or `none` if the step is `.done`\nand the iterator has finished.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.successor\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterStep</span>.<span class=\"name\">successor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L161-L165","name":"Std.Iterators.IterStep.done","line":161,"kind":"ctor","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.done","doc":"`IterStep.done` describes the situation that an iterator has finished and will neither emit\nmore values nor cause any monadic effects. In this case, no succeeding iterator is provided.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.done\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterStep</span>.<span class=\"name\">done</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L154-L160","name":"Std.Iterators.IterStep.skip","line":154,"kind":"ctor","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip","doc":"`IterStep.skip it` describes the situation that an iterator does not emit anything in this\niteration and provides `it'` as the succeeding iterator.\n\nAllowing `skip` steps is necessary to generate efficient code from a loop over an iterator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterStep</span>.<span class=\"name\">skip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L149-L153","name":"Std.Iterators.IterStep.yield","line":149,"kind":"ctor","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield","doc":"`IterStep.yield it out` describes the situation that an iterator emits `out` and provides `it`\nas the succeeding iterator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterStep</span>.<span class=\"name\">yield</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">out</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L145-L165","name":"Std.Iterators.IterStep","line":145,"kind":"inductive","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep","doc":"`IterStep α β` represents a step taken by an iterator (`Iter β` or `IterM m β`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterStep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Sort</a> (max (max 1 u_1) u_2)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L136-L139","name":"Std.Iterators.Iter.toIterM_comp_toIter","line":136,"kind":"theorem","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM_comp_toIter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM_comp_toIter\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">toIterM_comp_toIter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\">toIterM</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.toIter\">IterM.toIter</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#id\">id</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L131-L134","name":"Std.Iterators.Iter.toIterM_toIter","line":131,"kind":"theorem","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM_toIter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM_toIter\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">toIterM_toIter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.toIter\">toIter</a></span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\">toIterM</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">it</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L126-L129","name":"Std.Iterators.Iter.toIter_comp_toIterM","line":126,"kind":"theorem","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.toIter_comp_toIterM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.toIter_comp_toIterM\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">toIter_comp_toIterM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.toIter\">IterM.toIter</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\">toIterM</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#id\">id</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L121-L124","name":"Std.Iterators.Iter.toIter_toIterM","line":121,"kind":"theorem","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.toIter_toIterM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.toIter_toIterM\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">toIter_toIterM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\">toIterM</a></span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.toIter\">toIter</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">it</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L115-L119","name":"Std.Iterators.IterM.toIter","line":115,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.toIter","doc":"Converts a monadic iterator (`IterM Id β`) over `Id` into a pure iterator (`Iter β`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.toIter\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">toIter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L108-L113","name":"Std.Iterators.Iter.toIterM","line":108,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM","doc":"Converts a pure iterator (`Iter β`) into a monadic iterator (`IterM Id β`) in the\nidentity monad `Id`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">toIterM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L106-L106","name":"Std.Iterators.Iter.internalState","line":106,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.internalState","doc":"Internal implementation detail of the iterator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.internalState\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">internalState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L104-L104","name":"Std.Iterators.Iter.mk","line":104,"kind":"ctor","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">internalState</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L65-L106","name":"Std.Iterators.Iter","line":65,"kind":"structure","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter","doc":"An iterator that sequentially emits values of type `β`. It may be finite\nor infinite.\n\nSee the root module `Std.Data.Iterators` for a more comprehensive overview over the iterator\nframework.\n\nSee `Std.Data.Iterators.Producers` for ways to iterate over common data structures.\nBy convention, the monadic iterator associated with an object can be obtained via dot notation.\nFor example, `List.iterM IO` creates an iterator over a list in the monad `IO`.\n\nSee `Std.Data.Iterators.Consumers` for ways to use an iterator. For example, `it.toList` will\nconvert a provably finite iterator `it` into a list and `it.allowNontermination.toList` will\ndo so even if finiteness cannot be proved. It is also always possible to manually iterate using\n`it.step`, relying on the termination measures `it.finitelyManySteps` and `it.finitelyManySkips`.\n\nSee `IterM` for iterators that operate in a monad.\n\nInternally, `Iter β` wraps an element of type `α` containing state information.\nThe type `α` determines the implementation of the iterator using a typeclass mechanism.\nThe concrete typeclass implementing the iterator is `Iterator α m β`.\n\nWhen using combinators, `α` can become very complicated. It is an implicit parameter\nof `α` so that the pretty printer will not print this large type by default. If a declaration\nreturns an iterator, the following will not work:\n\n```lean\ndef x : Iter Nat := [1, 2, 3].iter\n```\n\nInstead the declaration type needs to be completely omitted:\n\n```lean\ndef x := [1, 2, 3].iter\n\n-- if you want to ensure that `x` is an iterator emitting `Nat`\ndef x := ([1, 2, 3].iter : Iter Nat)\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> w</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L63-L63","name":"Std.Iterators.IterM.internalState","line":63,"kind":"def","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState","doc":"Internal implementation detail of the iterator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">internalState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L61-L61","name":"Std.Iterators.IterM.mk","line":61,"kind":"ctor","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">internalState</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Basic.lean#L22-L63","name":"Std.Iterators.IterM","line":22,"kind":"structure","docLink":"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM","doc":"An iterator that sequentially emits values of type `β` in the monad `m`. It may be finite\nor infinite.\n\nSee the root module `Std.Data.Iterators` for a more comprehensive overview over the iterator\nframework.\n\nSee `Std.Data.Iterators.Producers` for ways to iterate over common data structures.\nBy convention, the monadic iterator associated with an object can be obtained via dot notation.\nFor example, `List.iterM IO` creates an iterator over a list in the monad `IO`.\n\nSee `Std.Data.Iterators.Consumers` for ways to use an iterator. For example, `it.toList` will\nconvert a provably finite iterator `it` into a list and `it.allowNontermination.toList` will\ndo so even if finiteness cannot be proved. It is also always possible to manually iterate using\n`it.step`, relying on the termination measures `it.finitelyManySteps` and `it.finitelyManySkips`.\n\nSee `Iter` for a more convenient interface in case that no monadic effects are needed (`m = Id`).\n\nInternally, `IterM m β` wraps an element of type `α` containing state information.\nThe type `α` determines the implementation of the iterator using a typeclass mechanism.\nThe concrete typeclass implementing the iterator is `Iterator α m β`.\n\nWhen using combinators, `α` can become very complicated. It is an implicit parameter\nof `α` so that the pretty printer will not print this large type by default. If a declaration\nreturns an iterator, the following will not work:\n\n```lean\ndef x : IterM IO Nat := [1, 2, 3].iterM IO\n```\n\nInstead the declaration type needs to be completely omitted:\n\n```lean\ndef x := [1, 2, 3].iterM IO\n\n-- if you want to ensure that `x` is an iterator in `IO` emitting `Nat`\ndef x := ([1, 2, 3].iterM IO : IterM IO Nat)\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> w</div></div>"}]}