{"name":"Lean.Compiler.LCNF.ToMono","instances":[],"imports":["Lean.Compiler.ExternAttr","Lean.Compiler.LCNF.MonoTypes","Lean.Compiler.LCNF.InferType","Lean.Compiler.NoncomputableAttr"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/ToMono.lean#L291-L295","name":"Lean.Compiler.LCNF.toMono","line":291,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.toMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/ToMono.lean#L283-L289","name":"Lean.Compiler.LCNF.Decl.toMono.go","line":283,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Decl.toMono.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Decl.toMono.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">toMono</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/ToMono.lean#L280-L289","name":"Lean.Compiler.LCNF.Decl.toMono","line":280,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Decl.toMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Decl.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/ToMono.lean#L234-L276","name":"Lean.Compiler.LCNF.Code.toMono","line":234,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Code.toMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Code.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/ToMono.lean#L220-L232","name":"Lean.Compiler.LCNF.trivialStructToMono","line":220,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.trivialStructToMono","doc":"Eliminate `cases` for trivial structure. See `hasTrivialStructure?` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.trivialStructToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">trivialStructToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo\">TrivialStructureInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/ToMono.lean#L209-L218","name":"Lean.Compiler.LCNF.casesStringToMono","line":209,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesStringToMono","doc":"Eliminate `cases` for `String. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesStringToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">casesStringToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases.typeName\">typeName</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">`String</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/ToMono.lean#L198-L207","name":"Lean.Compiler.LCNF.casesFloatArrayToMono","line":198,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesFloatArrayToMono","doc":"Eliminate `cases` for `FloatArray. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesFloatArrayToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">casesFloatArrayToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases.typeName\">typeName</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">`FloatArray</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/ToMono.lean#L187-L196","name":"Lean.Compiler.LCNF.casesByteArrayToMono","line":187,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesByteArrayToMono","doc":"Eliminate `cases` for `ByteArray. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesByteArrayToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">casesByteArrayToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases.typeName\">typeName</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">`ByteArray</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/ToMono.lean#L176-L185","name":"Lean.Compiler.LCNF.casesArrayToMono","line":176,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesArrayToMono","doc":"Eliminate `cases` for `Array. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesArrayToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">casesArrayToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases.typeName\">typeName</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">`Array</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/ToMono.lean#L165-L174","name":"Lean.Compiler.LCNF.casesUIntToMono","line":165,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesUIntToMono","doc":"Eliminate `cases` for `UInt` types. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesUIntToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">casesUIntToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">uintName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases.typeName\">typeName</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">uintName</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/ToMono.lean#L140-L163","name":"Lean.Compiler.LCNF.casesIntToMono","line":140,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesIntToMono","doc":"Eliminate `cases` for `Int`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesIntToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">casesIntToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases.typeName\">typeName</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">`Int</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/ToMono.lean#L119-L138","name":"Lean.Compiler.LCNF.casesNatToMono","line":119,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesNatToMono","doc":"Eliminate `cases` for `Nat`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesNatToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">casesNatToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases.typeName\">typeName</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">`Nat</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/ToMono.lean#L107-L117","name":"Lean.Compiler.LCNF.decToMono","line":107,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.decToMono","doc":"Convert `cases` `Decidable` => `Bool` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.decToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">decToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases.typeName\">typeName</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">`Decidable</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/ToMono.lean#L101-L105","name":"Lean.Compiler.LCNF.FunDecl.toMono","line":101,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.FunDecl.toMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.FunDecl.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FunDecl</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/ToMono.lean#L94-L97","name":"Lean.Compiler.LCNF.LetDecl.toMono","line":94,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.LetDecl.toMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.LetDecl.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LetDecl</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/ToMono.lean#L54-L92","name":"Lean.Compiler.LCNF.LetValue.toMono","line":54,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.LetValue.toMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.LetValue.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LetValue</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/ToMono.lean#L45-L52","name":"Lean.Compiler.LCNF.ctorAppToMono","line":45,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ctorAppToMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ctorAppToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ctorAppToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctorInfo</span> : <a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">ConstructorVal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/ToMono.lean#L35-L43","name":"Lean.Compiler.LCNF.argToMono","line":35,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.argToMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.argToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">argToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/ToMono.lean#L30-L33","name":"Lean.Compiler.LCNF.checkFVarUse","line":30,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.checkFVarUse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.checkFVarUse\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">checkFVarUse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/ToMono.lean#L25-L28","name":"Lean.Compiler.LCNF.isTrivialConstructorApp?","line":25,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.isTrivialConstructorApp?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.isTrivialConstructorApp?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">isTrivialConstructorApp?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/ToMono.lean#L20-L23","name":"Lean.Compiler.LCNF.Param.toMono","line":20,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Param.toMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Param.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Param</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">param</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/ToMono.lean#L18-L18","name":"Lean.Compiler.LCNF.ToMonoM","line":18,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToMonoM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/ToMono.lean#L16-L16","name":"Lean.Compiler.LCNF.ToMonoM.State.noncomputableVars","line":16,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State.noncomputableVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State.noncomputableVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToMonoM</span>.<span class=\"name\">State</span>.<span class=\"name\">noncomputableVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarIdMap\">FVarIdMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/ToMono.lean#L15-L15","name":"Lean.Compiler.LCNF.ToMonoM.State.typeParams","line":15,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State.typeParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State.typeParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToMonoM</span>.<span class=\"name\">State</span>.<span class=\"name\">typeParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarIdHashSet\">FVarIdHashSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/ToMono.lean#L14-L14","name":"Lean.Compiler.LCNF.ToMonoM.State.mk","line":14,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToMonoM</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">typeParams</span> : <a href=\"./Lean/Expr.html#Lean.FVarIdHashSet\">FVarIdHashSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">noncomputableVars</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarIdMap\">FVarIdMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/ToMono.lean#L14-L16","name":"Lean.Compiler.LCNF.ToMonoM.State","line":14,"kind":"structure","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToMonoM</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}