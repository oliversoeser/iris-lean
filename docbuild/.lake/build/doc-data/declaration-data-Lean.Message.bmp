{"name":"Lean.Message","instances":[{"typeNames":["Lean.MessageSeverity"],"name":"Lean.instInhabitedMessageSeverity","className":"Inhabited"},{"typeNames":["Lean.MessageSeverity"],"name":"Lean.instBEqMessageSeverity","className":"BEq"},{"typeNames":["Lean.MessageSeverity"],"name":"Lean.instToJsonMessageSeverity","className":"Lean.ToJson"},{"typeNames":["Lean.MessageSeverity"],"name":"Lean.instFromJsonMessageSeverity","className":"Lean.FromJson"},{"typeNames":["Lean.MessageData"],"name":"Lean.instInhabitedMessageData","className":"Inhabited"},{"typeNames":["Lean.MessageData"],"name":"Lean.instTypeNameMessageData","className":"TypeName"},{"typeNames":["Lean.MessageData"],"name":"Lean.MessageData.instAppend","className":"Append"},{"typeNames":["String","Lean.MessageData"],"name":"Lean.MessageData.instCoeString","className":"Coe"},{"typeNames":["Std.Format","Lean.MessageData"],"name":"Lean.MessageData.instCoeFormat","className":"Coe"},{"typeNames":["Lean.Level","Lean.MessageData"],"name":"Lean.MessageData.instCoeLevel","className":"Coe"},{"typeNames":["Lean.Expr","Lean.MessageData"],"name":"Lean.MessageData.instCoeExpr","className":"Coe"},{"typeNames":["Lean.Name","Lean.MessageData"],"name":"Lean.MessageData.instCoeName","className":"Coe"},{"typeNames":["Lean.Syntax","Lean.MessageData"],"name":"Lean.MessageData.instCoeSyntax","className":"Coe"},{"typeNames":["Lean.MVarId","Lean.MessageData"],"name":"Lean.MessageData.instCoeMVarId","className":"Coe"},{"typeNames":["Option","Lean.MessageData"],"name":"Lean.MessageData.instCoeOptionExpr","className":"Coe"},{"typeNames":["Array","Lean.MessageData"],"name":"Lean.MessageData.instCoeArrayExpr","className":"Coe"},{"typeNames":["List","Lean.MessageData"],"name":"Lean.MessageData.instCoeList","className":"Coe"},{"typeNames":["List","Lean.MessageData"],"name":"Lean.MessageData.instCoeListExpr","className":"Coe"},{"typeNames":["Lean.BaseMessage"],"name":"Lean.instInhabitedBaseMessage","className":"Inhabited"},{"typeNames":["Lean.BaseMessage"],"name":"Lean.instToJsonBaseMessage","className":"Lean.ToJson"},{"typeNames":["Lean.BaseMessage"],"name":"Lean.instFromJsonBaseMessage","className":"Lean.FromJson"},{"typeNames":["Lean.SerialMessage"],"name":"Lean.instToJsonSerialMessage","className":"Lean.ToJson"},{"typeNames":["Lean.SerialMessage"],"name":"Lean.instFromJsonSerialMessage","className":"Lean.FromJson"},{"typeNames":["Lean.SerialMessage"],"name":"Lean.SerialMessage.instToString","className":"ToString"},{"typeNames":["Lean.MessageLog"],"name":"Lean.instInhabitedMessageLog","className":"Inhabited"},{"typeNames":["Lean.MessageLog"],"name":"Lean.MessageLog.instAppend","className":"Append"},{"typeNames":[],"name":"Lean.instAddMessageContextOfMonadLift","className":"Lean.AddMessageContext"},{"typeNames":[],"name":"Lean.instToMessageDataOfToFormat","className":"Lean.ToMessageData"},{"typeNames":["Lean.Expr"],"name":"Lean.instToMessageDataExpr","className":"Lean.ToMessageData"},{"typeNames":["Lean.Level"],"name":"Lean.instToMessageDataLevel","className":"Lean.ToMessageData"},{"typeNames":["Lean.Name"],"name":"Lean.instToMessageDataName","className":"Lean.ToMessageData"},{"typeNames":["String"],"name":"Lean.instToMessageDataString","className":"Lean.ToMessageData"},{"typeNames":["Lean.Syntax"],"name":"Lean.instToMessageDataSyntax","className":"Lean.ToMessageData"},{"typeNames":["Lean.TSyntax"],"name":"Lean.instToMessageDataTSyntax","className":"Lean.ToMessageData"},{"typeNames":["Std.Format"],"name":"Lean.instToMessageDataFormat","className":"Lean.ToMessageData"},{"typeNames":["Lean.MVarId"],"name":"Lean.instToMessageDataMVarId","className":"Lean.ToMessageData"},{"typeNames":["Lean.MessageData"],"name":"Lean.instToMessageDataMessageData","className":"Lean.ToMessageData"},{"typeNames":["List"],"name":"Lean.instToMessageDataList","className":"Lean.ToMessageData"},{"typeNames":["Array"],"name":"Lean.instToMessageDataArray","className":"Lean.ToMessageData"},{"typeNames":["Subarray"],"name":"Lean.instToMessageDataSubarray","className":"Lean.ToMessageData"},{"typeNames":["Option"],"name":"Lean.instToMessageDataOption","className":"Lean.ToMessageData"},{"typeNames":["Prod"],"name":"Lean.instToMessageDataProd","className":"Lean.ToMessageData"},{"typeNames":["Option"],"name":"Lean.instToMessageDataOptionExpr","className":"Lean.ToMessageData"}],"imports":["Lean.Data.Position","Lean.Data.OpenDecl","Lean.MetavarContext","Lean.Environment","Lean.Util.PPExt","Lean.Util.Sorry"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L674-L676","name":"Lean.toTraceElem","line":674,"kind":"def","docLink":"./Lean/Message.html#Lean.toTraceElem","doc":"Helper functions for creating a `MessageData` with the given header and elements. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.toTraceElem\"><span class=\"name\">Lean</span>.<span class=\"name\">toTraceElem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cls</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name.mkSimple\">Name.mkSimple</a> <span class=\"fn\">&quot;_&quot;</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L644-L670","name":"Lean.Kernel.Exception.toMessageData","line":644,"kind":"def","docLink":"./Lean/Message.html#Lean.Kernel.Exception.toMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.Kernel.Exception.toMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Exception</span>.<span class=\"name\">toMessageData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Exception</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L636-L637","name":"Lean.toMessageList","line":636,"kind":"def","docLink":"./Lean/Message.html#Lean.toMessageList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.toMessageList\"><span class=\"name\">Lean</span>.<span class=\"name\">toMessageList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L631-L631","name":"Lean.termM!_","line":631,"kind":"def","docLink":"./Lean/Message.html#Lean.termM!_","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.termM!_\"><span class=\"name\">Lean</span>.<span class=\"name\">termM!_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L629-L629","name":"Lean.instToMessageDataOptionExpr","line":629,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataOptionExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataOptionExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataOptionExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L627-L628","name":"Lean.instToMessageDataProd","line":627,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataProd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataProd\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L626-L626","name":"Lean.instToMessageDataOption","line":626,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataOption","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataOption\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataOption</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L625-L625","name":"Lean.instToMessageDataSubarray","line":625,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataSubarray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataSubarray\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataSubarray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">(<a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L624-L624","name":"Lean.instToMessageDataArray","line":624,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataArray\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L623-L623","name":"Lean.instToMessageDataList","line":623,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataList\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L621-L622","name":"Lean.instToMessageDataMessageData","line":621,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataMessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L620-L620","name":"Lean.instToMessageDataMVarId","line":620,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataMVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataMVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataMVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L619-L619","name":"Lean.instToMessageDataFormat","line":619,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataFormat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataFormat\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataFormat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L618-L618","name":"Lean.instToMessageDataTSyntax","line":618,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataTSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataTSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataTSyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">k</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L617-L617","name":"Lean.instToMessageDataSyntax","line":617,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L616-L616","name":"Lean.instToMessageDataString","line":616,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataString\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L615-L615","name":"Lean.instToMessageDataName","line":615,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataName\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L614-L614","name":"Lean.instToMessageDataLevel","line":614,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L613-L613","name":"Lean.instToMessageDataExpr","line":613,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L612-L612","name":"Lean.instToMessageDataOfToFormat","line":612,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToMessageDataOfToFormat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataOfToFormat\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataOfToFormat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L607-L610","name":"Lean.stringToMessageData","line":607,"kind":"def","docLink":"./Lean/Message.html#Lean.stringToMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.stringToMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">stringToMessageData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">str</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L603-L603","name":"Lean.ToMessageData.toMessageData","line":603,"kind":"def","docLink":"./Lean/Message.html#Lean.ToMessageData.toMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.ToMessageData.toMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">ToMessageData</span>.<span class=\"name\">toMessageData</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L602-L602","name":"Lean.ToMessageData.mk","line":602,"kind":"ctor","docLink":"./Lean/Message.html#Lean.ToMessageData.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.ToMessageData.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">ToMessageData</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toMessageData</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L602-L603","name":"Lean.ToMessageData","line":602,"kind":"class","docLink":"./Lean/Message.html#Lean.ToMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.ToMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">ToMessageData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L595-L600","name":"Lean.addMessageContextFull","line":595,"kind":"def","docLink":"./Lean/Message.html#Lean.addMessageContextFull","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.addMessageContextFull\"><span class=\"name\">Lean</span>.<span class=\"name\">addMessageContextFull</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.MonadLCtx\">MonadLCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msgData</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L590-L593","name":"Lean.addMessageContextPartial","line":590,"kind":"def","docLink":"./Lean/Message.html#Lean.addMessageContextPartial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.addMessageContextPartial\"><span class=\"name\">Lean</span>.<span class=\"name\">addMessageContextPartial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msgData</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L587-L588","name":"Lean.instAddMessageContextOfMonadLift","line":587,"kind":"instance","docLink":"./Lean/Message.html#Lean.instAddMessageContextOfMonadLift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instAddMessageContextOfMonadLift\"><span class=\"name\">Lean</span>.<span class=\"name\">instAddMessageContextOfMonadLift</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">AddMessageContext</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">AddMessageContext</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L583-L583","name":"Lean.AddMessageContext.addMessageContext","line":583,"kind":"def","docLink":"./Lean/Message.html#Lean.AddMessageContext.addMessageContext","doc":"Without context, a `MessageData` object may be missing information\n(e.g. hover info) for pretty printing, or may print an error. Hence,\n`addMessageContext` should be called on all constructed `MessageData`\n(e.g. via `m!`) before taking it out of context (e.g. leaving `MetaM` or\n`CoreM`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.AddMessageContext.addMessageContext\"><span class=\"name\">Lean</span>.<span class=\"name\">AddMessageContext</span>.<span class=\"name\">addMessageContext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">AddMessageContext</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L575-L575","name":"Lean.AddMessageContext.mk","line":575,"kind":"ctor","docLink":"./Lean/Message.html#Lean.AddMessageContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.AddMessageContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">AddMessageContext</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">addMessageContext</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">AddMessageContext</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L575-L583","name":"Lean.AddMessageContext","line":575,"kind":"class","docLink":"./Lean/Message.html#Lean.AddMessageContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.AddMessageContext\"><span class=\"name\">Lean</span>.<span class=\"name\">AddMessageContext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L571-L573","name":"Lean.aquote","line":571,"kind":"def","docLink":"./Lean/Message.html#Lean.aquote","doc":"Atom quotes "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.aquote\"><span class=\"name\">Lean</span>.<span class=\"name\">aquote</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L552-L569","name":"Lean.inlineExpr","line":552,"kind":"def","docLink":"./Lean/Message.html#Lean.inlineExpr","doc":"Renders an expression `e` inline in a message unless it will exceed `maxInlineLength` characters, in\nwhich case the expression is indented on a new line.\n\nNote that the output of this function is formatted with preceding and trailing space included. Thus,\nin `m₁ ++ inlineExpr e ++ m₂`, `m₁` should not end with a space or new line, nor should `m₂` begin\nwith one.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.inlineExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">inlineExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxInlineLength</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">30</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L536-L537","name":"Lean.indentExpr","line":536,"kind":"def","docLink":"./Lean/Message.html#Lean.indentExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.indentExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">indentExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L533-L534","name":"Lean.indentD","line":533,"kind":"def","docLink":"./Lean/Message.html#Lean.indentD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.indentD\"><span class=\"name\">Lean</span>.<span class=\"name\">indentD</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L530-L531","name":"Lean.MessageData.nestD","line":530,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.nestD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.nestD\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">nestD</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L524-L526","name":"Lean.MessageLog.toArray","line":524,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.toArray","doc":"Converts the unreported messages to an array, oldest message first. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.toArray\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">toArray</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Message.html#Lean.Message\">Message</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L520-L522","name":"Lean.MessageLog.toList","line":520,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.toList","doc":"Converts the unreported messages to a list, oldest message first. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.toList\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">toList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Message.html#Lean.Message\">Message</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L517-L518","name":"Lean.MessageLog.forM","line":517,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.forM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.forM\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">forM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.Message\">Message</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L514-L515","name":"Lean.MessageLog.getInfoMessages","line":514,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.getInfoMessages","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.getInfoMessages\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">getInfoMessages</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L511-L512","name":"Lean.MessageLog.errorsToInfos","line":511,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.errorsToInfos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.errorsToInfos\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">errorsToInfos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L508-L509","name":"Lean.MessageLog.errorsToWarnings","line":508,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.errorsToWarnings","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.errorsToWarnings\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">errorsToWarnings</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L504-L506","name":"Lean.MessageLog.markAllReported","line":504,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.markAllReported","doc":"Moves `unreported` messages to `reported`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.markAllReported\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">markAllReported</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L497-L502","name":"Lean.MessageLog.hasErrors","line":497,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.hasErrors","doc":"Checks if either of `reported` or `unreported` contains an error, i.e. whether the current command\nhas errored yet.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.hasErrors\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">hasErrors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L494-L495","name":"Lean.MessageLog.instAppend","line":494,"kind":"instance","docLink":"./Lean/Message.html#Lean.MessageLog.instAppend","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.instAppend\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">instAppend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L489-L492","name":"Lean.MessageLog.append","line":489,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.append\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L486-L487","name":"Lean.MessageLog.add","line":486,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.add\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.Message\">Message</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L483-L484","name":"Lean.MessageLog.hasUnreported","line":483,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.hasUnreported","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.hasUnreported\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">hasUnreported</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L480-L481","name":"Lean.MessageLog.reportedPlusUnreported","line":480,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.reportedPlusUnreported","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.reportedPlusUnreported\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">reportedPlusUnreported</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a> → <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Message.html#Lean.Message\">Message</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L476-L478","name":"Lean.MessageLog.msgs","line":476,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.msgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.msgs\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">msgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a> → <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Message.html#Lean.Message\">Message</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L472-L472","name":"Lean.MessageLog.empty","line":472,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.empty\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L469-L469","name":"Lean.instInhabitedMessageLog","line":469,"kind":"instance","docLink":"./Lean/Message.html#Lean.instInhabitedMessageLog","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instInhabitedMessageLog\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedMessageLog</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L468-L468","name":"Lean.MessageLog.loggedKinds","line":468,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.loggedKinds","doc":"Set of message kinds that have been added to the log.\nFor example, we have the kind `unsafe.exponentiation.warning` for warning messages associated with\nthe configuration option `exponentiation.threshold`.\nWe don't produce a warning if the kind is already in the following set.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.loggedKinds\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">loggedKinds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">NameSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L461-L461","name":"Lean.MessageLog.unreported","line":461,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.unreported","doc":"The list of messages not already reported, in insertion order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.unreported\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">unreported</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Message.html#Lean.Message\">Message</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L459-L459","name":"Lean.MessageLog.reported","line":459,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageLog.reported","doc":"The list of messages already reported (i.e. saved in a `Snapshot`), in insertion order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.reported\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">reported</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Message.html#Lean.Message\">Message</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L457-L457","name":"Lean.MessageLog.mk","line":457,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageLog.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reported </span><span class=\"fn\">unreported</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Message.html#Lean.Message\">Message</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">loggedKinds</span> : <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">NameSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L448-L469","name":"Lean.MessageLog","line":448,"kind":"structure","docLink":"./Lean/Message.html#Lean.MessageLog","doc":"A persistent array of messages.\n\nIn the Lean elaborator, we use a fresh message log per command but may also report diagnostics at\nvarious points inside a command, which will empty `unreported` and move its messages to `reported`.\nReported messages are preserved for some specific \"lookback\" operations such as `hasError` that\nshould consider the entire message history of the current command; most other functions such as\n`add` and `toList` will only operate on unreported messages.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L442-L444","name":"Lean.Message.toJson","line":442,"kind":"def","docLink":"./Lean/Message.html#Lean.Message.toJson","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.Message.toJson\"><span class=\"name\">Lean</span>.<span class=\"name\">Message</span>.<span class=\"name\">toJson</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.Message\">Message</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Json</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L438-L440","name":"Lean.Message.toString","line":438,"kind":"def","docLink":"./Lean/Message.html#Lean.Message.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.Message.toString\"><span class=\"name\">Lean</span>.<span class=\"name\">Message</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.Message\">Message</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">includeEndPos</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L434-L436","name":"Lean.Message.serialize","line":434,"kind":"def","docLink":"./Lean/Message.html#Lean.Message.serialize","doc":"Serializes the message, converting its data into a string and saving its kind. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.Message.serialize\"><span class=\"name\">Lean</span>.<span class=\"name\">Message</span>.<span class=\"name\">serialize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.Message\">Message</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lean/Message.html#Lean.SerialMessage\">SerialMessage</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L431-L432","name":"Lean.Message.isTrace","line":431,"kind":"def","docLink":"./Lean/Message.html#Lean.Message.isTrace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.Message.isTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">Message</span>.<span class=\"name\">isTrace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.Message\">Message</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L428-L429","name":"Lean.Message.kind","line":428,"kind":"def","docLink":"./Lean/Message.html#Lean.Message.kind","doc":"Returns the top-level tag of the message.\nIf none, returns `Name.anonymous`.\n\nThis does not descend into message subtrees (e.g., `.compose`, `.ofLazy`).\nThe message kind is expected to describe the whole message.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.Message.kind\"><span class=\"name\">Lean</span>.<span class=\"name\">Message</span>.<span class=\"name\">kind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.Message\">Message</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L422-L422","name":"Lean.SerialMessage.instToString","line":422,"kind":"instance","docLink":"./Lean/Message.html#Lean.SerialMessage.instToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.SerialMessage.instToString\"><span class=\"name\">Lean</span>.<span class=\"name\">SerialMessage</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Message.html#Lean.SerialMessage\">SerialMessage</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L409-L420","name":"Lean.SerialMessage.toString","line":409,"kind":"def","docLink":"./Lean/Message.html#Lean.SerialMessage.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.SerialMessage.toString\"><span class=\"name\">Lean</span>.<span class=\"name\">SerialMessage</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.SerialMessage\">SerialMessage</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">includeEndPos</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L406-L407","name":"Lean.SerialMessage.toMessage","line":406,"kind":"def","docLink":"./Lean/Message.html#Lean.SerialMessage.toMessage","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.SerialMessage.toMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">SerialMessage</span>.<span class=\"name\">toMessage</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.SerialMessage\">SerialMessage</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.Message\">Message</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L402-L402","name":"Lean.instFromJsonSerialMessage","line":402,"kind":"instance","docLink":"./Lean/Message.html#Lean.instFromJsonSerialMessage","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instFromJsonSerialMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">instFromJsonSerialMessage</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.FromJson\">FromJson</a> <a href=\"./Lean/Message.html#Lean.SerialMessage\">SerialMessage</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L402-L402","name":"Lean.instToJsonSerialMessage","line":402,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToJsonSerialMessage","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToJsonSerialMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">instToJsonSerialMessage</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.ToJson\">ToJson</a> <a href=\"./Lean/Message.html#Lean.SerialMessage\">SerialMessage</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L401-L401","name":"Lean.SerialMessage.kind","line":401,"kind":"def","docLink":"./Lean/Message.html#Lean.SerialMessage.kind","doc":"The message kind (i.e., the top-level tag). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.SerialMessage.kind\"><span class=\"name\">Lean</span>.<span class=\"name\">SerialMessage</span>.<span class=\"name\">kind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.SerialMessage\">SerialMessage</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L399-L399","name":"Lean.SerialMessage.mk","line":399,"kind":"ctor","docLink":"./Lean/Message.html#Lean.SerialMessage.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.SerialMessage.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">SerialMessage</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toBaseMessage</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.SerialMessage\">SerialMessage</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L399-L402","name":"Lean.SerialMessage.toBaseMessage","line":399,"kind":"def","docLink":"./Lean/Message.html#Lean.SerialMessage.toBaseMessage","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.SerialMessage.toBaseMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">SerialMessage</span>.<span class=\"name\">toBaseMessage</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.SerialMessage\">SerialMessage</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L396-L402","name":"Lean.SerialMessage","line":396,"kind":"structure","docLink":"./Lean/Message.html#Lean.SerialMessage","doc":"A `SerialMessage` is a `Message` whose `MessageData` has been eagerly\nserialized and is thus appropriate for use in pure contexts where the effectful\n`MessageData.toString` cannot be used. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.SerialMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">SerialMessage</span></a></span><span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">Lean.BaseMessage</a> <a href=\"./Init/Prelude.html#String\">String</a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L392-L394","name":"Lean.Message","line":392,"kind":"def","docLink":"./Lean/Message.html#Lean.Message","doc":"A `Message` is a richly formatted piece of information emitted by Lean.\nThey are rendered by client editors in the infoview and in diagnostic windows. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.Message\"><span class=\"name\">Lean</span>.<span class=\"name\">Message</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L390-L390","name":"Lean.instFromJsonBaseMessage","line":390,"kind":"instance","docLink":"./Lean/Message.html#Lean.instFromJsonBaseMessage","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instFromJsonBaseMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">instFromJsonBaseMessage</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.FromJson\">FromJson</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.FromJson\">FromJson</a> <span class=\"fn\">(<a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <span class=\"fn\">α✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L390-L390","name":"Lean.instToJsonBaseMessage","line":390,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToJsonBaseMessage","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToJsonBaseMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">instToJsonBaseMessage</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.ToJson\">ToJson</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.ToJson\">ToJson</a> <span class=\"fn\">(<a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <span class=\"fn\">α✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L390-L390","name":"Lean.instInhabitedBaseMessage","line":390,"kind":"instance","docLink":"./Lean/Message.html#Lean.instInhabitedBaseMessage","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instInhabitedBaseMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedBaseMessage</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">a✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <span class=\"fn\">a✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L389-L389","name":"Lean.BaseMessage.data","line":389,"kind":"def","docLink":"./Lean/Message.html#Lean.BaseMessage.data","doc":"The content of the message. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage.data\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span>.<span class=\"name\">data</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L387-L387","name":"Lean.BaseMessage.caption","line":387,"kind":"def","docLink":"./Lean/Message.html#Lean.BaseMessage.caption","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage.caption\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span>.<span class=\"name\">caption</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L386-L386","name":"Lean.BaseMessage.isSilent","line":386,"kind":"def","docLink":"./Lean/Message.html#Lean.BaseMessage.isSilent","doc":"If `true`, filter this message from non-language server output.\nIn the language server, silent messages are served as silent diagnostics.\nSee also `DiagnosticWith.isSilent?`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage.isSilent\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span>.<span class=\"name\">isSilent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L380-L380","name":"Lean.BaseMessage.severity","line":380,"kind":"def","docLink":"./Lean/Message.html#Lean.BaseMessage.severity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage.severity\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span>.<span class=\"name\">severity</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L379-L379","name":"Lean.BaseMessage.keepFullRange","line":379,"kind":"def","docLink":"./Lean/Message.html#Lean.BaseMessage.keepFullRange","doc":"If `true`, report range as given; see `msgToInteractiveDiagnostic`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage.keepFullRange\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span>.<span class=\"name\">keepFullRange</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L377-L377","name":"Lean.BaseMessage.endPos","line":377,"kind":"def","docLink":"./Lean/Message.html#Lean.BaseMessage.endPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage.endPos\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span>.<span class=\"name\">endPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Data/Position.html#Lean.Position\">Position</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L376-L376","name":"Lean.BaseMessage.pos","line":376,"kind":"def","docLink":"./Lean/Message.html#Lean.BaseMessage.pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage.pos\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span>.<span class=\"name\">pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/Position.html#Lean.Position\">Position</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L375-L375","name":"Lean.BaseMessage.fileName","line":375,"kind":"def","docLink":"./Lean/Message.html#Lean.BaseMessage.fileName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage.fileName\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span>.<span class=\"name\">fileName</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L374-L374","name":"Lean.BaseMessage.mk","line":374,"kind":"ctor","docLink":"./Lean/Message.html#Lean.BaseMessage.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fileName</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Lean/Data/Position.html#Lean.Position\">Position</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">endPos</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Data/Position.html#Lean.Position\">Position</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">keepFullRange</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">severity</span> : <a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isSilent</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">caption</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">data</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L366-L390","name":"Lean.BaseMessage","line":366,"kind":"structure","docLink":"./Lean/Message.html#Lean.BaseMessage","doc":"A `BaseMessage` is a richly formatted piece of information emitted by Lean.\nThey are rendered by client editors in the infoview and in diagnostic windows.\nThere are two varieties in the Lean core:\n* `Message`: Uses structured, effectful `MessageData` for formatting content.\n* `SerialMessage`: Stores pure `String` data. Obtained by running the effectful\n`Message.serialize`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L362-L362","name":"Lean.MessageData.instCoeListExpr","line":362,"kind":"instance","docLink":"./Lean/Message.html#Lean.MessageData.instCoeListExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeListExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeListExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L361-L361","name":"Lean.MessageData.instCoeList","line":361,"kind":"instance","docLink":"./Lean/Message.html#Lean.MessageData.instCoeList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeList\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L354-L359","name":"Lean.MessageData.hint'","line":354,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.hint'","doc":"Produces a labeled hint without an associated code action (non-monadic variant of\n`MessageData.hint`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.hint'\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">hint'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hint</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L348-L352","name":"Lean.MessageData.note","line":348,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.note","doc":"Produces a labeled note that can be appended to an error message.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.note\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">note</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">note</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L336-L346","name":"Lean.MessageData.andList","line":336,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.andList","doc":"Puts `MessageData` into a comma-separated list with `\"and\"` at the back (with the serial comma).\n\nBest used on non-empty lists; returns `\"– none –\"` for an empty list.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.andList\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">andList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L324-L334","name":"Lean.MessageData.orList","line":324,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.orList","doc":"Puts `MessageData` into a comma-separated list with `\"or\"` at the back (with the serial comma).\n\nBest used on non-empty lists; returns `\"– none –\"` for an empty list.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.orList\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">orList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L320-L322","name":"Lean.MessageData.ofArray","line":320,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.ofArray","doc":"See `MessageData.ofList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofArray\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofArray</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L315-L318","name":"Lean.MessageData.ofList","line":315,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.ofList","doc":"Write the given list of messages as a list, separating each item with `,\\n` and surrounding with square brackets. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofList\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L309-L313","name":"Lean.MessageData.joinSep","line":309,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.joinSep","doc":"Append the given list of messages with the given separator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.joinSep\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">joinSep</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span> → <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L307-L308","name":"Lean.MessageData.sbracket","line":307,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.sbracket","doc":"Wrap the given message in square brackets `[]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.sbracket\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">sbracket</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L305-L306","name":"Lean.MessageData.paren","line":305,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.paren","doc":"Wrap the given message in parentheses `()`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.paren\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">paren</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L303-L304","name":"Lean.MessageData.bracket","line":303,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.bracket","doc":"Wrap the given message in `l` and `r`. See also `Format.bracket`.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.bracket\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">bracket</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L301-L301","name":"Lean.MessageData.instCoeArrayExpr","line":301,"kind":"instance","docLink":"./Lean/Message.html#Lean.MessageData.instCoeArrayExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeArrayExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeArrayExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L293-L299","name":"Lean.MessageData.arrayExpr.toMessageData","line":293,"kind":"opaque","docLink":"./Lean/Message.html#Lean.MessageData.arrayExpr.toMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.arrayExpr.toMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">arrayExpr</span>.<span class=\"name\">toMessageData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">es</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L291-L291","name":"Lean.MessageData.instCoeOptionExpr","line":291,"kind":"instance","docLink":"./Lean/Message.html#Lean.MessageData.instCoeOptionExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeOptionExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeOptionExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L290-L290","name":"Lean.MessageData.instCoeMVarId","line":290,"kind":"instance","docLink":"./Lean/Message.html#Lean.MessageData.instCoeMVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeMVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeMVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L289-L289","name":"Lean.MessageData.instCoeSyntax","line":289,"kind":"instance","docLink":"./Lean/Message.html#Lean.MessageData.instCoeSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L288-L288","name":"Lean.MessageData.instCoeName","line":288,"kind":"instance","docLink":"./Lean/Message.html#Lean.MessageData.instCoeName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeName\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L287-L287","name":"Lean.MessageData.instCoeExpr","line":287,"kind":"instance","docLink":"./Lean/Message.html#Lean.MessageData.instCoeExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L286-L286","name":"Lean.MessageData.instCoeLevel","line":286,"kind":"instance","docLink":"./Lean/Message.html#Lean.MessageData.instCoeLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L285-L285","name":"Lean.MessageData.instCoeFormat","line":285,"kind":"instance","docLink":"./Lean/Message.html#Lean.MessageData.instCoeFormat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeFormat\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeFormat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L284-L284","name":"Lean.MessageData.instCoeString","line":284,"kind":"instance","docLink":"./Lean/Message.html#Lean.MessageData.instCoeString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeString\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L282-L282","name":"Lean.MessageData.instAppend","line":282,"kind":"instance","docLink":"./Lean/Message.html#Lean.MessageData.instAppend","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instAppend\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instAppend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L279-L280","name":"Lean.MessageData.toString","line":279,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.toString\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msgData</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L276-L277","name":"Lean.MessageData.format","line":276,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.format","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.format\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msgData</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageDataContext\">MessageDataContext</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L243-L274","name":"Lean.MessageData.formatAux","line":243,"kind":"opaque","docLink":"./Lean/Message.html#Lean.MessageData.formatAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.formatAux\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">formatAux</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.NamingContext\">NamingContext</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageDataContext\">MessageDataContext</a></span> → <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L234-L241","name":"Lean.MessageData.maxTraceChildren","line":234,"kind":"opaque","docLink":"./Lean/Message.html#Lean.MessageData.maxTraceChildren","doc":"Maximum number of trace node children to display by default to prevent slowdowns from rendering. In\nthe info view, more children can be expanded interactively.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.maxTraceChildren\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">maxTraceChildren</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L223-L232","name":"Lean.MessageData.hasSyntheticSorry.visit","line":223,"kind":"opaque","docLink":"./Lean/Message.html#Lean.MessageData.hasSyntheticSorry.visit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.hasSyntheticSorry.visit\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">hasSyntheticSorry</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L220-L232","name":"Lean.MessageData.hasSyntheticSorry","line":220,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.hasSyntheticSorry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.hasSyntheticSorry\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">hasSyntheticSorry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L201-L218","name":"Lean.MessageData.ofConstName","line":201,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.ofConstName","doc":"Represents a constant name such that hovering and \"go to definition\" works.\nIf there is no such constant in the environment, the name is simply formatted, but sanitized if it is a hygienic name.\nUse `MessageData.ofName` if hovers are undesired.\n\nIf `fullNames` is true, then pretty prints as if `pp.fullNames` is true.\nOtherwise, pretty prints using the current user setting for `pp.fullNames`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofConstName\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofConstName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fullNames</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L195-L199","name":"Lean.MessageData.ofName","line":195,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.ofName","doc":"Simply formats the name.\nSee `MessageData.ofConstName` for richer messages.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofName\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L186-L193","name":"Lean.MessageData.ofLevel","line":186,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.ofLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofLevel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Lean/Level.html#Lean.Level\">Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L177-L184","name":"Lean.MessageData.ofExpr","line":177,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.ofExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L166-L175","name":"Lean.MessageData.ofSyntax","line":166,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.ofSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L161-L164","name":"Lean.MessageData.mkPPContext","line":161,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.mkPPContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.mkPPContext\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">mkPPContext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nCtx</span> : <a href=\"./Lean/Message.html#Lean.NamingContext\">NamingContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Message.html#Lean.MessageDataContext\">MessageDataContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Util/PPExt.html#Lean.PPContext\">PPContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L157-L159","name":"Lean.MessageData.nil","line":157,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.nil","doc":"An empty message. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.nil\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L150-L155","name":"Lean.MessageData.isTrace","line":150,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.isTrace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.isTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">isTrace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L137-L148","name":"Lean.MessageData.kind","line":137,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.kind","doc":"Returns the top-level tag of the message.\nIf none, returns `Name.anonymous`.\n\nThis does not descend into message subtrees (e.g., `.compose`, `.ofLazy`).\nThe message kind is expected to describe the whole message.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.kind\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">kind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L120-L135","name":"Lean.MessageData.hasTag","line":120,"kind":"opaque","docLink":"./Lean/Message.html#Lean.MessageData.hasTag","doc":"Returns true when the message contains a `MessageData.tagged tag ..` constructor where `p tag`\nis true.\n\nThis does not descend into lazily generated subtrees (`.ofLazy`); message tags\nof interest (like those added by `logLinter`) are expected to be near the root\nof the `MessageData`, and not hidden inside `.ofLazy`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.hasTag\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">hasTag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L105-L117","name":"Lean.MessageData.lazy","line":105,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.lazy","doc":"Lazy message data production, with access to the context as given by\na surrounding `MessageData.withContext` (which is expected to exist).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.lazy\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">lazy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Util/PPExt.html#Lean.PPContext\">PPContext</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hasSyntheticSorry</span> : <span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">onMissingContext</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt;\n  <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">(<a href=\"./Lean/Message.html#Lean.MessageData.ofFormat\">ofFormat</a> <span class=\"fn\">(<a href=\"./Init/Data/Format/Basic.html#Std.Format.text\">Std.Format.text</a> <span class=\"fn\">&quot;(invalid MessageData.lazy, missing context)&quot;</span>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L102-L103","name":"Lean.MessageData.ofFormat","line":102,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageData.ofFormat","doc":"Eagerly formatted text. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofFormat\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofFormat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fmt</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L98-L98","name":"Lean.instTypeNameMessageData","line":98,"kind":"instance","docLink":"./Lean/Message.html#Lean.instTypeNameMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instTypeNameMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">instTypeNameMessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L98-L98","name":"Lean.instInhabitedMessageData","line":98,"kind":"instance","docLink":"./Lean/Message.html#Lean.instInhabitedMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instInhabitedMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedMessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L87-L97","name":"Lean.MessageData.ofLazy","line":87,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageData.ofLazy","doc":"A lazy message.\nThe provided thunk will not be run until it is about to be displayed.\nThis can save computation in cases where the message may never be seen.\n\nThe `Dynamic` value is expected to be a `MessageData`,\nwhich is a workaround for the positivity restriction.\n\nIf the thunked message is produced for a term that contains a synthetic sorry,\n`hasSyntheticSorry` should return `true`.\nThis is used to filter out certain messages. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofLazy\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofLazy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Util/PPExt.html#Lean.PPContext\">PPContext</a></span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Dynamic.html#Dynamic\">Dynamic</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hasSyntheticSorry</span> : <span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L86-L86","name":"Lean.MessageData.trace","line":86,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageData.trace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.trace\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">trace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">data</span> : <a href=\"./Lean/Message.html#Lean.TraceData\">TraceData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">children</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L83-L85","name":"Lean.MessageData.tagged","line":83,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageData.tagged","doc":"Tagged sections. `Name` should be viewed as a \"kind\", and is used by `MessageData` inspector functions.\nExample: an inspector that tries to find \"definitional equality failures\" may look for the tag \"DefEqFailure\". "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.tagged\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">tagged</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L81-L82","name":"Lean.MessageData.compose","line":81,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageData.compose","doc":"Lifted `Format.compose` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.compose\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">compose</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L79-L80","name":"Lean.MessageData.group","line":79,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageData.group","doc":"Lifted `Format.group` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.group\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">group</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L77-L78","name":"Lean.MessageData.nest","line":77,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageData.nest","doc":"Lifted `Format.nest` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.nest\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">nest</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L76-L76","name":"Lean.MessageData.withNamingContext","line":76,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageData.withNamingContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.withNamingContext\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">withNamingContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.NamingContext\">NamingContext</a> → <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L74-L75","name":"Lean.MessageData.withContext","line":74,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageData.withContext","doc":"`withContext ctx d` specifies the pretty printing context `(env, mctx, lctx, opts)` for the nested expressions in `d`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.withContext\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">withContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageDataContext\">MessageDataContext</a> → <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L60-L73","name":"Lean.MessageData.ofWidget","line":60,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageData.ofWidget","doc":"A widget instance.\n\nIn `ofWidget wi alt`,\nthe nested message `alt` should approximate the contents of the widget\nwithout itself using `ofWidget wi _`.\nThis is used as fallback in environments that cannot display user widgets.\n`alt` may nest any structured message,\nfor example `ofGoal` to approximate a tactic state widget,\nand, if necessary, even other widget instances\n(for which approximations are computed recursively).\n\nNote that unlike with `Widget.savePanelWidgetInfo`,\nthe infoview will not pass any additional props to the widget instance. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofWidget\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofWidget</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Widget/Types.html#Lean.Widget.WidgetInstance\">Widget.WidgetInstance</a> → <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L59-L59","name":"Lean.MessageData.ofGoal","line":59,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageData.ofGoal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofGoal\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofGoal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L56-L58","name":"Lean.MessageData.ofFormatWithInfos","line":56,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageData.ofFormatWithInfos","doc":"Eagerly formatted text with info annotations.\nThis constructor is inspected in various hacks. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofFormatWithInfos\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofFormatWithInfos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/PPExt.html#Lean.FormatWithInfos\">FormatWithInfos</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L54-L98","name":"Lean.MessageData","line":54,"kind":"inductive","docLink":"./Lean/Message.html#Lean.MessageData","doc":"Structured message data. We use it for reporting errors, trace messages, etc. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L52-L52","name":"Lean.TraceData.tag","line":52,"kind":"def","docLink":"./Lean/Message.html#Lean.TraceData.tag","doc":"Optional tag shown in `trace.profiler.output` output after the trace class name. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.TraceData.tag\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceData</span>.<span class=\"name\">tag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.TraceData\">TraceData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L50-L50","name":"Lean.TraceData.collapsed","line":50,"kind":"def","docLink":"./Lean/Message.html#Lean.TraceData.collapsed","doc":"Whether trace node defaults to collapsed in the infoview. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.TraceData.collapsed\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceData</span>.<span class=\"name\">collapsed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.TraceData\">TraceData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L48-L48","name":"Lean.TraceData.stopTime","line":48,"kind":"def","docLink":"./Lean/Message.html#Lean.TraceData.stopTime","doc":"Stop time in seconds; 0 if unknown to avoid `Option` allocation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.TraceData.stopTime\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceData</span>.<span class=\"name\">stopTime</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.TraceData\">TraceData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L46-L46","name":"Lean.TraceData.startTime","line":46,"kind":"def","docLink":"./Lean/Message.html#Lean.TraceData.startTime","doc":"Start time in seconds; 0 if unknown to avoid `Option` allocation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.TraceData.startTime\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceData</span>.<span class=\"name\">startTime</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.TraceData\">TraceData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L44-L44","name":"Lean.TraceData.cls","line":44,"kind":"def","docLink":"./Lean/Message.html#Lean.TraceData.cls","doc":"Trace class, e.g. `Elab.step`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.TraceData.cls\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceData</span>.<span class=\"name\">cls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.TraceData\">TraceData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L42-L42","name":"Lean.TraceData.mk","line":42,"kind":"ctor","docLink":"./Lean/Message.html#Lean.TraceData.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.TraceData.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceData</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cls</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startTime </span><span class=\"fn\">stopTime</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">collapsed</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tag</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.TraceData\">TraceData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L42-L52","name":"Lean.TraceData","line":42,"kind":"structure","docLink":"./Lean/Message.html#Lean.TraceData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.TraceData\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L40-L40","name":"Lean.NamingContext.openDecls","line":40,"kind":"def","docLink":"./Lean/Message.html#Lean.NamingContext.openDecls","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.NamingContext.openDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">NamingContext</span>.<span class=\"name\">openDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.NamingContext\">NamingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Data/OpenDecl.html#Lean.OpenDecl\">OpenDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L39-L39","name":"Lean.NamingContext.currNamespace","line":39,"kind":"def","docLink":"./Lean/Message.html#Lean.NamingContext.currNamespace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.NamingContext.currNamespace\"><span class=\"name\">Lean</span>.<span class=\"name\">NamingContext</span>.<span class=\"name\">currNamespace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.NamingContext\">NamingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L38-L38","name":"Lean.NamingContext.mk","line":38,"kind":"ctor","docLink":"./Lean/Message.html#Lean.NamingContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.NamingContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">NamingContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currNamespace</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">openDecls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Data/OpenDecl.html#Lean.OpenDecl\">OpenDecl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.NamingContext\">NamingContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L34-L40","name":"Lean.NamingContext","line":34,"kind":"structure","docLink":"./Lean/Message.html#Lean.NamingContext","doc":"A naming context is the information needed to shorten names in pretty printing.\n\nIt gives the current namespace and the list of open declarations.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.NamingContext\"><span class=\"name\">Lean</span>.<span class=\"name\">NamingContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L32-L32","name":"Lean.MessageDataContext.opts","line":32,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageDataContext.opts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageDataContext.opts\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageDataContext</span>.<span class=\"name\">opts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.MessageDataContext\">MessageDataContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L31-L31","name":"Lean.MessageDataContext.lctx","line":31,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageDataContext.lctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageDataContext.lctx\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageDataContext</span>.<span class=\"name\">lctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.MessageDataContext\">MessageDataContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L30-L30","name":"Lean.MessageDataContext.mctx","line":30,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageDataContext.mctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageDataContext.mctx\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageDataContext</span>.<span class=\"name\">mctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.MessageDataContext\">MessageDataContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L29-L29","name":"Lean.MessageDataContext.env","line":29,"kind":"def","docLink":"./Lean/Message.html#Lean.MessageDataContext.env","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageDataContext.env\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageDataContext</span>.<span class=\"name\">env</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.MessageDataContext\">MessageDataContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L28-L28","name":"Lean.MessageDataContext.mk","line":28,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageDataContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageDataContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageDataContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageDataContext\">MessageDataContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L28-L32","name":"Lean.MessageDataContext","line":28,"kind":"structure","docLink":"./Lean/Message.html#Lean.MessageDataContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageDataContext\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageDataContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L26-L26","name":"Lean.instFromJsonMessageSeverity","line":26,"kind":"instance","docLink":"./Lean/Message.html#Lean.instFromJsonMessageSeverity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instFromJsonMessageSeverity\"><span class=\"name\">Lean</span>.<span class=\"name\">instFromJsonMessageSeverity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.FromJson\">FromJson</a> <a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L26-L26","name":"Lean.instToJsonMessageSeverity","line":26,"kind":"instance","docLink":"./Lean/Message.html#Lean.instToJsonMessageSeverity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToJsonMessageSeverity\"><span class=\"name\">Lean</span>.<span class=\"name\">instToJsonMessageSeverity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.ToJson\">ToJson</a> <a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L26-L26","name":"Lean.instBEqMessageSeverity","line":26,"kind":"instance","docLink":"./Lean/Message.html#Lean.instBEqMessageSeverity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instBEqMessageSeverity\"><span class=\"name\">Lean</span>.<span class=\"name\">instBEqMessageSeverity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L26-L26","name":"Lean.instInhabitedMessageSeverity","line":26,"kind":"instance","docLink":"./Lean/Message.html#Lean.instInhabitedMessageSeverity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instInhabitedMessageSeverity\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedMessageSeverity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L25-L25","name":"Lean.MessageSeverity.error","line":25,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageSeverity.error","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageSeverity.error\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageSeverity</span>.<span class=\"name\">error</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L25-L25","name":"Lean.MessageSeverity.warning","line":25,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageSeverity.warning","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageSeverity.warning\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageSeverity</span>.<span class=\"name\">warning</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L25-L25","name":"Lean.MessageSeverity.information","line":25,"kind":"ctor","docLink":"./Lean/Message.html#Lean.MessageSeverity.information","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageSeverity.information\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageSeverity</span>.<span class=\"name\">information</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L24-L26","name":"Lean.MessageSeverity","line":24,"kind":"inductive","docLink":"./Lean/Message.html#Lean.MessageSeverity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageSeverity\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageSeverity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Message.lean#L18-L22","name":"Lean.mkErrorStringWithPos","line":18,"kind":"def","docLink":"./Lean/Message.html#Lean.mkErrorStringWithPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.mkErrorStringWithPos\"><span class=\"name\">Lean</span>.<span class=\"name\">mkErrorStringWithPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fileName</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Lean/Data/Position.html#Lean.Position\">Position</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">endPos</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Data/Position.html#Lean.Position\">Position</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"}]}