{"name":"Init.Data.Int.Basic","instances":[{"typeNames":["Int"],"name":"instNatCastInt","className":"NatCast"},{"typeNames":["Int"],"name":"instOfNat","className":"OfNat"},{"typeNames":["Int"],"name":"Int.instInhabited","className":"Inhabited"},{"typeNames":["Int"],"name":"Int.instNegInt","className":"Neg"},{"typeNames":["Int"],"name":"Int.instAdd","className":"Add"},{"typeNames":["Int"],"name":"Int.instMul","className":"Mul"},{"typeNames":["Int"],"name":"Int.instSub","className":"Sub"},{"typeNames":["Int"],"name":"Int.instLEInt","className":"LE"},{"typeNames":["Int"],"name":"Int.instLTInt","className":"LT"},{"typeNames":["Eq"],"name":"Int.instDecidableEq","className":"Decidable"},{"typeNames":["LE.le"],"name":"Int.decLe","className":"Decidable"},{"typeNames":["LT.lt"],"name":"Int.decLt","className":"Decidable"},{"typeNames":["Int"],"name":"Int.instDvd","className":"Dvd"},{"typeNames":["Int"],"name":"Int.instNatPow","className":"NatPow"},{"typeNames":["Int"],"name":"Int.instLawfulBEq","className":"LawfulBEq"},{"typeNames":["Int"],"name":"Int.instMin","className":"Min"},{"typeNames":["Int"],"name":"Int.instMax","className":"Max"},{"typeNames":["Int"],"name":"instIntCastInt","className":"IntCast"},{"typeNames":["Int"],"name":"instCoeTailIntOfIntCast","className":"CoeTail"},{"typeNames":["Int"],"name":"instCoeHTCTIntOfIntCast","className":"CoeHTCT"}],"imports":["Init.Data.Cast","Init.Data.Nat.Div.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L433-L433","name":"instCoeHTCTIntOfIntCast","line":433,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#instCoeHTCTIntOfIntCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#instCoeHTCTIntOfIntCast\"><span class=\"name\">instCoeHTCTIntOfIntCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#IntCast\">IntCast</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeHTCT\">CoeHTCT</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L430-L430","name":"instCoeTailIntOfIntCast","line":430,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#instCoeTailIntOfIntCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#instCoeTailIntOfIntCast\"><span class=\"name\">instCoeTailIntOfIntCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#IntCast\">IntCast</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeTail\">CoeTail</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L427-L427","name":"Int.cast_eq","line":427,"kind":"theorem","docLink":"./Init/Data/Int/Basic.html#Int.cast_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.cast_eq\"><span class=\"name\">Int</span>.<span class=\"name\">cast_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L423-L425","name":"Int.cast","line":423,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.cast","doc":"The canonical homomorphism `Int → R`. In most use cases, the target type will have a ring structure,\nand this homomorphism should be a ring homomorphism.\n\n`IntCast` and `NatCast` exist to allow different libraries with their own types that can be notated\nas natural numbers to have consistent `simp` normal forms without needing to create coercion\nsimplification sets that are aware of all combinations. Libraries should make it easy to work with\n`IntCast` where possible. For instance, in Mathlib there will be such a homomorphism (and thus an\n`IntCast R` instance) whenever `R` is an additive group with a `1`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.cast\"><span class=\"name\">Int</span>.<span class=\"name\">cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#IntCast\">IntCast</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L421-L421","name":"instIntCastInt","line":421,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#instIntCastInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#instIntCastInt\"><span class=\"name\">instIntCastInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#IntCast\">IntCast</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L419-L419","name":"IntCast.intCast","line":419,"kind":"def","docLink":"./Init/Data/Int/Basic.html#IntCast.intCast","doc":"The canonical map `Int → R`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#IntCast.intCast\"><span class=\"name\">IntCast</span>.<span class=\"name\">intCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#IntCast\">IntCast</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L417-L417","name":"IntCast.mk","line":417,"kind":"ctor","docLink":"./Init/Data/Int/Basic.html#IntCast.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#IntCast.mk\"><span class=\"name\">IntCast</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">intCast</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#IntCast\">IntCast</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L407-L419","name":"IntCast","line":407,"kind":"class","docLink":"./Init/Data/Int/Basic.html#IntCast","doc":"The canonical homomorphism `Int → R`. In most use cases, the target type will have a ring structure,\nand this homomorphism should be a ring homomorphism.\n\n`IntCast` and `NatCast` exist to allow different libraries with their own types that can be notated\nas natural numbers to have consistent `simp` normal forms without needing to create coercion\nsimplification sets that are aware of all combinations. Libraries should make it easy to work with\n`IntCast` where possible. For instance, in Mathlib there will be such a homomorphism (and thus an\n`IntCast R` instance) whenever `R` is an additive group with a `1`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#IntCast\"><span class=\"name\">IntCast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L403-L403","name":"Int.instMax","line":403,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instMax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.instMax\"><span class=\"name\">Int</span>.<span class=\"name\">instMax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L401-L401","name":"Int.instMin","line":401,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instMin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.instMin\"><span class=\"name\">Int</span>.<span class=\"name\">instMin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L397-L399","name":"Int.instLawfulBEq","line":397,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instLawfulBEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.instLawfulBEq\"><span class=\"name\">Int</span>.<span class=\"name\">instLawfulBEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L394-L395","name":"Int.instNatPow","line":394,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instNatPow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.instNatPow\"><span class=\"name\">Int</span>.<span class=\"name\">instNatPow</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#NatPow\">NatPow</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L381-L392","name":"Int.pow","line":381,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.pow","doc":"Power of an integer to a natural number, usually accessed via the `^` operator.\n\nExamples:\n* `(2 : Int) ^ 4 = 16`\n* `(10 : Int) ^ 0 = 1`\n* `(0 : Int) ^ 10 = 0`\n* `(-7 : Int) ^ 3 = -343`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.pow\"><span class=\"name\">Int</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L372-L377","name":"Int.instDvd","line":372,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instDvd","doc":"Divisibility of integers. `a ∣ b` (typed as `\\|`) says that\nthere is some `c` such that `b = a * c`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.instDvd\"><span class=\"name\">Int</span>.<span class=\"name\">instDvd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Dvd\">Dvd</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L367-L368","name":"Int.toNat'","line":367,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.toNat'","doc":"Converts an integer into a natural number. Returns `none` for negative numbers.\n\nExamples:\n* `(7 : Int).toNat? = some 7`\n* `(0 : Int).toNat? = some 0`\n* `(-7 : Int).toNat? = none`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.toNat'\"><span class=\"name\">Int</span>.<span class=\"name\">toNat'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L355-L365","name":"Int.toNat?","line":355,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.toNat?","doc":"Converts an integer into a natural number. Returns `none` for negative numbers.\n\nExamples:\n* `(7 : Int).toNat? = some 7`\n* `(0 : Int).toNat? = some 0`\n* `(-7 : Int).toNat? = none`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.toNat?\"><span class=\"name\">Int</span>.<span class=\"name\">toNat?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L343-L353","name":"Int.toNat","line":343,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.toNat","doc":"Converts an integer into a natural number. Negative numbers are converted to `0`.\n\nExamples:\n* `(7 : Int).toNat = 7`\n* `(0 : Int).toNat = 0`\n* `(-7 : Int).toNat = 0`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.toNat\"><span class=\"name\">Int</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L323-L339","name":"Int.sign","line":323,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.sign","doc":"Returns the “sign” of the integer as another integer:\n* `1` for positive numbers,\n* `-1` for negative numbers, and\n* `0` for `0`.\n\nExamples:\n* `Int.sign 34 = 1`\n* `Int.sign 2 = 1`\n* `Int.sign 0 = 0`\n* `Int.sign -1 = -1`\n* `Int.sign -362 = -1`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.sign\"><span class=\"name\">Int</span>.<span class=\"name\">sign</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L304-L319","name":"Int.natAbs","line":304,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.natAbs","doc":"The absolute value of an integer is its distance from `0`.\n\nThis function is overridden by the compiler with an efficient implementation. This definition is\nthe logical model.\n\nExamples:\n * `(7 : Int).natAbs = 7`\n * `(0 : Int).natAbs = 0`\n * `((-11 : Int).natAbs = 11`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.natAbs\"><span class=\"name\">Int</span>.<span class=\"name\">natAbs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L290-L301","name":"Int.decLt","line":290,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.decLt","doc":"Decides whether `a < b`.\n\n```\n#eval `¬ ( (7 : Int) < 0 )` -- true\n#eval `¬ ( (0 : Int) < 0 )` -- true\n#eval `(7 : Int) < 10` -- true\n```\n\nImplemented by efficient native code. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.decLt\"><span class=\"name\">Int</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L277-L288","name":"Int.decLe","line":277,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.decLe","doc":"Decides whether `a ≤ b`.\n\n```\n#eval ¬ ( (7 : Int) ≤ (0 : Int) ) -- true\n#eval (0 : Int) ≤ (0 : Int) -- true\n#eval (7 : Int) ≤ (10 : Int) -- true\n```\n\nImplemented by efficient native code. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.decLe\"><span class=\"name\">Int</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L258-L259","name":"Int.instDecidableEq","line":258,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instDecidableEq","doc":"Decides whether two integers are equal. Usually accessed via the `DecidableEq Int` instance.\n\nThis function is overridden by the compiler with an efficient implementation. This definition is the\nlogical model.\n\nExamples:\n* `show (7 : Int) = (3 : Int) + (4 : Int) by decide`\n* `if (6 : Int) = (3 : Int) * (2 : Int) then \"yes\" else \"no\" = \"yes\"`\n* `(¬ (6 : Int) = (3 : Int)) = true`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.instDecidableEq\"><span class=\"name\">Int</span>.<span class=\"name\">instDecidableEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L235-L256","name":"Int.decEq","line":235,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.decEq","doc":"Decides whether two integers are equal. Usually accessed via the `DecidableEq Int` instance.\n\nThis function is overridden by the compiler with an efficient implementation. This definition is the\nlogical model.\n\nExamples:\n* `show (7 : Int) = (3 : Int) + (4 : Int) by decide`\n* `if (6 : Int) = (3 : Int) * (2 : Int) then \"yes\" else \"no\" = \"yes\"`\n* `(¬ (6 : Int) = (3 : Int)) = true`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.decEq\"><span class=\"name\">Int</span>.<span class=\"name\">decEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L231-L232","name":"Int.instLTInt","line":231,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instLTInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.instLTInt\"><span class=\"name\">Int</span>.<span class=\"name\">instLTInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L224-L229","name":"Int.lt","line":224,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.lt","doc":"Strict inequality of integers, usually accessed via the `<` operator.\n\n`a < b` when `a + 1 ≤ b`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.lt\"><span class=\"name\">Int</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L221-L222","name":"Int.instLEInt","line":221,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instLEInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.instLEInt\"><span class=\"name\">Int</span>.<span class=\"name\">instLEInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L214-L219","name":"Int.le","line":214,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.le","doc":"Non-strict inequality of integers, usually accessed via the `≤` operator.\n\n`a ≤ b` is defined as `b - a ≥ 0`, using `Int.NonNeg`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.le\"><span class=\"name\">Int</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L209-L212","name":"Int.NonNeg.mk","line":209,"kind":"ctor","docLink":"./Init/Data/Int/Basic.html#Int.NonNeg.mk","doc":"For all natural numbers `n`, `Int.ofNat n` is non-negative.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.NonNeg.mk\"><span class=\"name\">Int</span>.<span class=\"name\">NonNeg</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Int/Basic.html#Int.ofNat\">ofNat</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/Int/Basic.html#Int.NonNeg\">NonNeg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L205-L212","name":"Int.NonNeg","line":205,"kind":"inductive","docLink":"./Init/Data/Int/Basic.html#Int.NonNeg","doc":"An integer is non-negative if it is equal to a natural number.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.NonNeg\"><span class=\"name\">Int</span>.<span class=\"name\">NonNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L202-L203","name":"Int.instSub","line":202,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instSub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.instSub\"><span class=\"name\">Int</span>.<span class=\"name\">instSub</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L188-L200","name":"Int.sub","line":188,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.sub","doc":"Subtraction of integers, usually accessed via the `-` operator.\n\nThis function is overridden by the compiler with an efficient implementation. This definition is\nthe logical model.\n\nExamples:\n* `(63 : Int) - (6 : Int) = 57`\n* `(7 : Int) - (0 : Int) = 7`\n* `(0 : Int) - (7 : Int) = -7`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.sub\"><span class=\"name\">Int</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L184-L185","name":"Int.instMul","line":184,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.instMul\"><span class=\"name\">Int</span>.<span class=\"name\">instMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L165-L182","name":"Int.mul","line":165,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.mul","doc":"Multiplication of integers, usually accessed via the `*` operator.\n\nThis function is overridden by the compiler with an efficient implementation. This definition is\nthe logical model.\n\nExamples:\n * `(63 : Int) * (6 : Int) = 378`\n * `(6 : Int) * (-6 : Int) = -36`\n * `(7 : Int) * (0 : Int) = 0`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.mul\"><span class=\"name\">Int</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L161-L162","name":"Int.instAdd","line":161,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.instAdd\"><span class=\"name\">Int</span>.<span class=\"name\">instAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L143-L159","name":"Int.add","line":143,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.add","doc":"Addition of integers, usually accessed via the `+` operator.\n\nThis function is overridden by the compiler with an efficient implementation. This definition is\nthe logical model.\n\nExamples:\n * `(7 : Int) + (6 : Int) = 13`\n * `(6 : Int) + (-6 : Int) = 0`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.add\"><span class=\"name\">Int</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L129-L140","name":"Int.subNatNat","line":129,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.subNatNat","doc":"Non-truncating subtraction of two natural numbers.\n\nExamples:\n* `Int.subNatNat 5 2 = 3`\n* `Int.subNatNat 2 5 = -3`\n* `Int.subNatNat 0 13 = -13`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.subNatNat\"><span class=\"name\">Int</span>.<span class=\"name\">subNatNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L125-L127","name":"Int.instNegInt","line":125,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instNegInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.instNegInt\"><span class=\"name\">Int</span>.<span class=\"name\">instNegInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L100-L115","name":"Int.neg","line":100,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.neg","doc":"Negation of integers, usually accessed via the `-` prefix operator.\n\nThis function is overridden by the compiler with an efficient implementation. This definition is\nthe logical model.\n\nExamples:\n * `-(6 : Int) = -6`\n * `-(-6 : Int) = 6`\n * `(12 : Int).neg = -12`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.neg\"><span class=\"name\">Int</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L88-L97","name":"Int.negOfNat","line":88,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.negOfNat","doc":"Negation of natural numbers.\n\nExamples:\n* `Int.negOfNat 6 = -6`\n* `Int.negOfNat 0 = 0`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.negOfNat\"><span class=\"name\">Int</span>.<span class=\"name\">negOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L86-L86","name":"Int.ofNat_two","line":86,"kind":"theorem","docLink":"./Init/Data/Int/Basic.html#Int.ofNat_two","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.ofNat_two\"><span class=\"name\">Int</span>.<span class=\"name\">ofNat_two</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L84-L84","name":"Int.ofNat_one","line":84,"kind":"theorem","docLink":"./Init/Data/Int/Basic.html#Int.ofNat_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.ofNat_one\"><span class=\"name\">Int</span>.<span class=\"name\">ofNat_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L82-L82","name":"Int.ofNat_zero","line":82,"kind":"theorem","docLink":"./Init/Data/Int/Basic.html#Int.ofNat_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.ofNat_zero\"><span class=\"name\">Int</span>.<span class=\"name\">ofNat_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L80-L80","name":"Int.ofNat_eq_coe","line":80,"kind":"theorem","docLink":"./Init/Data/Int/Basic.html#Int.ofNat_eq_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.ofNat_eq_coe\"><span class=\"name\">Int</span>.<span class=\"name\">ofNat_eq_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.ofNat\">ofNat</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L76-L76","name":"Int.zero_ne_one","line":76,"kind":"theorem","docLink":"./Init/Data/Int/Basic.html#Int.zero_ne_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.zero_ne_one\"><span class=\"name\">Int</span>.<span class=\"name\">zero_ne_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L74-L74","name":"Int.default_eq_zero","line":74,"kind":"theorem","docLink":"./Init/Data/Int/Basic.html#Int.default_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.default_eq_zero\"><span class=\"name\">Int</span>.<span class=\"name\">default_eq_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Inhabited.default\">default</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L72-L72","name":"Int.instInhabited","line":72,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#Int.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.instInhabited\"><span class=\"name\">Int</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L66-L70","name":"Int.«term-[_+1]»","line":66,"kind":"def","docLink":"./Init/Data/Int/Basic.html#Int.«term-[_+1]»","doc":"`-[n+1]` is suggestive notation for `negSucc n`, which is the second constructor of\n`Int` for making strictly negative numbers by mapping `n : Nat` to `-(n + 1)`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.«term-[_+1]»\"><span class=\"name\">Int</span>.<span class=\"name\">«term-[_+1]»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L61-L62","name":"instOfNat","line":61,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#instOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#instOfNat\"><span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L59-L59","name":"instNatCastInt","line":59,"kind":"instance","docLink":"./Init/Data/Int/Basic.html#instNatCastInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#instNatCastInt\"><span class=\"name\">instNatCastInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Cast.html#NatCast\">NatCast</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L49-L54","name":"Int.negSucc","line":49,"kind":"ctor","docLink":"./Init/Data/Int/Basic.html#Int.negSucc","doc":"The negation of the successor of a natural number is an integer.\n\nThis constructor covers the negative integers (from `-1` to `-∞`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.negSucc\"><span class=\"name\">Int</span>.<span class=\"name\">negSucc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L43-L48","name":"Int.ofNat","line":43,"kind":"ctor","docLink":"./Init/Data/Int/Basic.html#Int.ofNat","doc":"A natural number is an integer.\n\nThis constructor covers the non-negative integers (from `0` to `∞`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int.ofNat\"><span class=\"name\">Int</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/Int/Basic.lean#L32-L54","name":"Int","line":32,"kind":"inductive","docLink":"./Init/Data/Int/Basic.html#Int","doc":"The integers.\n\nThis type is special-cased by the compiler and overridden with an efficient implementation. The\nruntime has a special representation for `Int` that stores “small” signed numbers directly, while\nlarger numbers use a fast arbitrary-precision arithmetic library (usually\n[GMP](https://gmplib.org/)). A “small number” is an integer that can be encoded with one fewer bits\nthan the platform's pointer size (i.e. 63 bits on 64-bit architectures and 31 bits on 32-bit\narchitectures).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Basic.html#Int\"><span class=\"name\">Int</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}