{"name":"Lean.Compiler.LCNF.PrettyPrinter","instances":[],"imports":["Lean.PrettyPrinter.Delaborator.Options","Lean.Compiler.LCNF.CompilerM","Lean.Compiler.LCNF.Internalize"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L163-L169","name":"Lean.Compiler.LCNF.ppCode'","line":163,"kind":"def","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.ppCode'","doc":"Similar to `ppCode`, but in `CoreM`, and it does not assume\n`code` has already been internalized.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.ppCode'\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ppCode'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L154-L161","name":"Lean.Compiler.LCNF.ppDecl'","line":154,"kind":"def","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.ppDecl'","doc":"Similar to `ppDecl`, but in `CoreM`, and it does not assume\n`decl` has already been internalized.\nThis function is used for debugging purposes.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.ppDecl'\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ppDecl'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L143-L152","name":"Lean.Compiler.LCNF.runCompilerWithoutModifyingState","line":143,"kind":"def","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.runCompilerWithoutModifyingState","doc":"Execute `x` in `CoreM` without modifying `Core`s state.\nThis is useful if we want make sure we do not affect the next free variable id.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.runCompilerWithoutModifyingState\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">runCompilerWithoutModifyingState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L139-L141","name":"Lean.Compiler.LCNF.ppFunDecl","line":139,"kind":"def","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.ppFunDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.ppFunDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ppFunDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L135-L137","name":"Lean.Compiler.LCNF.ppDecl","line":135,"kind":"def","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.ppDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.ppDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ppDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L132-L133","name":"Lean.Compiler.LCNF.ppLetValue","line":132,"kind":"def","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.ppLetValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.ppLetValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ppLetValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L129-L130","name":"Lean.Compiler.LCNF.ppCode","line":129,"kind":"def","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.ppCode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.ppCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ppCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L123-L125","name":"Lean.Compiler.LCNF.PP.run","line":123,"kind":"def","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L117-L120","name":"Lean.Compiler.LCNF.PP.ppDeclValue","line":117,"kind":"def","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppDeclValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppDeclValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">ppDeclValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue\">DeclValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L103-L115","name":"Lean.Compiler.LCNF.PP.ppCode","line":103,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppCode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">ppCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L98-L101","name":"Lean.Compiler.LCNF.PP.ppAlt","line":98,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppAlt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">ppAlt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alt</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L95-L96","name":"Lean.Compiler.LCNF.PP.ppFunDecl","line":95,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppFunDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppFunDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">ppFunDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">funDecl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L88-L92","name":"Lean.Compiler.LCNF.PP.getFunType","line":88,"kind":"def","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.getFunType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.getFunType\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">getFunType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L82-L86","name":"Lean.Compiler.LCNF.PP.ppLetDecl","line":82,"kind":"def","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppLetDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppLetDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">ppLetDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">letDecl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L79-L80","name":"Lean.Compiler.LCNF.PP.ppParams","line":79,"kind":"def","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">ppParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L72-L77","name":"Lean.Compiler.LCNF.PP.ppParam","line":72,"kind":"def","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppParam","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">ppParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">param</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L64-L70","name":"Lean.Compiler.LCNF.PP.ppLetValue","line":64,"kind":"def","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppLetValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppLetValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">ppLetValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L59-L62","name":"Lean.Compiler.LCNF.PP.ppLitValue","line":59,"kind":"def","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppLitValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppLitValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">ppLitValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lit</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LitValue\">LitValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L56-L57","name":"Lean.Compiler.LCNF.PP.ppArgs","line":56,"kind":"def","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">ppArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L43-L54","name":"Lean.Compiler.LCNF.PP.ppArg","line":43,"kind":"def","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">ppArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L40-L41","name":"Lean.Compiler.LCNF.PP.ppExpr","line":40,"kind":"def","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">ppExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L34-L38","name":"Lean.Compiler.LCNF.PP.ppFVar","line":34,"kind":"def","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppFVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">ppFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L17-L17","name":"Lean.Compiler.LCNF.PP.M","line":17,"kind":"def","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}