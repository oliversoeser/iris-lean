{"name":"Init.Data.UInt.Basic","instances":[{"typeNames":["UInt8"],"name":"instAddUInt8","className":"Add"},{"typeNames":["UInt8"],"name":"instSubUInt8","className":"Sub"},{"typeNames":["UInt8"],"name":"instMulUInt8","className":"Mul"},{"typeNames":["UInt8","Nat"],"name":"instPowUInt8Nat","className":"Pow"},{"typeNames":["UInt8"],"name":"instModUInt8","className":"Mod"},{"typeNames":["UInt8","Nat","UInt8"],"name":"instHModUInt8Nat","className":"HMod"},{"typeNames":["UInt8"],"name":"instDivUInt8","className":"Div"},{"typeNames":["UInt8"],"name":"instLTUInt8","className":"LT"},{"typeNames":["UInt8"],"name":"instLEUInt8","className":"LE"},{"typeNames":["UInt8"],"name":"instComplementUInt8","className":"Complement"},{"typeNames":["UInt8"],"name":"instNegUInt8","className":"Neg"},{"typeNames":["UInt8"],"name":"instAndOpUInt8","className":"AndOp"},{"typeNames":["UInt8"],"name":"instOrOpUInt8","className":"OrOp"},{"typeNames":["UInt8"],"name":"instXorUInt8","className":"Xor"},{"typeNames":["UInt8"],"name":"instShiftLeftUInt8","className":"ShiftLeft"},{"typeNames":["UInt8"],"name":"instShiftRightUInt8","className":"ShiftRight"},{"typeNames":["LT.lt"],"name":"UInt8.decLt","className":"Decidable"},{"typeNames":["LE.le"],"name":"UInt8.decLe","className":"Decidable"},{"typeNames":["UInt8"],"name":"instMaxUInt8","className":"Max"},{"typeNames":["UInt8"],"name":"instMinUInt8","className":"Min"},{"typeNames":["UInt16"],"name":"instAddUInt16","className":"Add"},{"typeNames":["UInt16"],"name":"instSubUInt16","className":"Sub"},{"typeNames":["UInt16"],"name":"instMulUInt16","className":"Mul"},{"typeNames":["UInt16","Nat"],"name":"instPowUInt16Nat","className":"Pow"},{"typeNames":["UInt16"],"name":"instModUInt16","className":"Mod"},{"typeNames":["UInt16","Nat","UInt16"],"name":"instHModUInt16Nat","className":"HMod"},{"typeNames":["UInt16"],"name":"instDivUInt16","className":"Div"},{"typeNames":["UInt16"],"name":"instLTUInt16","className":"LT"},{"typeNames":["UInt16"],"name":"instLEUInt16","className":"LE"},{"typeNames":["UInt16"],"name":"instComplementUInt16","className":"Complement"},{"typeNames":["UInt16"],"name":"instNegUInt16","className":"Neg"},{"typeNames":["UInt16"],"name":"instAndOpUInt16","className":"AndOp"},{"typeNames":["UInt16"],"name":"instOrOpUInt16","className":"OrOp"},{"typeNames":["UInt16"],"name":"instXorUInt16","className":"Xor"},{"typeNames":["UInt16"],"name":"instShiftLeftUInt16","className":"ShiftLeft"},{"typeNames":["UInt16"],"name":"instShiftRightUInt16","className":"ShiftRight"},{"typeNames":["LT.lt"],"name":"UInt16.decLt","className":"Decidable"},{"typeNames":["LE.le"],"name":"UInt16.decLe","className":"Decidable"},{"typeNames":["UInt16"],"name":"instMaxUInt16","className":"Max"},{"typeNames":["UInt16"],"name":"instMinUInt16","className":"Min"},{"typeNames":["UInt32"],"name":"instAddUInt32","className":"Add"},{"typeNames":["UInt32"],"name":"instSubUInt32","className":"Sub"},{"typeNames":["UInt32"],"name":"instMulUInt32","className":"Mul"},{"typeNames":["UInt32","Nat"],"name":"instPowUInt32Nat","className":"Pow"},{"typeNames":["UInt32"],"name":"instModUInt32","className":"Mod"},{"typeNames":["UInt32","Nat","UInt32"],"name":"instHModUInt32Nat","className":"HMod"},{"typeNames":["UInt32"],"name":"instDivUInt32","className":"Div"},{"typeNames":["UInt32"],"name":"instComplementUInt32","className":"Complement"},{"typeNames":["UInt32"],"name":"instNegUInt32","className":"Neg"},{"typeNames":["UInt32"],"name":"instAndOpUInt32","className":"AndOp"},{"typeNames":["UInt32"],"name":"instOrOpUInt32","className":"OrOp"},{"typeNames":["UInt32"],"name":"instXorUInt32","className":"Xor"},{"typeNames":["UInt32"],"name":"instShiftLeftUInt32","className":"ShiftLeft"},{"typeNames":["UInt32"],"name":"instShiftRightUInt32","className":"ShiftRight"},{"typeNames":["UInt64"],"name":"instAddUInt64","className":"Add"},{"typeNames":["UInt64"],"name":"instSubUInt64","className":"Sub"},{"typeNames":["UInt64"],"name":"instMulUInt64","className":"Mul"},{"typeNames":["UInt64","Nat"],"name":"instPowUInt64Nat","className":"Pow"},{"typeNames":["UInt64"],"name":"instModUInt64","className":"Mod"},{"typeNames":["UInt64","Nat","UInt64"],"name":"instHModUInt64Nat","className":"HMod"},{"typeNames":["UInt64"],"name":"instDivUInt64","className":"Div"},{"typeNames":["UInt64"],"name":"instLTUInt64","className":"LT"},{"typeNames":["UInt64"],"name":"instLEUInt64","className":"LE"},{"typeNames":["UInt64"],"name":"instComplementUInt64","className":"Complement"},{"typeNames":["UInt64"],"name":"instNegUInt64","className":"Neg"},{"typeNames":["UInt64"],"name":"instAndOpUInt64","className":"AndOp"},{"typeNames":["UInt64"],"name":"instOrOpUInt64","className":"OrOp"},{"typeNames":["UInt64"],"name":"instXorUInt64","className":"Xor"},{"typeNames":["UInt64"],"name":"instShiftLeftUInt64","className":"ShiftLeft"},{"typeNames":["UInt64"],"name":"instShiftRightUInt64","className":"ShiftRight"},{"typeNames":["LT.lt"],"name":"UInt64.decLt","className":"Decidable"},{"typeNames":["LE.le"],"name":"UInt64.decLe","className":"Decidable"},{"typeNames":["UInt64"],"name":"instMaxUInt64","className":"Max"},{"typeNames":["UInt64"],"name":"instMinUInt64","className":"Min"},{"typeNames":["USize"],"name":"instMulUSize","className":"Mul"},{"typeNames":["USize","Nat"],"name":"instPowUSizeNat","className":"Pow"},{"typeNames":["USize"],"name":"instModUSize","className":"Mod"},{"typeNames":["USize","Nat","USize"],"name":"instHModUSizeNat","className":"HMod"},{"typeNames":["USize"],"name":"instDivUSize","className":"Div"},{"typeNames":["USize"],"name":"instComplementUSize","className":"Complement"},{"typeNames":["USize"],"name":"instNegUSize","className":"Neg"},{"typeNames":["USize"],"name":"instAndOpUSize","className":"AndOp"},{"typeNames":["USize"],"name":"instOrOpUSize","className":"OrOp"},{"typeNames":["USize"],"name":"instXorUSize","className":"Xor"},{"typeNames":["USize"],"name":"instShiftLeftUSize","className":"ShiftLeft"},{"typeNames":["USize"],"name":"instShiftRightUSize","className":"ShiftRight"},{"typeNames":["USize"],"name":"instMaxUSize","className":"Max"},{"typeNames":["USize"],"name":"instMinUSize","className":"Min"}],"imports":["Init.Data.UInt.BasicAux","Init.Data.BitVec.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L1068-L1068","name":"instMinUSize","line":1068,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instMinUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMinUSize\"><span class=\"name\">instMinUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L1067-L1067","name":"instMaxUSize","line":1067,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instMaxUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMaxUSize\"><span class=\"name\">instMaxUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L1061-L1065","name":"Bool.toUSize","line":1061,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#Bool.toUSize","doc":"Converts `true` to `1` and `false` to `0`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#Bool.toUSize\"><span class=\"name\">Bool</span>.<span class=\"name\">toUSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L1059-L1059","name":"instShiftRightUSize","line":1059,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instShiftRightUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftRightUSize\"><span class=\"name\">instShiftRightUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L1058-L1058","name":"instShiftLeftUSize","line":1058,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instShiftLeftUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftLeftUSize\"><span class=\"name\">instShiftLeftUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L1057-L1057","name":"instXorUSize","line":1057,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instXorUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instXorUSize\"><span class=\"name\">instXorUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Xor\">Xor</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L1056-L1056","name":"instOrOpUSize","line":1056,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instOrOpUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instOrOpUSize\"><span class=\"name\">instOrOpUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L1055-L1055","name":"instAndOpUSize","line":1055,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instAndOpUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instAndOpUSize\"><span class=\"name\">instAndOpUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L1054-L1054","name":"instNegUSize","line":1054,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instNegUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instNegUSize\"><span class=\"name\">instNegUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L1053-L1053","name":"instComplementUSize","line":1053,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instComplementUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instComplementUSize\"><span class=\"name\">instComplementUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L1045-L1051","name":"USize.neg","line":1045,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.neg","doc":"Negation of word-sized unsigned integers, computed modulo `USize.size`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.neg\"><span class=\"name\">USize</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L1035-L1044","name":"USize.complement","line":1035,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.complement","doc":"Bitwise complement, also known as bitwise negation, for word-sized unsigned integers. Usually\naccessed via the `~~~` prefix operator.\n\nEach bit of the resulting integer is the opposite of the corresponding bit of the input integer.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.complement\"><span class=\"name\">USize</span>.<span class=\"name\">complement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L1033-L1033","name":"instDivUSize","line":1033,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instDivUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instDivUSize\"><span class=\"name\">instDivUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L1031-L1031","name":"instHModUSizeNat","line":1031,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instHModUSizeNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instHModUSizeNat\"><span class=\"name\">instHModUSizeNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HMod\">HMod</a> <a href=\"./Init/Prelude.html#USize\">USize</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L1028-L1028","name":"instModUSize","line":1028,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instModUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instModUSize\"><span class=\"name\">instModUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L1027-L1027","name":"instPowUSizeNat","line":1027,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instPowUSizeNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instPowUSizeNat\"><span class=\"name\">instPowUSizeNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <a href=\"./Init/Prelude.html#USize\">USize</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L1026-L1026","name":"instMulUSize","line":1026,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instMulUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMulUSize\"><span class=\"name\">instMulUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L1016-L1024","name":"USize.toUInt64","line":1016,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.toUInt64","doc":"Converts word-sized unsigned integers to 32-bit unsigned integers. This cannot overflow because\n`USize.size` is either `2^32` or `2^64`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.toUInt64\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L1008-L1015","name":"UInt64.toUSize","line":1008,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.toUSize","doc":"Converts 64-bit unsigned integers to word-sized unsigned integers. On 32-bit machines, this may\noverflow, which results in the value wrapping around (that is, it is reduced modulo `USize.size`).\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.toUSize\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L1000-L1007","name":"USize.toUInt32","line":1000,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.toUInt32","doc":"Converts word-sized unsigned integers to 32-bit unsigned integers. Wraps around on overflow, which\nmight occur on 64-bit architectures.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.toUInt32\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L993-L999","name":"UInt32.toUSize","line":993,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.toUSize","doc":"Converts 32-bit unsigned integers to word-sized unsigned integers.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.toUSize\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L986-L992","name":"USize.toUInt16","line":986,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.toUInt16","doc":"Converts word-sized unsigned integers to 16-bit unsigned integers. Wraps around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.toUInt16\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L978-L985","name":"UInt16.toUSize","line":978,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.toUSize","doc":"Converts 16-bit unsigned integers to word-sized unsigned integers.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.toUSize\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L971-L977","name":"USize.toUInt8","line":971,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.toUInt8","doc":"Converts word-sized unsigned integers to 8-bit unsigned integers. Wraps around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.toUInt8\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L963-L970","name":"UInt8.toUSize","line":963,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.toUSize","doc":"Converts 8-bit unsigned integers to word-sized unsigned integers.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.toUSize\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L954-L962","name":"USize.ofNat32","line":954,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.ofNat32","doc":"Converts a natural number to a `USize`. Overflow is impossible on any supported platform because\n`USize.size` is either `2^32` or `2^64`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.ofNat32\"><span class=\"name\">USize</span>.<span class=\"name\">ofNat32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">4294967296</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L947-L953","name":"USize.shiftRight","line":947,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.shiftRight","doc":"Bitwise right shift for word-sized unsigned integers. Usually accessed via the `>>>` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.shiftRight\"><span class=\"name\">USize</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L940-L946","name":"USize.shiftLeft","line":940,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.shiftLeft","doc":"Bitwise left shift for word-sized unsigned integers. Usually accessed via the `<<<` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.shiftLeft\"><span class=\"name\">USize</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L930-L939","name":"USize.xor","line":930,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.xor","doc":"Bitwise exclusive or for word-sized unsigned integers. Usually accessed via the `^^^` operator.\n\nEach bit of the resulting integer is set if exactly one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.xor\"><span class=\"name\">USize</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L920-L929","name":"USize.lor","line":920,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.lor","doc":"Bitwise or for word-sized unsigned integers. Usually accessed via the `|||` operator.\n\nEach bit of the resulting integer is set if at least one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.lor\"><span class=\"name\">USize</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L911-L919","name":"USize.land","line":911,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.land","doc":"Bitwise and for word-sized unsigned integers. Usually accessed via the `&&&` operator.\n\nEach bit of the resulting integer is set if the corresponding bits of both input integers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.land\"><span class=\"name\">USize</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L909-L910","name":"USize.modn","line":909,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.modn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.modn\"><span class=\"name\">USize</span>.<span class=\"name\">modn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L891-L905","name":"USize.mod","line":891,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.mod","doc":"The modulo operator for word-sized unsigned integers, which computes the remainder when dividing one\ninteger by another. Usually accessed via the `%` operator.\n\nWhen the divisor is `0`, the result is the dividend rather than an error.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `USize.mod 5 2 = 1`\n* `USize.mod 4 2 = 0`\n* `USize.mod 4 0 = 4`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.mod\"><span class=\"name\">USize</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L880-L890","name":"USize.pow","line":880,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.pow","doc":"The power operation, raising a word-sized unsigned integer to a natural number power,\nwrapping around on overflow. Usually accessed via the `^` operator.\n\nThis function is currently *not* overridden at runtime with an efficient implementation,\nand should be used with caution. See https://github.com/leanprover/lean4/issues/7887.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.pow\"><span class=\"name\">USize</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L870-L879","name":"USize.div","line":870,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.div","doc":"Unsigned division for word-sized unsigned integers, discarding the remainder. Usually accessed\nvia the `/` operator.\n\nThis operation is sometimes called “floor division.” Division by zero is defined to be zero.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.div\"><span class=\"name\">USize</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L862-L869","name":"USize.mul","line":862,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.mul","doc":"Multiplies two word-sized unsigned integers, wrapping around on overflow.  Usually accessed via the\n`*` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.mul\"><span class=\"name\">USize</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L858-L860","name":"le_usize_size","line":858,"kind":"theorem","docLink":"./Init/Data/UInt/Basic.html#le_usize_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#le_usize_size\"><span class=\"name\">le_usize_size</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">4294967296</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Prelude.html#USize.size\">USize.size</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L854-L856","name":"usize_size_le","line":854,"kind":"theorem","docLink":"./Init/Data/UInt/Basic.html#usize_size_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#usize_size_le\"><span class=\"name\">usize_size_le</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize.size\">USize.size</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">18446744073709551616</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L852-L852","name":"USize.size_le","line":852,"kind":"theorem","docLink":"./Init/Data/UInt/Basic.html#USize.size_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.size_le\"><span class=\"name\">USize</span>.<span class=\"name\">size_le</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize.size\">size</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">64</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L851-L851","name":"USize.le_size","line":851,"kind":"theorem","docLink":"./Init/Data/UInt/Basic.html#USize.le_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.le_size\"><span class=\"name\">USize</span>.<span class=\"name\">le_size</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Prelude.html#USize.size\">size</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L848-L849","name":"USize.ofInt","line":848,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.ofInt","doc":"Converts an `Int` to a `USize` by taking the (non-negative remainder of the division by `2 ^ numBits`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.ofInt\"><span class=\"name\">USize</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L844-L846","name":"USize.ofNatCore","line":844,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.ofNatCore","doc":"Converts a natural number to a `USize`. Requires a proof that the number is small enough to be\nrepresentable without overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.ofNatCore\"><span class=\"name\">USize</span>.<span class=\"name\">ofNatCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#USize.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L841-L843","name":"USize.mk","line":841,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.mk","doc":"Creates a `USize` from a `BitVec System.Platform.numBits`. This function is overridden with a\nnative implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.mk\"><span class=\"name\">USize</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bitVec</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L839-L840","name":"USize.ofFin","line":839,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#USize.ofFin","doc":"Converts a `Fin USize.size` into the corresponding `USize`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.ofFin\"><span class=\"name\">USize</span>.<span class=\"name\">ofFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#USize.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L837-L837","name":"instMinUInt64","line":837,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instMinUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMinUInt64\"><span class=\"name\">instMinUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L836-L836","name":"instMaxUInt64","line":836,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instMaxUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMaxUInt64\"><span class=\"name\">instMaxUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L818-L832","name":"UInt64.decLe","line":818,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#UInt64.decLe","doc":"Decides whether one 64-bit unsigned integer is less than or equal to another. Usually accessed via the\n`DecidableLE UInt64` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if (15 : UInt64) ≤ 15 then \"yes\" else \"no\") = \"yes\"`\n * `(if (15 : UInt64) ≤ 5 then \"yes\" else \"no\") = \"no\"`\n * `(if (5 : UInt64) ≤ 15 then \"yes\" else \"no\") = \"yes\"`\n * `show (7 : UInt64) ≤ 7 by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.decLe\"><span class=\"name\">UInt64</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L803-L816","name":"UInt64.decLt","line":803,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#UInt64.decLt","doc":"Decides whether one 64-bit unsigned integer is strictly less than another. Usually accessed via the\n`DecidableLT UInt64` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if (6 : UInt64) < 7 then \"yes\" else \"no\") = \"yes\"`\n * `(if (5 : UInt64) < 5 then \"yes\" else \"no\") = \"no\"`\n * `show ¬((7 : UInt64) < 7) by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.decLt\"><span class=\"name\">UInt64</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L797-L801","name":"Bool.toUInt64","line":797,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#Bool.toUInt64","doc":"Converts `true` to `1` and `false` to `0`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#Bool.toUInt64\"><span class=\"name\">Bool</span>.<span class=\"name\">toUInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L795-L795","name":"instShiftRightUInt64","line":795,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instShiftRightUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftRightUInt64\"><span class=\"name\">instShiftRightUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L794-L794","name":"instShiftLeftUInt64","line":794,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instShiftLeftUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftLeftUInt64\"><span class=\"name\">instShiftLeftUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L793-L793","name":"instXorUInt64","line":793,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instXorUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instXorUInt64\"><span class=\"name\">instXorUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Xor\">Xor</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L792-L792","name":"instOrOpUInt64","line":792,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instOrOpUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instOrOpUInt64\"><span class=\"name\">instOrOpUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L791-L791","name":"instAndOpUInt64","line":791,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instAndOpUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instAndOpUInt64\"><span class=\"name\">instAndOpUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L790-L790","name":"instNegUInt64","line":790,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instNegUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instNegUInt64\"><span class=\"name\">instNegUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L789-L789","name":"instComplementUInt64","line":789,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instComplementUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instComplementUInt64\"><span class=\"name\">instComplementUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L779-L787","name":"UInt64.neg","line":779,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.neg","doc":"Negation of 64-bit unsigned integers, computed modulo `UInt64.size`.\n\n`UInt64.neg a` is equivalent to `18_446_744_073_709_551_615 - a + 1`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.neg\"><span class=\"name\">UInt64</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L769-L778","name":"UInt64.complement","line":769,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.complement","doc":"Bitwise complement, also known as bitwise negation, for 64-bit unsigned integers. Usually accessed\nvia the `~~~` prefix operator.\n\nEach bit of the resulting integer is the opposite of the corresponding bit of the input integer.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.complement\"><span class=\"name\">UInt64</span>.<span class=\"name\">complement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L767-L767","name":"instLEUInt64","line":767,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instLEUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instLEUInt64\"><span class=\"name\">instLEUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L766-L766","name":"instLTUInt64","line":766,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instLTUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instLTUInt64\"><span class=\"name\">instLTUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L765-L765","name":"instDivUInt64","line":765,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instDivUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instDivUInt64\"><span class=\"name\">instDivUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L763-L763","name":"instHModUInt64Nat","line":763,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instHModUInt64Nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instHModUInt64Nat\"><span class=\"name\">instHModUInt64Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HMod\">HMod</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L760-L760","name":"instModUInt64","line":760,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instModUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instModUInt64\"><span class=\"name\">instModUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L759-L759","name":"instPowUInt64Nat","line":759,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instPowUInt64Nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instPowUInt64Nat\"><span class=\"name\">instPowUInt64Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L758-L758","name":"instMulUInt64","line":758,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instMulUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMulUInt64\"><span class=\"name\">instMulUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L757-L757","name":"instSubUInt64","line":757,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instSubUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instSubUInt64\"><span class=\"name\">instSubUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L756-L756","name":"instAddUInt64","line":756,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instAddUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instAddUInt64\"><span class=\"name\">instAddUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L750-L754","name":"UInt64.le","line":750,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.le","doc":"Non-strict inequality of 64-bit unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `≤` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.le\"><span class=\"name\">UInt64</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L745-L749","name":"UInt64.lt","line":745,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.lt","doc":"Strict inequality of 64-bit unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `<` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.lt\"><span class=\"name\">UInt64</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L738-L744","name":"UInt64.shiftRight","line":738,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.shiftRight","doc":"Bitwise right shift for 64-bit unsigned integers. Usually accessed via the `>>>` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.shiftRight\"><span class=\"name\">UInt64</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L731-L737","name":"UInt64.shiftLeft","line":731,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.shiftLeft","doc":"Bitwise left shift for 64-bit unsigned integers. Usually accessed via the `<<<` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.shiftLeft\"><span class=\"name\">UInt64</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L721-L730","name":"UInt64.xor","line":721,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.xor","doc":"Bitwise exclusive or for 64-bit unsigned integers. Usually accessed via the `^^^` operator.\n\nEach bit of the resulting integer is set if exactly one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.xor\"><span class=\"name\">UInt64</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L711-L720","name":"UInt64.lor","line":711,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.lor","doc":"Bitwise or for 64-bit unsigned integers. Usually accessed via the `|||` operator.\n\nEach bit of the resulting integer is set if at least one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.lor\"><span class=\"name\">UInt64</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L702-L710","name":"UInt64.land","line":702,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.land","doc":"Bitwise and for 64-bit unsigned integers. Usually accessed via the `&&&` operator.\n\nEach bit of the resulting integer is set if the corresponding bits of both input integers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.land\"><span class=\"name\">UInt64</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L700-L701","name":"UInt64.modn","line":700,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.modn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.modn\"><span class=\"name\">UInt64</span>.<span class=\"name\">modn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L682-L696","name":"UInt64.mod","line":682,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.mod","doc":"The modulo operator for 64-bit unsigned integers, which computes the remainder when dividing one\ninteger by another. Usually accessed via the `%` operator.\n\nWhen the divisor is `0`, the result is the dividend rather than an error.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `UInt64.mod 5 2 = 1`\n* `UInt64.mod 4 2 = 0`\n* `UInt64.mod 4 0 = 4`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.mod\"><span class=\"name\">UInt64</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L671-L681","name":"UInt64.pow","line":671,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.pow","doc":"The power operation, raising a 64-bit unsigned integer to a natural number power,\nwrapping around on overflow. Usually accessed via the `^` operator.\n\nThis function is currently *not* overridden at runtime with an efficient implementation,\nand should be used with caution. See https://github.com/leanprover/lean4/issues/7887.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.pow\"><span class=\"name\">UInt64</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L661-L670","name":"UInt64.div","line":661,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.div","doc":"Unsigned division for 64-bit unsigned integers, discarding the remainder. Usually accessed\nvia the `/` operator.\n\nThis operation is sometimes called “floor division.” Division by zero is defined to be zero.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.div\"><span class=\"name\">UInt64</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L653-L660","name":"UInt64.mul","line":653,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.mul","doc":"Multiplies two 64-bit unsigned integers, wrapping around on overflow.  Usually accessed via the `*`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.mul\"><span class=\"name\">UInt64</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L645-L652","name":"UInt64.sub","line":645,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.sub","doc":"Subtracts one 64-bit unsigned integer from another, wrapping around on underflow. Usually accessed\nvia the `-` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.sub\"><span class=\"name\">UInt64</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L637-L644","name":"UInt64.add","line":637,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.add","doc":"Adds two 64-bit unsigned integers, wrapping around on overflow. Usually accessed via the `+`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.add\"><span class=\"name\">UInt64</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L634-L635","name":"UInt64.ofInt","line":634,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.ofInt","doc":"Converts an `Int` to a `UInt64` by taking the (non-negative remainder of the division by `2 ^ 64`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.ofInt\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L630-L632","name":"UInt64.ofNatCore","line":630,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.ofNatCore","doc":"Converts a natural number to a 64-bit unsigned integer. Requires a proof that the number is small\nenough to be representable without overflow; it must be smaller than `2^64`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.ofNatCore\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofNatCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt64.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L627-L629","name":"UInt64.mk","line":627,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.mk","doc":"Creates a `UInt64` from a `BitVec 64`. This function is overridden with a native implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.mk\"><span class=\"name\">UInt64</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bitVec</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L625-L626","name":"UInt64.ofFin","line":625,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt64.ofFin","doc":"Converts a `Fin UInt64.size` into the corresponding `UInt64`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.ofFin\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt64.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L619-L623","name":"Bool.toUInt32","line":619,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#Bool.toUInt32","doc":"Converts `true` to `1` and `false` to `0`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#Bool.toUInt32\"><span class=\"name\">Bool</span>.<span class=\"name\">toUInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L617-L617","name":"instShiftRightUInt32","line":617,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instShiftRightUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftRightUInt32\"><span class=\"name\">instShiftRightUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L616-L616","name":"instShiftLeftUInt32","line":616,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instShiftLeftUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftLeftUInt32\"><span class=\"name\">instShiftLeftUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L615-L615","name":"instXorUInt32","line":615,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instXorUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instXorUInt32\"><span class=\"name\">instXorUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Xor\">Xor</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L614-L614","name":"instOrOpUInt32","line":614,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instOrOpUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instOrOpUInt32\"><span class=\"name\">instOrOpUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L613-L613","name":"instAndOpUInt32","line":613,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instAndOpUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instAndOpUInt32\"><span class=\"name\">instAndOpUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L612-L612","name":"instNegUInt32","line":612,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instNegUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instNegUInt32\"><span class=\"name\">instNegUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L611-L611","name":"instComplementUInt32","line":611,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instComplementUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instComplementUInt32\"><span class=\"name\">instComplementUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L601-L609","name":"UInt32.neg","line":601,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.neg","doc":"Negation of 32-bit unsigned integers, computed modulo `UInt32.size`.\n\n`UInt32.neg a` is equivalent to `429_4967_295 - a + 1`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.neg\"><span class=\"name\">UInt32</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L591-L600","name":"UInt32.complement","line":591,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.complement","doc":"Bitwise complement, also known as bitwise negation, for 32-bit unsigned integers. Usually accessed\nvia the `~~~` prefix operator.\n\nEach bit of the resulting integer is the opposite of the corresponding bit of the input integer.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.complement\"><span class=\"name\">UInt32</span>.<span class=\"name\">complement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L588-L588","name":"instDivUInt32","line":588,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instDivUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instDivUInt32\"><span class=\"name\">instDivUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L586-L586","name":"instHModUInt32Nat","line":586,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instHModUInt32Nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instHModUInt32Nat\"><span class=\"name\">instHModUInt32Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HMod\">HMod</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L583-L583","name":"instModUInt32","line":583,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instModUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instModUInt32\"><span class=\"name\">instModUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L582-L582","name":"instPowUInt32Nat","line":582,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instPowUInt32Nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instPowUInt32Nat\"><span class=\"name\">instPowUInt32Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L581-L581","name":"instMulUInt32","line":581,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instMulUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMulUInt32\"><span class=\"name\">instMulUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L580-L580","name":"instSubUInt32","line":580,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instSubUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instSubUInt32\"><span class=\"name\">instSubUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L579-L579","name":"instAddUInt32","line":579,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instAddUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instAddUInt32\"><span class=\"name\">instAddUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L573-L577","name":"UInt32.le","line":573,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.le","doc":"Non-strict inequality of 32-bit unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `≤` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.le\"><span class=\"name\">UInt32</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L566-L572","name":"UInt32.lt","line":566,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.lt","doc":"Strict inequality of 32-bit unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `<` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.lt\"><span class=\"name\">UInt32</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L559-L565","name":"UInt32.shiftRight","line":559,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.shiftRight","doc":"Bitwise right shift for 32-bit unsigned integers. Usually accessed via the `>>>` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.shiftRight\"><span class=\"name\">UInt32</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L552-L558","name":"UInt32.shiftLeft","line":552,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.shiftLeft","doc":"Bitwise left shift for 32-bit unsigned integers. Usually accessed via the `<<<` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.shiftLeft\"><span class=\"name\">UInt32</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L542-L551","name":"UInt32.xor","line":542,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.xor","doc":"Bitwise exclusive or for 32-bit unsigned integers. Usually accessed via the `^^^` operator.\n\nEach bit of the resulting integer is set if exactly one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.xor\"><span class=\"name\">UInt32</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L532-L541","name":"UInt32.lor","line":532,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.lor","doc":"Bitwise or for 32-bit unsigned integers. Usually accessed via the `|||` operator.\n\nEach bit of the resulting integer is set if at least one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.lor\"><span class=\"name\">UInt32</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L523-L531","name":"UInt32.land","line":523,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.land","doc":"Bitwise and for 32-bit unsigned integers. Usually accessed via the `&&&` operator.\n\nEach bit of the resulting integer is set if the corresponding bits of both input integers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.land\"><span class=\"name\">UInt32</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L521-L522","name":"UInt32.modn","line":521,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.modn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.modn\"><span class=\"name\">UInt32</span>.<span class=\"name\">modn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L503-L517","name":"UInt32.mod","line":503,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.mod","doc":"The modulo operator for 32-bit unsigned integers, which computes the remainder when dividing one\ninteger by another. Usually accessed via the `%` operator.\n\nWhen the divisor is `0`, the result is the dividend rather than an error.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `UInt32.mod 5 2 = 1`\n* `UInt32.mod 4 2 = 0`\n* `UInt32.mod 4 0 = 4`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.mod\"><span class=\"name\">UInt32</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L492-L502","name":"UInt32.pow","line":492,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.pow","doc":"The power operation, raising a 32-bit unsigned integer to a natural number power,\nwrapping around on overflow. Usually accessed via the `^` operator.\n\nThis function is currently *not* overridden at runtime with an efficient implementation,\nand should be used with caution. See https://github.com/leanprover/lean4/issues/7887.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.pow\"><span class=\"name\">UInt32</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L482-L491","name":"UInt32.div","line":482,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.div","doc":"Unsigned division for 32-bit unsigned integers, discarding the remainder. Usually accessed\nvia the `/` operator.\n\nThis operation is sometimes called “floor division.” Division by zero is defined to be zero.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.div\"><span class=\"name\">UInt32</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L474-L481","name":"UInt32.mul","line":474,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.mul","doc":"Multiplies two 32-bit unsigned integers, wrapping around on overflow.  Usually accessed via the `*`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.mul\"><span class=\"name\">UInt32</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L466-L473","name":"UInt32.sub","line":466,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.sub","doc":"Subtracts one 32-bit unsigned integer from another, wrapping around on underflow. Usually accessed\nvia the `-` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.sub\"><span class=\"name\">UInt32</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L458-L465","name":"UInt32.add","line":458,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.add","doc":"Adds two 32-bit unsigned integers, wrapping around on overflow. Usually accessed via the `+`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.add\"><span class=\"name\">UInt32</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L455-L456","name":"UInt32.ofInt","line":455,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.ofInt","doc":"Converts an `Int` to a `UInt32` by taking the (non-negative remainder of the division by `2 ^ 32`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.ofInt\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L451-L453","name":"UInt32.ofNatCore","line":451,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.ofNatCore","doc":"Converts a natural number to a 32-bit unsigned integer. Requires a proof that the number is small\nenough to be representable without overflow; it must be smaller than `2^32`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.ofNatCore\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofNatCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L448-L450","name":"UInt32.mk","line":448,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.mk","doc":"Creates a `UInt32` from a `BitVec 32`. This function is overridden with a native implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.mk\"><span class=\"name\">UInt32</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bitVec</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L446-L447","name":"UInt32.ofFin","line":446,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt32.ofFin","doc":"Converts a `Fin UInt32.size` into the corresponding `UInt32`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.ofFin\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L444-L444","name":"instMinUInt16","line":444,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instMinUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMinUInt16\"><span class=\"name\">instMinUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L443-L443","name":"instMaxUInt16","line":443,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instMaxUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMaxUInt16\"><span class=\"name\">instMaxUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L425-L439","name":"UInt16.decLe","line":425,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#UInt16.decLe","doc":"Decides whether one 16-bit unsigned integer is less than or equal to another. Usually accessed via the\n`DecidableLE UInt16` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if (15 : UInt16) ≤ 15 then \"yes\" else \"no\") = \"yes\"`\n * `(if (15 : UInt16) ≤ 5 then \"yes\" else \"no\") = \"no\"`\n * `(if (5 : UInt16) ≤ 15 then \"yes\" else \"no\") = \"yes\"`\n * `show (7 : UInt16) ≤ 7 by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.decLe\"><span class=\"name\">UInt16</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L409-L422","name":"UInt16.decLt","line":409,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#UInt16.decLt","doc":"Decides whether one 16-bit unsigned integer is strictly less than another. Usually accessed via the\n`DecidableLT UInt16` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if (6 : UInt16) < 7 then \"yes\" else \"no\") = \"yes\"`\n * `(if (5 : UInt16) < 5 then \"yes\" else \"no\") = \"no\"`\n * `show ¬((7 : UInt16) < 7) by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.decLt\"><span class=\"name\">UInt16</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L402-L406","name":"Bool.toUInt16","line":402,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#Bool.toUInt16","doc":"Converts `true` to `1` and `false` to `0`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#Bool.toUInt16\"><span class=\"name\">Bool</span>.<span class=\"name\">toUInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L400-L400","name":"instShiftRightUInt16","line":400,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instShiftRightUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftRightUInt16\"><span class=\"name\">instShiftRightUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L399-L399","name":"instShiftLeftUInt16","line":399,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instShiftLeftUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftLeftUInt16\"><span class=\"name\">instShiftLeftUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L398-L398","name":"instXorUInt16","line":398,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instXorUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instXorUInt16\"><span class=\"name\">instXorUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Xor\">Xor</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L397-L397","name":"instOrOpUInt16","line":397,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instOrOpUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instOrOpUInt16\"><span class=\"name\">instOrOpUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L396-L396","name":"instAndOpUInt16","line":396,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instAndOpUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instAndOpUInt16\"><span class=\"name\">instAndOpUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L395-L395","name":"instNegUInt16","line":395,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instNegUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instNegUInt16\"><span class=\"name\">instNegUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L394-L394","name":"instComplementUInt16","line":394,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instComplementUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instComplementUInt16\"><span class=\"name\">instComplementUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L384-L392","name":"UInt16.neg","line":384,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.neg","doc":"Negation of 16-bit unsigned integers, computed modulo `UInt16.size`.\n\n`UInt16.neg a` is equivalent to `65_535 - a + 1`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.neg\"><span class=\"name\">UInt16</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L374-L383","name":"UInt16.complement","line":374,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.complement","doc":"Bitwise complement, also known as bitwise negation, for 16-bit unsigned integers. Usually accessed\nvia the `~~~` prefix operator.\n\nEach bit of the resulting integer is the opposite of the corresponding bit of the input integer.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.complement\"><span class=\"name\">UInt16</span>.<span class=\"name\">complement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L372-L372","name":"instLEUInt16","line":372,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instLEUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instLEUInt16\"><span class=\"name\">instLEUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L371-L371","name":"instLTUInt16","line":371,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instLTUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instLTUInt16\"><span class=\"name\">instLTUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L370-L370","name":"instDivUInt16","line":370,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instDivUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instDivUInt16\"><span class=\"name\">instDivUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L368-L368","name":"instHModUInt16Nat","line":368,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instHModUInt16Nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instHModUInt16Nat\"><span class=\"name\">instHModUInt16Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HMod\">HMod</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L365-L365","name":"instModUInt16","line":365,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instModUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instModUInt16\"><span class=\"name\">instModUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L364-L364","name":"instPowUInt16Nat","line":364,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instPowUInt16Nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instPowUInt16Nat\"><span class=\"name\">instPowUInt16Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L363-L363","name":"instMulUInt16","line":363,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instMulUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMulUInt16\"><span class=\"name\">instMulUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L362-L362","name":"instSubUInt16","line":362,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instSubUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instSubUInt16\"><span class=\"name\">instSubUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L361-L361","name":"instAddUInt16","line":361,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instAddUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instAddUInt16\"><span class=\"name\">instAddUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L355-L359","name":"UInt16.le","line":355,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.le","doc":"Non-strict inequality of 16-bit unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `≤` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.le\"><span class=\"name\">UInt16</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L350-L354","name":"UInt16.lt","line":350,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.lt","doc":"Strict inequality of 16-bit unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `<` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.lt\"><span class=\"name\">UInt16</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L343-L349","name":"UInt16.shiftRight","line":343,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.shiftRight","doc":"Bitwise right shift for 16-bit unsigned integers. Usually accessed via the `>>>` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.shiftRight\"><span class=\"name\">UInt16</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L336-L342","name":"UInt16.shiftLeft","line":336,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.shiftLeft","doc":"Bitwise left shift for 16-bit unsigned integers. Usually accessed via the `<<<` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.shiftLeft\"><span class=\"name\">UInt16</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L326-L335","name":"UInt16.xor","line":326,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.xor","doc":"Bitwise exclusive or for 16-bit unsigned integers. Usually accessed via the `^^^` operator.\n\nEach bit of the resulting integer is set if exactly one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.xor\"><span class=\"name\">UInt16</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L316-L325","name":"UInt16.lor","line":316,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.lor","doc":"Bitwise or for 16-bit unsigned integers. Usually accessed via the `|||` operator.\n\nEach bit of the resulting integer is set if at least one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.lor\"><span class=\"name\">UInt16</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L307-L315","name":"UInt16.land","line":307,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.land","doc":"Bitwise and for 16-bit unsigned integers. Usually accessed via the `&&&` operator.\n\nEach bit of the resulting integer is set if the corresponding bits of both input integers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.land\"><span class=\"name\">UInt16</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L305-L306","name":"UInt16.modn","line":305,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.modn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.modn\"><span class=\"name\">UInt16</span>.<span class=\"name\">modn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L287-L301","name":"UInt16.mod","line":287,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.mod","doc":"The modulo operator for 16-bit unsigned integers, which computes the remainder when dividing one\ninteger by another. Usually accessed via the `%` operator.\n\nWhen the divisor is `0`, the result is the dividend rather than an error.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `UInt16.mod 5 2 = 1`\n* `UInt16.mod 4 2 = 0`\n* `UInt16.mod 4 0 = 4`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.mod\"><span class=\"name\">UInt16</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L276-L286","name":"UInt16.pow","line":276,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.pow","doc":"The power operation, raising a 16-bit unsigned integer to a natural number power,\nwrapping around on overflow. Usually accessed via the `^` operator.\n\nThis function is currently *not* overridden at runtime with an efficient implementation,\nand should be used with caution. See https://github.com/leanprover/lean4/issues/7887.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.pow\"><span class=\"name\">UInt16</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L266-L275","name":"UInt16.div","line":266,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.div","doc":"Unsigned division for 16-bit unsigned integers, discarding the remainder. Usually accessed\nvia the `/` operator.\n\nThis operation is sometimes called “floor division.” Division by zero is defined to be zero.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.div\"><span class=\"name\">UInt16</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L258-L265","name":"UInt16.mul","line":258,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.mul","doc":"Multiplies two 16-bit unsigned integers, wrapping around on overflow.  Usually accessed via the `*`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.mul\"><span class=\"name\">UInt16</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L250-L257","name":"UInt16.sub","line":250,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.sub","doc":"Subtracts one 16-bit unsigned integer from another, wrapping around on underflow. Usually accessed\nvia the `-` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.sub\"><span class=\"name\">UInt16</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L242-L249","name":"UInt16.add","line":242,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.add","doc":"Adds two 16-bit unsigned integers, wrapping around on overflow. Usually accessed via the `+`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.add\"><span class=\"name\">UInt16</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L239-L240","name":"UInt16.ofInt","line":239,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.ofInt","doc":"Converts an `Int` to a `UInt16` by taking the (non-negative remainder of the division by `2 ^ 16`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.ofInt\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L235-L237","name":"UInt16.ofNatCore","line":235,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.ofNatCore","doc":"Converts a natural number to a 16-bit unsigned integer. Requires a proof that the number is small\nenough to be representable without overflow; it must be smaller than `2^16`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.ofNatCore\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofNatCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt16.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L232-L234","name":"UInt16.mk","line":232,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.mk","doc":"Creates a `UInt16` from a `BitVec 16`. This function is overridden with a native implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.mk\"><span class=\"name\">UInt16</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bitVec</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L230-L231","name":"UInt16.ofFin","line":230,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt16.ofFin","doc":"Converts a `Fin UInt16.size` into the corresponding `UInt16`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.ofFin\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt16.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L228-L228","name":"instMinUInt8","line":228,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instMinUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMinUInt8\"><span class=\"name\">instMinUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L227-L227","name":"instMaxUInt8","line":227,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instMaxUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMaxUInt8\"><span class=\"name\">instMaxUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L209-L223","name":"UInt8.decLe","line":209,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#UInt8.decLe","doc":"Decides whether one 8-bit unsigned integer is less than or equal to another. Usually accessed via the\n`DecidableLE UInt8` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if (15 : UInt8) ≤ 15 then \"yes\" else \"no\") = \"yes\"`\n * `(if (15 : UInt8) ≤ 5 then \"yes\" else \"no\") = \"no\"`\n * `(if (5 : UInt8) ≤ 15 then \"yes\" else \"no\") = \"yes\"`\n * `show (7 : UInt8) ≤ 7 by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.decLe\"><span class=\"name\">UInt8</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L194-L207","name":"UInt8.decLt","line":194,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#UInt8.decLt","doc":"Decides whether one 8-bit unsigned integer is strictly less than another. Usually accessed via the\n`DecidableLT UInt8` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if (6 : UInt8) < 7 then \"yes\" else \"no\") = \"yes\"`\n * `(if (5 : UInt8) < 5 then \"yes\" else \"no\") = \"no\"`\n * `show ¬((7 : UInt8) < 7) by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.decLt\"><span class=\"name\">UInt8</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L188-L192","name":"Bool.toUInt8","line":188,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#Bool.toUInt8","doc":"Converts `true` to `1` and `false` to `0`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#Bool.toUInt8\"><span class=\"name\">Bool</span>.<span class=\"name\">toUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L186-L186","name":"instShiftRightUInt8","line":186,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instShiftRightUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftRightUInt8\"><span class=\"name\">instShiftRightUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L185-L185","name":"instShiftLeftUInt8","line":185,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instShiftLeftUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftLeftUInt8\"><span class=\"name\">instShiftLeftUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L184-L184","name":"instXorUInt8","line":184,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instXorUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instXorUInt8\"><span class=\"name\">instXorUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Xor\">Xor</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L183-L183","name":"instOrOpUInt8","line":183,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instOrOpUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instOrOpUInt8\"><span class=\"name\">instOrOpUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L182-L182","name":"instAndOpUInt8","line":182,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instAndOpUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instAndOpUInt8\"><span class=\"name\">instAndOpUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L181-L181","name":"instNegUInt8","line":181,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instNegUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instNegUInt8\"><span class=\"name\">instNegUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L180-L180","name":"instComplementUInt8","line":180,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instComplementUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instComplementUInt8\"><span class=\"name\">instComplementUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L170-L178","name":"UInt8.neg","line":170,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.neg","doc":"Negation of 8-bit unsigned integers, computed modulo `UInt8.size`.\n\n`UInt8.neg a` is equivalent to `255 - a + 1`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.neg\"><span class=\"name\">UInt8</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L160-L169","name":"UInt8.complement","line":160,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.complement","doc":"Bitwise complement, also known as bitwise negation, for 8-bit unsigned integers. Usually accessed\nvia the `~~~` prefix operator.\n\nEach bit of the resulting integer is the opposite of the corresponding bit of the input integer.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.complement\"><span class=\"name\">UInt8</span>.<span class=\"name\">complement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L158-L158","name":"instLEUInt8","line":158,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instLEUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instLEUInt8\"><span class=\"name\">instLEUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L157-L157","name":"instLTUInt8","line":157,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instLTUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instLTUInt8\"><span class=\"name\">instLTUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L156-L156","name":"instDivUInt8","line":156,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instDivUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instDivUInt8\"><span class=\"name\">instDivUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L154-L154","name":"instHModUInt8Nat","line":154,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instHModUInt8Nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instHModUInt8Nat\"><span class=\"name\">instHModUInt8Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HMod\">HMod</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L151-L151","name":"instModUInt8","line":151,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instModUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instModUInt8\"><span class=\"name\">instModUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L150-L150","name":"instPowUInt8Nat","line":150,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instPowUInt8Nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instPowUInt8Nat\"><span class=\"name\">instPowUInt8Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L149-L149","name":"instMulUInt8","line":149,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instMulUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMulUInt8\"><span class=\"name\">instMulUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L148-L148","name":"instSubUInt8","line":148,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instSubUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instSubUInt8\"><span class=\"name\">instSubUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L147-L147","name":"instAddUInt8","line":147,"kind":"instance","docLink":"./Init/Data/UInt/Basic.html#instAddUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instAddUInt8\"><span class=\"name\">instAddUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L141-L145","name":"UInt8.le","line":141,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.le","doc":"Non-strict inequality of 8-bit unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `≤` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.le\"><span class=\"name\">UInt8</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L136-L140","name":"UInt8.lt","line":136,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.lt","doc":"Strict inequality of 8-bit unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `<` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.lt\"><span class=\"name\">UInt8</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L129-L135","name":"UInt8.shiftRight","line":129,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.shiftRight","doc":"Bitwise right shift for 8-bit unsigned integers. Usually accessed via the `>>>` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.shiftRight\"><span class=\"name\">UInt8</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L122-L128","name":"UInt8.shiftLeft","line":122,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.shiftLeft","doc":"Bitwise left shift for 8-bit unsigned integers. Usually accessed via the `<<<` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.shiftLeft\"><span class=\"name\">UInt8</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L112-L121","name":"UInt8.xor","line":112,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.xor","doc":"Bitwise exclusive or for 8-bit unsigned integers. Usually accessed via the `^^^` operator.\n\nEach bit of the resulting integer is set if exactly one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.xor\"><span class=\"name\">UInt8</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L102-L111","name":"UInt8.lor","line":102,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.lor","doc":"Bitwise or for 8-bit unsigned integers. Usually accessed via the `|||` operator.\n\nEach bit of the resulting integer is set if at least one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.lor\"><span class=\"name\">UInt8</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L93-L101","name":"UInt8.land","line":93,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.land","doc":"Bitwise and for 8-bit unsigned integers. Usually accessed via the `&&&` operator.\n\nEach bit of the resulting integer is set if the corresponding bits of both input integers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.land\"><span class=\"name\">UInt8</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L91-L92","name":"UInt8.modn","line":91,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.modn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.modn\"><span class=\"name\">UInt8</span>.<span class=\"name\">modn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L73-L87","name":"UInt8.mod","line":73,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.mod","doc":"The modulo operator for 8-bit unsigned integers, which computes the remainder when dividing one\ninteger by another. Usually accessed via the `%` operator.\n\nWhen the divisor is `0`, the result is the dividend rather than an error.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `UInt8.mod 5 2 = 1`\n* `UInt8.mod 4 2 = 0`\n* `UInt8.mod 4 0 = 4`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.mod\"><span class=\"name\">UInt8</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L62-L72","name":"UInt8.pow","line":62,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.pow","doc":"The power operation, raising an 8-bit unsigned integer to a natural number power,\nwrapping around on overflow. Usually accessed via the `^` operator.\n\nThis function is currently *not* overridden at runtime with an efficient implementation,\nand should be used with caution. See https://github.com/leanprover/lean4/issues/7887.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.pow\"><span class=\"name\">UInt8</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L52-L61","name":"UInt8.div","line":52,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.div","doc":"Unsigned division for 8-bit unsigned integers, discarding the remainder. Usually accessed\nvia the `/` operator.\n\nThis operation is sometimes called “floor division.” Division by zero is defined to be zero.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.div\"><span class=\"name\">UInt8</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L44-L51","name":"UInt8.mul","line":44,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.mul","doc":"Multiplies two 8-bit unsigned integers, wrapping around on overflow.  Usually accessed via the `*`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.mul\"><span class=\"name\">UInt8</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L36-L43","name":"UInt8.sub","line":36,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.sub","doc":"Subtracts one 8-bit unsigned integer from another, wrapping around on underflow. Usually accessed\nvia the `-` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.sub\"><span class=\"name\">UInt8</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L28-L35","name":"UInt8.add","line":28,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.add","doc":"Adds two 8-bit unsigned integers, wrapping around on overflow. Usually accessed via the `+`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.add\"><span class=\"name\">UInt8</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L25-L26","name":"UInt8.ofInt","line":25,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.ofInt","doc":"Converts an `Int` to a `UInt8` by taking the (non-negative remainder of the division by `2 ^ 8`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.ofInt\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L21-L23","name":"UInt8.ofNatCore","line":21,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.ofNatCore","doc":"Converts a natural number to an 8-bit unsigned integer. Requires a proof that the number is small\nenough to be representable without overflow; it must be smaller than `2^8`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.ofNatCore\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofNatCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt8.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L18-L20","name":"UInt8.mk","line":18,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.mk","doc":"Creates a `UInt8` from a `BitVec 8`. This function is overridden with a native implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.mk\"><span class=\"name\">UInt8</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bitVec</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/Basic.lean#L16-L17","name":"UInt8.ofFin","line":16,"kind":"def","docLink":"./Init/Data/UInt/Basic.html#UInt8.ofFin","doc":"Converts a `Fin UInt8.size` into the corresponding `UInt8`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.ofFin\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt8.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"}]}