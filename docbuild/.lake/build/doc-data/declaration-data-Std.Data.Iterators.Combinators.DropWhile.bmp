{"name":"Std.Data.Iterators.Combinators.DropWhile","instances":[],"imports":["Std.Data.Iterators.Combinators.Monadic.DropWhile"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/DropWhile.lean#L23-L57","name":"Std.Iterators.Iter.dropWhile","line":23,"kind":"def","docLink":"./Std/Data/Iterators/Combinators/DropWhile.html#Std.Iterators.Iter.dropWhile","doc":"Given an iterator `it` and a predicate `P`, `it.dropWhile P` is an iterator that\nemits the values emitted by `it` starting from the first value that is rejected by `P`.\nThe elements before are dropped.\n\nIn situations where `P` is monadic, use `dropWhileM` instead.\n\n**Marble diagram:**\n\nAssuming that the predicate `P` accepts `a` and `b` but rejects `c`:\n\n```text\nit               ---a----b---c--d-e--⊥\nit.dropWhile P   ------------c--d-e--⊥\n\nit               ---a----⊥\nit.dropWhile P   --------⊥\n```\n\n**Termination properties:**\n\n* `Finite` instance: only if `it` is finite\n* `Productive` instance: only if `it` is finite\n\nDepending on `P`, it is possible that `it.dropWhileM P` is productive although\n`it` is not. In this case, the `Productive` instance needs to be proved manually.\n\n**Performance:**\n\nThis combinator calls `P` on each output of `it` until the predicate evaluates to false. After\nthat, the combinator incurs an addictional O(1) cost for each value emitted by `it`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/DropWhile.html#Std.Iterators.Iter.dropWhile\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">dropWhile</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/DropWhile.lean#L11-L21","name":"Std.Iterators.Iter.Intermediate.dropWhile","line":11,"kind":"def","docLink":"./Std/Data/Iterators/Combinators/DropWhile.html#Std.Iterators.Iter.Intermediate.dropWhile","doc":"Constructs intermediate states of an iterator created with the combinator `Iter.dropWhile`.\nWhen `it.dropWhile P` has stopped dropping elements, its new state cannot be created\ndirectly with `Iter.dropWhile` but only with `Intermediate.dropWhile`.\n\n`Intermediate.dropWhile` is meant to be used only for internally or for verification purposes.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/DropWhile.html#Std.Iterators.Iter.Intermediate.dropWhile\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">Intermediate</span>.<span class=\"name\">dropWhile</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dropping</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span></div></div>"}]}