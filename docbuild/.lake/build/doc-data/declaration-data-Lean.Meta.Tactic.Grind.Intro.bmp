{"name":"Lean.Meta.Tactic.Grind.Intro","instances":[{"typeNames":["_private.Lean.Meta.Tactic.Grind.Intro.0.Lean.Meta.Grind.IntroResult"],"name":"Lean.Meta.Grind.instInhabitedIntroResult","className":"Inhabited"}],"imports":["Init.Grind.Lemmas","Lean.Meta.Tactic.Assert","Lean.Meta.Tactic.Grind.Simp","Lean.Meta.Tactic.Grind.Types","Lean.Meta.Tactic.Grind.Cases","Lean.Meta.Tactic.Grind.CasesMatch","Lean.Meta.Tactic.Grind.Injection","Lean.Meta.Tactic.Grind.Core","Lean.Meta.Tactic.Grind.SearchM"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Intro.lean#L286-L297","name":"Lean.Meta.Grind.assertAll","line":286,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Intro.html#Lean.Meta.Grind.assertAll","doc":"Asserts all facts in the `goal` fact queue.\nReturns `true` if the queue was not empty and `false` otherwise.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Intro.html#Lean.Meta.Grind.assertAll\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">assertAll</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM\">SearchM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Intro.lean#L273-L284","name":"Lean.Meta.Grind.assertNext","line":273,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Intro.html#Lean.Meta.Grind.assertNext","doc":"Asserts next fact in the `goal` fact queue.\nReturns `true` if the queue was not empty and `false` otherwise.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Intro.html#Lean.Meta.Grind.assertNext\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">assertNext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM\">SearchM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Intro.lean#L260-L271","name":"Lean.Meta.Grind.assertAt","line":260,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Intro.html#Lean.Meta.Grind.assertAt","doc":"Asserts a new fact `prop` with proof `proof` to the given `goal`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Intro.html#Lean.Meta.Grind.assertAt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">assertAt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof </span><span class=\"fn\">prop</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM\">SearchM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Intro.lean#L250-L258","name":"Lean.Meta.Grind.intros'","line":250,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Intro.html#Lean.Meta.Grind.intros'","doc":"Similar to `intros`, but returns `true` if new hypotheses have been added,\nand `false` otherwise.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Intro.html#Lean.Meta.Grind.intros'\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">intros'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM\">SearchM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Intro.lean#L219-L248","name":"Lean.Meta.Grind.intros","line":219,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Intro.html#Lean.Meta.Grind.intros","doc":"Introduce new hypotheses (and apply `by_contra`) until goal is of the form `... ⊢ False`\nor is inconsistent.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Intro.html#Lean.Meta.Grind.intros\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">intros</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM\">SearchM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Intro.lean#L24-L24","name":"Lean.Meta.Grind.instInhabitedIntroResult","line":24,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Intro.html#Lean.Meta.Grind.instInhabitedIntroResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Intro.html#Lean.Meta.Grind.instInhabitedIntroResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedIntroResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Intro.html#_private.Lean.Meta.Tactic.Grind.Intro.0.Lean.Meta.Grind.IntroResult\">Lean.Meta.Grind.IntroResult✝</a></span></div></div>"}]}