{"name":"Std.Data.Iterators.Lemmas.Combinators.Monadic.Take","instances":[],"imports":["Std.Data.Iterators.Combinators.Monadic.Take","Std.Data.Iterators.Lemmas.Consumers.Monadic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Lemmas/Combinators/Monadic/Take.lean#L30-L36","name":"Std.Iterators.IterM.toList_take_zero","line":30,"kind":"theorem","docLink":"./Std/Data/Iterators/Lemmas/Combinators/Monadic/Take.html#Std.Iterators.IterM.toList_take_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Combinators/Monadic/Take.html#Std.Iterators.IterM.toList_take_zero\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">toList_take_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/Take.html#Std.Iterators.Take\">Take</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollect\">IteratorCollect</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/Take.html#Std.Iterators.Take\">Take</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.LawfulIteratorCollect\">LawfulIteratorCollect</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/Take.html#Std.Iterators.Take\">Take</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/Take.html#Std.Iterators.IterM.take\">take</a> <span class=\"fn\">0</span> <span class=\"fn\">it</span>)</span>.<a href=\"./Std/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IterM.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Lemmas/Combinators/Monadic/Take.lean#L12-L28","name":"Std.Iterators.IterM.step_take","line":12,"kind":"theorem","docLink":"./Std/Data/Iterators/Lemmas/Combinators/Monadic/Take.html#Std.Iterators.IterM.step_take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Combinators/Monadic/Take.html#Std.Iterators.IterM.step_take\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">step_take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/Take.html#Std.Iterators.IterM.take\">take</a> <span class=\"fn\">n</span> <span class=\"fn\">it</span>)</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.step\">step</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\">n</span> with\n  | <span class=\"fn\">0</span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.done\">PlausibleIterStep.done</a> <span class=\"fn\">⋯</span>)</span></span>\n  | <span class=\"fn\"><span class=\"fn\">k</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span> =&gt; <span class=\"fn\">do\n    let <span class=\"fn\">__do_lift</span> ← <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterM.step\">step</a></span>\n    <span class=\"fn\">match <span class=\"fn\">__do_lift</span> with\n      | <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <span class=\"fn\">it'</span> <span class=\"fn\">out</span></span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.yield\">PlausibleIterStep.yield</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/Take.html#Std.Iterators.IterM.take\">take</a> <span class=\"fn\">k</span> <span class=\"fn\">it'</span>)</span> <span class=\"fn\">out</span> <span class=\"fn\">⋯</span>)</span></span>\n      | <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <span class=\"fn\">it'</span></span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.skip\">PlausibleIterStep.skip</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/Take.html#Std.Iterators.IterM.take\">take</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">it'</span>)</span> <span class=\"fn\">⋯</span>)</span></span>\n      | <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.IterStep.done\">IterStep.done</a>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.done\">PlausibleIterStep.done</a> <span class=\"fn\">⋯</span>)</span></span></span></span></span></div></div>"}]}