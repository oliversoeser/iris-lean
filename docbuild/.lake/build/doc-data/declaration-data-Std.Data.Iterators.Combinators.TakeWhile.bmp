{"name":"Std.Data.Iterators.Combinators.TakeWhile","instances":[],"imports":["Std.Data.Iterators.Combinators.Monadic.TakeWhile"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Combinators/TakeWhile.lean#L11-L43","name":"Std.Iterators.Iter.takeWhile","line":11,"kind":"def","docLink":"./Std/Data/Iterators/Combinators/TakeWhile.html#Std.Iterators.Iter.takeWhile","doc":"Given an iterator `it` and a predicate `P`, `it.takeWhile P` is an iterator that outputs\nthe values emitted by `it` until one of those values is rejected by `P`.\nIf some emitted value is rejected by `P`, the value is dropped and the iterator terminates.\n\n**Marble diagram:**\n\nAssuming that the predicate `P` accepts `a` and `b` but rejects `c`:\n\n```text\nit               ---a----b---c--d-e--⊥\nit.takeWhile P   ---a----b---⊥\n\nit               ---a----⊥\nit.takeWhile P   ---a----⊥\n```\n\n**Termination properties:**\n\n* `Finite` instance: only if `it` is finite\n* `Productive` instance: only if `it` is productive\n\nDepending on `P`, it is possible that `it.takeWhile P` is finite (or productive) although `it` is not.\nIn this case, the `Finite` (or `Productive`) instance needs to be proved manually.\n\n**Performance:**\n\nThis combinator calls `P` on each output of `it` until the predicate evaluates to false. Then\nit terminates.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/TakeWhile.html#Std.Iterators.Iter.takeWhile\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">takeWhile</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span></div></div>"}]}