{"name":"Init.Data.UInt.BasicAux","instances":[{"typeNames":["UInt8"],"name":"UInt8.instOfNat","className":"OfNat"},{"typeNames":["UInt16"],"name":"UInt16.instOfNat","className":"OfNat"},{"typeNames":["UInt32"],"name":"UInt32.instOfNat","className":"OfNat"},{"typeNames":["UInt64"],"name":"UInt64.instOfNat","className":"OfNat"},{"typeNames":["USize"],"name":"USize.instOfNat","className":"OfNat"},{"typeNames":["USize"],"name":"instAddUSize","className":"Add"},{"typeNames":["USize"],"name":"instSubUSize","className":"Sub"},{"typeNames":["USize"],"name":"instLTUSize","className":"LT"},{"typeNames":["USize"],"name":"instLEUSize","className":"LE"},{"typeNames":["LT.lt"],"name":"USize.decLt","className":"Decidable"},{"typeNames":["LE.le"],"name":"USize.decLe","className":"Decidable"}],"imports":["Init.Data.Fin.Basic","Init.Data.BitVec.BasicAux"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L421-L435","name":"USize.decLe","line":421,"kind":"instance","docLink":"./Init/Data/UInt/BasicAux.html#USize.decLe","doc":"Decides whether one word-sized unsigned integer is less than or equal to another. Usually accessed\nvia the `DecidableLE USize` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if (15 : USize) ≤ 15 then \"yes\" else \"no\") = \"yes\"`\n * `(if (15 : USize) ≤ 5 then \"yes\" else \"no\") = \"no\"`\n * `(if (5 : USize) ≤ 15 then \"yes\" else \"no\") = \"yes\"`\n * `show (7 : USize) ≤ 7 by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.decLe\"><span class=\"name\">USize</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L406-L419","name":"USize.decLt","line":406,"kind":"instance","docLink":"./Init/Data/UInt/BasicAux.html#USize.decLt","doc":"Decides whether one word-sized unsigned integer is strictly less than another. Usually accessed via\nthe `DecidableLT USize` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if (6 : USize) < 7 then \"yes\" else \"no\") = \"yes\"`\n * `(if (5 : USize) < 5 then \"yes\" else \"no\") = \"no\"`\n * `show ¬((7 : USize) < 7) by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.decLt\"><span class=\"name\">USize</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L404-L404","name":"instLEUSize","line":404,"kind":"instance","docLink":"./Init/Data/UInt/BasicAux.html#instLEUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#instLEUSize\"><span class=\"name\">instLEUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L403-L403","name":"instLTUSize","line":403,"kind":"instance","docLink":"./Init/Data/UInt/BasicAux.html#instLTUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#instLTUSize\"><span class=\"name\">instLTUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L402-L402","name":"instSubUSize","line":402,"kind":"instance","docLink":"./Init/Data/UInt/BasicAux.html#instSubUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#instSubUSize\"><span class=\"name\">instSubUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L401-L401","name":"instAddUSize","line":401,"kind":"instance","docLink":"./Init/Data/UInt/BasicAux.html#instAddUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#instAddUSize\"><span class=\"name\">instAddUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L399-L399","name":"USize.instOfNat","line":399,"kind":"instance","docLink":"./Init/Data/UInt/BasicAux.html#USize.instOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.instOfNat\"><span class=\"name\">USize</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Prelude.html#USize\">USize</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L393-L397","name":"USize.le","line":393,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#USize.le","doc":"Non-strict inequality of word-sized unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `≤` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.le\"><span class=\"name\">USize</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L388-L392","name":"USize.lt","line":388,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#USize.lt","doc":"Strict inequality of word-sized unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `<` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.lt\"><span class=\"name\">USize</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L379-L386","name":"USize.sub","line":379,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#USize.sub","doc":"Subtracts one word-sized-bit unsigned integer from another, wrapping around on underflow. Usually\naccessed via the `-` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.sub\"><span class=\"name\">USize</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L371-L378","name":"USize.add","line":371,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#USize.add","doc":"Adds two word-sized unsigned integers, wrapping around on overflow.  Usually accessed via the `+`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.add\"><span class=\"name\">USize</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L364-L370","name":"USize.toNat","line":364,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#USize.toNat","doc":"Converts a word-sized unsigned integer to an arbitrary-precision natural number.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\"><span class=\"name\">USize</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L363-L363","name":"Nat.toUSize","line":363,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#Nat.toUSize","doc":"Converts an arbitrary-precision natural number to an unsigned word-sized integer, wrapping around on\noverflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#Nat.toUSize\"><span class=\"name\">Nat</span>.<span class=\"name\">toUSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L351-L362","name":"USize.ofNatTruncate","line":351,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#USize.ofNatTruncate","doc":"Converts a natural number to `USize`, returning the largest representable value if the number is too\nlarge.\n\nReturns `USize.size - 1`, which is  `2^64 - 1` or `2^32 - 1` depending on the platform, for natural\nnumbers greater than or equal to `USize.size`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.ofNatTruncate\"><span class=\"name\">USize</span>.<span class=\"name\">ofNatTruncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L343-L350","name":"USize.ofNat","line":343,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#USize.ofNat","doc":"Converts an arbitrary-precision natural number to an unsigned word-sized integer, wrapping around on\noverflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.ofNat\"><span class=\"name\">USize</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L341-L342","name":"USize.val","line":341,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#USize.val","doc":"Converts a `USize` into the corresponding `Fin USize.size`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.val\"><span class=\"name\">USize</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#USize.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L339-L340","name":"USize.toFin","line":339,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#USize.toFin","doc":"Converts a `USize` into the corresponding `Fin USize.size`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.toFin\"><span class=\"name\">USize</span>.<span class=\"name\">toFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#USize.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L335-L337","name":"usize_size_pos","line":335,"kind":"theorem","docLink":"./Init/Data/UInt/BasicAux.html#usize_size_pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#usize_size_pos\"><span class=\"name\">usize_size_pos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#USize.size\">USize.size</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L331-L333","name":"usize_size_eq","line":331,"kind":"theorem","docLink":"./Init/Data/UInt/BasicAux.html#usize_size_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#usize_size_eq\"><span class=\"name\">usize_size_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize.size\">USize.size</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">4294967296</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Prelude.html#USize.size\">USize.size</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">18446744073709551616</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L329-L329","name":"UInt64.instOfNat","line":329,"kind":"instance","docLink":"./Init/Data/UInt/BasicAux.html#UInt64.instOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt64.instOfNat\"><span class=\"name\">UInt64</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L321-L327","name":"UInt32.toUInt64","line":321,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.toUInt64","doc":"Converts 32-bit unsigned integers to 64-bit unsigned integers. Wraps around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt64\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L314-L320","name":"UInt16.toUInt64","line":314,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt16.toUInt64","doc":"Converts 16-bit unsigned integers to 64-bit unsigned integers. Wraps around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt64\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L307-L313","name":"UInt8.toUInt64","line":307,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt8.toUInt64","doc":"Converts 8-bit unsigned integers to 64-bit unsigned integers.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt64\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L300-L306","name":"UInt64.toUInt32","line":300,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt64.toUInt32","doc":"Converts 64-bit unsigned integers to 32-bit unsigned integers. Wraps around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt32\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L293-L299","name":"UInt64.toUInt16","line":293,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt64.toUInt16","doc":"Converts 64-bit unsigned integers to 16-bit unsigned integers. Wraps around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt16\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L286-L292","name":"UInt64.toUInt8","line":286,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt64.toUInt8","doc":"Converts 64-bit unsigned integers to 8-bit unsigned integers. Wraps around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt8\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L279-L285","name":"UInt64.toNat","line":279,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt64.toNat","doc":"Converts a 64-bit unsigned integer to an arbitrary-precision natural number.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt64.toNat\"><span class=\"name\">UInt64</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L267-L278","name":"Nat.toUInt64","line":267,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#Nat.toUInt64","doc":"Converts a natural number to a 64-bit unsigned integer, wrapping on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Nat.toUInt64 5 = 5`\n* `Nat.toUInt64 65539 = 65539`\n* `Nat.toUInt64 4_294_967_299 = 4_294_967_299`\n* `Nat.toUInt64 18_446_744_073_709_551_620 = 4`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#Nat.toUInt64\"><span class=\"name\">Nat</span>.<span class=\"name\">toUInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L256-L266","name":"UInt64.ofNatTruncate","line":256,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt64.ofNatTruncate","doc":"Converts a natural number to a 64-bit unsigned integer, returning the largest representable value if\nthe number is too large.\n\nReturns `2^64 - 1` for natural numbers greater than or equal to `2^64`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNatTruncate\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofNatTruncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L243-L255","name":"UInt64.ofNat","line":243,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt64.ofNat","doc":"Converts a natural number to a 64-bit unsigned integer, wrapping on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `UInt64.ofNat 5 = 5`\n* `UInt64.ofNat 65539 = 65539`\n* `UInt64.ofNat 4_294_967_299 = 4_294_967_299`\n* `UInt64.ofNat 18_446_744_073_709_551_620 = 4`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNat\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L241-L242","name":"UInt64.val","line":241,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt64.val","doc":"Converts a `UInt64` into the corresponding `Fin UInt64.size`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt64.val\"><span class=\"name\">UInt64</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt64.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L239-L240","name":"UInt64.toFin","line":239,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt64.toFin","doc":"Converts a `UInt64` into the corresponding `Fin UInt64.size`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt64.toFin\"><span class=\"name\">UInt64</span>.<span class=\"name\">toFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt64.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L235-L237","name":"UInt32.lt_ofNat'_of_lt","line":235,"kind":"theorem","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.lt_ofNat'_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.lt_ofNat'_of_lt\"><span class=\"name\">UInt32</span>.<span class=\"name\">lt_ofNat'_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> → <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">ofNat</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32.ofNatLT\">ofNatLT</a> <span class=\"fn\">n</span> <span class=\"fn\">h1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L230-L233","name":"UInt32.lt_ofNatLT_of_lt","line":230,"kind":"theorem","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.lt_ofNatLT_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.lt_ofNatLT_of_lt\"><span class=\"name\">UInt32</span>.<span class=\"name\">lt_ofNatLT_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> → <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">ofNat</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32.ofNatLT\">ofNatLT</a> <span class=\"fn\">n</span> <span class=\"fn\">h1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L226-L228","name":"UInt32.ofNat'_lt_of_lt","line":226,"kind":"theorem","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.ofNat'_lt_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat'_lt_of_lt\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofNat'_lt_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32.ofNatLT\">ofNatLT</a> <span class=\"fn\">n</span> <span class=\"fn\">h1</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">ofNat</a> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L221-L224","name":"UInt32.ofNatLT_lt_of_lt","line":221,"kind":"theorem","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.ofNatLT_lt_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNatLT_lt_of_lt\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofNatLT_lt_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32.ofNatLT\">ofNatLT</a> <span class=\"fn\">n</span> <span class=\"fn\">h1</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">ofNat</a> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L219-L219","name":"UInt32.instOfNat","line":219,"kind":"instance","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.instOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.instOfNat\"><span class=\"name\">UInt32</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L211-L217","name":"UInt16.toUInt32","line":211,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt16.toUInt32","doc":"Converts 16-bit unsigned integers to 32-bit unsigned integers.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt32\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L204-L210","name":"UInt8.toUInt32","line":204,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt8.toUInt32","doc":"Converts 8-bit unsigned integers to 32-bit unsigned integers.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt32\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L197-L203","name":"UInt32.toUInt16","line":197,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.toUInt16","doc":"Converts 32-bit unsigned integers to 16-bit unsigned integers. Wraps around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt16\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L190-L196","name":"UInt32.toUInt8","line":190,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8","doc":"Converts a 32-bit unsigned integer to an 8-bit unsigned integer, wrapping on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L178-L188","name":"Nat.toUInt32","line":178,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#Nat.toUInt32","doc":"Converts a natural number to a 32-bit unsigned integer, wrapping on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Nat.toUInt32 5 = 5`\n* `Nat.toUInt32 65_539 = 65_539`\n* `Nat.toUInt32 4_294_967_299 = 3`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#Nat.toUInt32\"><span class=\"name\">Nat</span>.<span class=\"name\">toUInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L167-L177","name":"UInt32.ofNatTruncate","line":167,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.ofNatTruncate","doc":"Converts a natural number to a 32-bit unsigned integer, returning the largest representable value if\nthe number is too large.\n\nReturns `2^32 - 1` for natural numbers greater than or equal to `2^32`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNatTruncate\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofNatTruncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L165-L166","name":"UInt32.ofNat'","line":165,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.ofNat'","doc":"Converts a natural number to a 32-bit unsigned integer. Requires a proof that the number is small\nenough to be representable without overflow; it must be smaller than `2^32`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat'\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofNat'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L153-L164","name":"UInt32.ofNat","line":153,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.ofNat","doc":"Converts a natural number to a 32-bit unsigned integer, wrapping on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `UInt32.ofNat 5 = 5`\n* `UInt32.ofNat 65539 = 65539`\n* `UInt32.ofNat 4_294_967_299 = 3`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L150-L151","name":"UInt32.val","line":150,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.val","doc":"Converts a `UInt32` into the corresponding `Fin UInt32.size`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.val\"><span class=\"name\">UInt32</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L148-L149","name":"UInt32.toFin","line":148,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.toFin","doc":"Converts a `UInt32` into the corresponding `Fin UInt32.size`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.toFin\"><span class=\"name\">UInt32</span>.<span class=\"name\">toFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L146-L146","name":"UInt16.instOfNat","line":146,"kind":"instance","docLink":"./Init/Data/UInt/BasicAux.html#UInt16.instOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt16.instOfNat\"><span class=\"name\">UInt16</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L138-L144","name":"UInt8.toUInt16","line":138,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt8.toUInt16","doc":"Converts 8-bit unsigned integers to 16-bit unsigned integers.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt16\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L131-L137","name":"UInt16.toUInt8","line":131,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt16.toUInt8","doc":"Converts 16-bit unsigned integers to 8-bit unsigned integers. Wraps around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt8\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L124-L130","name":"UInt16.toNat","line":124,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt16.toNat","doc":"Converts a 16-bit unsigned integer to an arbitrary-precision natural number.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt16.toNat\"><span class=\"name\">UInt16</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L111-L122","name":"Nat.toUInt16","line":111,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#Nat.toUInt16","doc":"Converts a natural number to a 16-bit unsigned integer, wrapping on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Nat.toUInt16 5 = 5`\n* `Nat.toUInt16 255 = 255`\n* `Nat.toUInt16 32770 = 32770`\n* `Nat.toUInt16 65537 = 1`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#Nat.toUInt16\"><span class=\"name\">Nat</span>.<span class=\"name\">toUInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L99-L109","name":"UInt16.ofNatTruncate","line":99,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt16.ofNatTruncate","doc":"Converts a natural number to a 16-bit unsigned integer, returning the largest representable value if\nthe number is too large.\n\nReturns `2^16 - 1` for natural numbers greater than or equal to `2^16`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt16.ofNatTruncate\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofNatTruncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L86-L98","name":"UInt16.ofNat","line":86,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt16.ofNat","doc":"Converts a natural number to a 16-bit unsigned integer, wrapping on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `UInt16.ofNat 5 = 5`\n* `UInt16.ofNat 255 = 255`\n* `UInt16.ofNat 32770 = 32770`\n* `UInt16.ofNat 65537 = 1`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt16.ofNat\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L83-L84","name":"UInt16.val","line":83,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt16.val","doc":"Converts a `UInt16` into the corresponding `Fin UInt16.size`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt16.val\"><span class=\"name\">UInt16</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt16.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L81-L82","name":"UInt16.toFin","line":81,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt16.toFin","doc":"Converts a `UInt16` into the corresponding `Fin UInt16.size`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt16.toFin\"><span class=\"name\">UInt16</span>.<span class=\"name\">toFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt16.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L79-L79","name":"UInt8.instOfNat","line":79,"kind":"instance","docLink":"./Init/Data/UInt/BasicAux.html#UInt8.instOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt8.instOfNat\"><span class=\"name\">UInt8</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L71-L77","name":"UInt8.toNat","line":71,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt8.toNat","doc":"Converts an 8-bit unsigned integer to an arbitrary-precision natural number.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt8.toNat\"><span class=\"name\">UInt8</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L57-L69","name":"Nat.toUInt8","line":57,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#Nat.toUInt8","doc":"Converts a natural number to an 8-bit unsigned integer, wrapping on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Nat.toUInt8 5 = 5`\n* `Nat.toUInt8 255 = 255`\n* `Nat.toUInt8 256 = 0`\n* `Nat.toUInt8 259 = 3`\n* `Nat.toUInt8 32770 = 2`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#Nat.toUInt8\"><span class=\"name\">Nat</span>.<span class=\"name\">toUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L45-L55","name":"UInt8.ofNatTruncate","line":45,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt8.ofNatTruncate","doc":"Converts a natural number to an 8-bit unsigned integer, returning the largest representable value if\nthe number is too large.\n\nReturns `2^8 - 1` for natural numbers greater than or equal to `2^8`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt8.ofNatTruncate\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofNatTruncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L30-L43","name":"UInt8.ofNat","line":30,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt8.ofNat","doc":"Converts a natural number to an 8-bit unsigned integer, wrapping on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `UInt8.ofNat 5 = 5`\n* `UInt8.ofNat 255 = 255`\n* `UInt8.ofNat 256 = 0`\n* `UInt8.ofNat 259 = 3`\n* `UInt8.ofNat 32770 = 2`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt8.ofNat\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L27-L28","name":"UInt8.val","line":27,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt8.val","doc":"Converts a `UInt8` into the corresponding `Fin UInt8.size`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt8.val\"><span class=\"name\">UInt8</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt8.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Init/Data/UInt/BasicAux.lean#L25-L26","name":"UInt8.toFin","line":25,"kind":"def","docLink":"./Init/Data/UInt/BasicAux.html#UInt8.toFin","doc":"Converts a `UInt8` into the corresponding `Fin UInt8.size`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt8.toFin\"><span class=\"name\">UInt8</span>.<span class=\"name\">toFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt8.size\">size</a></span></div></div>"}]}