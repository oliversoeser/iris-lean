{"name":"Lean.Meta.Tactic.Grind.Core","instances":[],"imports":["Init.Grind.Util","Lean.Meta.LitValues","Lean.Meta.Tactic.Grind.Types","Lean.Meta.Tactic.Grind.Inv","Lean.Meta.Tactic.Grind.PP","Lean.Meta.Tactic.Grind.Ctor","Lean.Meta.Tactic.Grind.Util","Lean.Meta.Tactic.Grind.Beta","Lean.Meta.Tactic.Grind.Internalize","Lean.Meta.Tactic.Grind.Simp"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Core.lean#L400-L402","name":"Lean.Meta.Grind.addHypothesis","line":400,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.addHypothesis","doc":"Adds a new hypothesis. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.addHypothesis\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">addHypothesis</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Core.lean#L393-L398","name":"Lean.Meta.Grind.add","line":393,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.add","doc":"Adds a new `fact` justified by the given proof and using the given generation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.add\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fact </span><span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Core.lean#L337-L343","name":"Lean.Meta.Grind.addNewEq","line":337,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.addNewEq","doc":"Internalizes `lhs` and `rhs`, and then adds equality `lhs = rhs`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.addNewEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">addNewEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Core.lean#L189-L212","name":"Lean.Meta.Grind.propagateBeta","line":189,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.propagateBeta","doc":"Tries to apply beta-reductiong using the parent applications of the functions in `fns` with\nthe lambda expressions in `lams`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.propagateBeta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">propagateBeta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lams </span><span class=\"fn\">fns</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Core.lean#L184-L187","name":"Lean.Meta.Grind.propagateCommRing","line":184,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.propagateCommRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.propagateCommRing\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">propagateCommRing</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.PendingTheoryPropagation\">PendingTheoryPropagation</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Core.lean#L159-L162","name":"Lean.Meta.Grind.propagateCutsat","line":159,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.propagateCutsat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.propagateCutsat\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">propagateCutsat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.PendingTheoryPropagation\">PendingTheoryPropagation</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Core.lean#L135-L137","name":"Lean.Meta.Grind.propagateOffset","line":135,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.propagateOffset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.propagateOffset\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">propagateOffset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.PendingTheoryPropagation\">PendingTheoryPropagation</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Core.lean#L116-L117","name":"Lean.Meta.Grind.PendingTheoryPropagation.diseqs","line":116,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.PendingTheoryPropagation.diseqs","doc":"Propagate the disequalities in `ps`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.PendingTheoryPropagation.diseqs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">PendingTheoryPropagation</span>.<span class=\"name\">diseqs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ParentSet\">ParentSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.PendingTheoryPropagation\">PendingTheoryPropagation</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Core.lean#L114-L115","name":"Lean.Meta.Grind.PendingTheoryPropagation.eq","line":114,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.PendingTheoryPropagation.eq","doc":"Propagate the equality `lhs = rhs`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.PendingTheoryPropagation.eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">PendingTheoryPropagation</span>.<span class=\"name\">eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.PendingTheoryPropagation\">PendingTheoryPropagation</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Core.lean#L112-L113","name":"Lean.Meta.Grind.PendingTheoryPropagation.none","line":112,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.PendingTheoryPropagation.none","doc":"Nothing to propagate. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.PendingTheoryPropagation.none\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">PendingTheoryPropagation</span>.<span class=\"name\">none</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.PendingTheoryPropagation\">PendingTheoryPropagation</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Core.lean#L98-L117","name":"Lean.Meta.Grind.PendingTheoryPropagation","line":98,"kind":"inductive","docLink":"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.PendingTheoryPropagation","doc":"Equalities or disequalities to be propagated to a theory solver **after**\ntwo equivalence classes have been merged.\n\nSome solvers (e.g. `cutsat`) require the core data structures to satisfy\ntheir invariants.  During the merge operations some of these invariants do not hold.\nThus, we first *record* the facts that must be propagated in a `PendingTheoryPropagation` value,\ncomplete the merge, and only then perform the propagation.\n\nWe now use this workflow for *all* theory solvers, even when a particular\nsolver does not rely on these invariants.  This keeps the core\nsolver-agnostic and lets us modify solvers without further adjustments.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Core.html#Lean.Meta.Grind.PendingTheoryPropagation\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">PendingTheoryPropagation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}