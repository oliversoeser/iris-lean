{"name":"Lean.Meta.Tactic.Grind.Simp","instances":[],"imports":["Init.Grind.Lemmas","Lean.Meta.Tactic.Assert","Lean.Meta.Tactic.Simp.Main","Lean.Meta.Tactic.Grind.Util","Lean.Meta.Tactic.Grind.Types","Lean.Meta.Tactic.Grind.MatchDiscrOnly","Lean.Meta.Tactic.Grind.MarkNestedProofs","Lean.Meta.Tactic.Grind.Canon"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Simp.lean#L70-L74","name":"Lean.Meta.Grind.pushNewFact","line":70,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Simp.html#Lean.Meta.Grind.pushNewFact","doc":"Infers the type of the proof, preprocess it, and adds it to todo list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Simp.html#Lean.Meta.Grind.pushNewFact\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">pushNewFact</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Simp.lean#L59-L67","name":"Lean.Meta.Grind.pushNewFact'","line":59,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Simp.html#Lean.Meta.Grind.pushNewFact'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Simp.html#Lean.Meta.Grind.pushNewFact'\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">pushNewFact'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prop </span><span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Simp.lean#L34-L57","name":"Lean.Meta.Grind.preprocess","line":34,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Simp.html#Lean.Meta.Grind.preprocess","doc":"Preprocesses `e` using `grind` normalization theorems and simprocs,\nand then applies several other preprocessing steps.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Simp.html#Lean.Meta.Grind.preprocess\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">preprocess</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Simp.Result</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Simp.lean#L26-L32","name":"Lean.Meta.Grind.dsimpCore","line":26,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Simp.html#Lean.Meta.Grind.dsimpCore","doc":"Similar to `simpCore`, but uses `dsimp`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Simp.html#Lean.Meta.Grind.dsimpCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">dsimpCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"}]}