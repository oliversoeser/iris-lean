{"name":"Lean.Meta.Tactic.Grind.Canon","instances":[{"typeNames":["_private.Lean.Meta.Tactic.Grind.Canon.0.Lean.Meta.Grind.Canon.ShouldCanonResult"],"name":"Lean.Meta.Grind.Canon.instInhabitedShouldCanonResult","className":"Inhabited"},{"typeNames":["_private.Lean.Meta.Tactic.Grind.Canon.0.Lean.Meta.Grind.Canon.ShouldCanonResult"],"name":"Lean.Meta.Grind.Canon.instReprShouldCanonResult","className":"Repr"}],"imports":["Init.Grind.Util","Lean.Meta.Basic","Lean.Meta.FunInfo","Lean.Util.FVarSubset","Lean.Util.PtrSet","Lean.Util.FVarSubset","Lean.Meta.Tactic.Grind.Types"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Canon.lean#L206-L209","name":"Lean.Meta.Grind.canon","line":206,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Canon.html#Lean.Meta.Grind.canon","doc":"Canonicalizes nested types, type formers, and instances in `e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Canon.html#Lean.Meta.Grind.canon\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">canon</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Canon.lean#L162-L202","name":"Lean.Meta.Grind.Canon.canonImpl.visit","line":162,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Canon.html#Lean.Meta.Grind.Canon.canonImpl.visit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Canon.html#Lean.Meta.Grind.Canon.canonImpl.visit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Canon</span>.<span class=\"name\">canonImpl</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <span class=\"fn\">(<a href=\"./Lean/Util/PtrSet.html#Lean.PtrMap\">PtrMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Canon.lean#L159-L202","name":"Lean.Meta.Grind.Canon.canonImpl","line":159,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Canon.html#Lean.Meta.Grind.Canon.canonImpl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Canon.html#Lean.Meta.Grind.Canon.canonImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Canon</span>.<span class=\"name\">canonImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Canon.lean#L137-L157","name":"Lean.Meta.Grind.Canon.shouldCanon","line":137,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Canon.html#Lean.Meta.Grind.Canon.shouldCanon","doc":"See comments at `ShouldCanonResult`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Canon.html#Lean.Meta.Grind.Canon.shouldCanon\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Canon</span>.<span class=\"name\">shouldCanon</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pinfos</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.ParamInfo\">ParamInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Tactic/Grind/Canon.html#_private.Lean.Meta.Tactic.Grind.Canon.0.Lean.Meta.Grind.Canon.ShouldCanonResult\">Lean.Meta.Grind.Canon.ShouldCanonResult✝</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Canon.lean#L130-L135","name":"Lean.Meta.Grind.Canon.instReprShouldCanonResult","line":130,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Canon.html#Lean.Meta.Grind.Canon.instReprShouldCanonResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Canon.html#Lean.Meta.Grind.Canon.instReprShouldCanonResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Canon</span>.<span class=\"name\">instReprShouldCanonResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Meta/Tactic/Grind/Canon.html#_private.Lean.Meta.Tactic.Grind.Canon.0.Lean.Meta.Grind.Canon.ShouldCanonResult\">Lean.Meta.Grind.Canon.ShouldCanonResult✝</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Canon.lean#L128-L128","name":"Lean.Meta.Grind.Canon.instInhabitedShouldCanonResult","line":128,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Canon.html#Lean.Meta.Grind.Canon.instInhabitedShouldCanonResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Canon.html#Lean.Meta.Grind.Canon.instInhabitedShouldCanonResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Canon</span>.<span class=\"name\">instInhabitedShouldCanonResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Canon.html#_private.Lean.Meta.Tactic.Grind.Canon.0.Lean.Meta.Grind.Canon.ShouldCanonResult\">Lean.Meta.Grind.Canon.ShouldCanonResult✝</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Canon.lean#L111-L111","name":"Lean.Meta.Grind.Canon.canonImplicit","line":111,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Canon.html#Lean.Meta.Grind.Canon.canonImplicit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Canon.html#Lean.Meta.Grind.Canon.canonImplicit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Canon</span>.<span class=\"name\">canonImplicit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parent </span><span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Canon.lean#L110-L110","name":"Lean.Meta.Grind.Canon.canonInst","line":110,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Canon.html#Lean.Meta.Grind.Canon.canonInst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Canon.html#Lean.Meta.Grind.Canon.canonInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Canon</span>.<span class=\"name\">canonInst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parent </span><span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Canon.lean#L109-L109","name":"Lean.Meta.Grind.Canon.canonType","line":109,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Canon.html#Lean.Meta.Grind.Canon.canonType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Canon.html#Lean.Meta.Grind.Canon.canonType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Canon</span>.<span class=\"name\">canonType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parent </span><span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/Tactic/Grind/Canon.lean#L68-L107","name":"Lean.Meta.Grind.Canon.canonElemCore","line":68,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Canon.html#Lean.Meta.Grind.Canon.canonElemCore","doc":"Helper function for canonicalizing `e` occurring as the `i`th argument of an `f`-application.\nIf `useIsDefEqBounded` is `true`, we try `isDefEqBounded` before returning false\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Canon.html#Lean.Meta.Grind.Canon.canonElemCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Canon</span>.<span class=\"name\">canonElemCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parent </span><span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">useIsDefEqBounded</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"}]}