{"name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecide.Reify","instances":[],"imports":["Lean.Elab.Tactic.BVDecide.Frontend.BVDecide.ReifiedBVLogical","Lean.Elab.Tactic.BVDecide.Frontend.BVDecide.ReifiedLemmas"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.lean#L369-L371","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.of.goPred","line":369,"kind":"opaque","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.of.goPred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.of.goPred\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVLogical</span>.<span class=\"name\">of</span>.<span class=\"name\">goPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.LemmaM\">LemmaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical\">ReifiedBVLogical</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.lean#L363-L367","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.of.gateReflection","line":363,"kind":"opaque","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.of.gateReflection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.of.gateReflection\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVLogical</span>.<span class=\"name\">of</span>.<span class=\"name\">gateReflection</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhsExpr </span><span class=\"fn\">rhsExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">gate</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BoolExpr/Basic.html#Std.Tactic.BVDecide.Gate\">Std.Tactic.BVDecide.Gate</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.LemmaM\">LemmaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical\">ReifiedBVLogical</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.lean#L357-L361","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.of.goOrAtom","line":357,"kind":"opaque","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.of.goOrAtom","doc":"Reify `t` or abstract it as an atom.\nUnless this function is called on something that is not a `Bool` it is always going to return `some`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.of.goOrAtom\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVLogical</span>.<span class=\"name\">of</span>.<span class=\"name\">goOrAtom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.LemmaM\">LemmaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical\">ReifiedBVLogical</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.lean#L332-L351","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.of.go","line":332,"kind":"opaque","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.of.go","doc":"Reify `t`, returns `none` if the reification procedure failed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.of.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVLogical</span>.<span class=\"name\">of</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.LemmaM\">LemmaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical\">ReifiedBVLogical</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.lean#L322-L371","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.of","line":322,"kind":"opaque","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.of","doc":"Reify an `Expr` that is a boolean expression containing predicates about `BitVec` as atoms.\nUnless this function is called on something that is not a `Bool` it is always going to return `some`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.of\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVLogical</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.LemmaM\">LemmaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical\">ReifiedBVLogical</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.lean#L316-L320","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred.of.binaryReflection","line":316,"kind":"opaque","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred.of.binaryReflection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred.of.binaryReflection\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVPred</span>.<span class=\"name\">of</span>.<span class=\"name\">binaryReflection</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhsExpr </span><span class=\"fn\">rhsExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pred</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinPred\">Std.Tactic.BVDecide.BVBinPred</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.LemmaM\">LemmaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred\">ReifiedBVPred</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.lean#L303-L314","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred.of.go","line":303,"kind":"opaque","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred.of.go","doc":"Reify `origExpr`, returns `none` if the reification procedure failed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred.of.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVPred</span>.<span class=\"name\">of</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.LemmaM\">LemmaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred\">ReifiedBVPred</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.lean#L290-L320","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred.of","line":290,"kind":"opaque","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred.of","doc":"Reify an `Expr` that is a predicate about `BitVec`.\nUnless this function is called on something that is not a `Bool` it is always going to return `some`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred.of\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVPred</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.LemmaM\">LemmaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred\">ReifiedBVPred</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.lean#L286-L288","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.goBvLit","line":286,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.goBvLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.goBvLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVExpr</span>.<span class=\"name\">of</span>.<span class=\"name\">goBvLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr\">ReifiedBVExpr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.lean#L281-L284","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.unaryCongrProof","line":281,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.unaryCongrProof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.unaryCongrProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVExpr</span>.<span class=\"name\">of</span>.<span class=\"name\">unaryCongrProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inner</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr\">ReifiedBVExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">innerExpr </span><span class=\"fn\">congrProof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.lean#L273-L279","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.unaryReflection","line":273,"kind":"opaque","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.unaryReflection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.unaryReflection\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVExpr</span>.<span class=\"name\">of</span>.<span class=\"name\">unaryReflection</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">innerExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp\">Std.Tactic.BVDecide.BVUnOp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">congrThm</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.LemmaM\">LemmaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr\">ReifiedBVExpr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.lean#L260-L271","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.binaryCongrProof","line":260,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.binaryCongrProof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.binaryCongrProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVExpr</span>.<span class=\"name\">of</span>.<span class=\"name\">binaryCongrProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr\">ReifiedBVExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhsExpr </span><span class=\"fn\">rhsExpr </span><span class=\"fn\">congrThm</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.lean#L247-L258","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.binaryReflection","line":247,"kind":"opaque","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.binaryReflection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.binaryReflection\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVExpr</span>.<span class=\"name\">of</span>.<span class=\"name\">binaryReflection</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhsExpr </span><span class=\"fn\">rhsExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBinOp\">Std.Tactic.BVDecide.BVBinOp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">congrThm</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.LemmaM\">LemmaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr\">ReifiedBVExpr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.lean#L225-L245","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.shiftReflection","line":225,"kind":"opaque","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.shiftReflection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.shiftReflection\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVExpr</span>.<span class=\"name\">of</span>.<span class=\"name\">shiftReflection</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distanceExpr </span><span class=\"fn\">innerExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shiftOp</span> : <span class=\"fn\">{<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">Std.Tactic.BVDecide.BVExpr</a> <span class=\"fn\">m</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">Std.Tactic.BVDecide.BVExpr</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr\">Std.Tactic.BVDecide.BVExpr</a> <span class=\"fn\">m</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shiftOpName </span><span class=\"fn\">congrThm</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.LemmaM\">LemmaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr\">ReifiedBVExpr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.lean#L219-L223","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.rotateReflection","line":219,"kind":"opaque","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.rotateReflection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.rotateReflection\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVExpr</span>.<span class=\"name\">of</span>.<span class=\"name\">rotateReflection</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distanceExpr </span><span class=\"fn\">innerExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rotateOp</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp\">Std.Tactic.BVDecide.BVUnOp</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rotateOpName </span><span class=\"fn\">congrThm</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.LemmaM\">LemmaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr\">ReifiedBVExpr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.lean#L201-L217","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.shiftConstLikeReflection","line":201,"kind":"opaque","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.shiftConstLikeReflection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.shiftConstLikeReflection\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVExpr</span>.<span class=\"name\">of</span>.<span class=\"name\">shiftConstLikeReflection</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distance</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">innerExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shiftOp</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVUnOp\">Std.Tactic.BVDecide.BVUnOp</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shiftOpName </span><span class=\"fn\">congrThm</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.LemmaM\">LemmaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr\">ReifiedBVExpr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.lean#L194-L199","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.goOrAtom","line":194,"kind":"opaque","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.goOrAtom","doc":"Reify `origExpr` or abstract it as an atom.\nUnless this function is called on something that is not a fixed-width `BitVec` it is always going\nto return `some`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.goOrAtom\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVExpr</span>.<span class=\"name\">of</span>.<span class=\"name\">goOrAtom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.LemmaM\">LemmaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr\">ReifiedBVExpr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.lean#L33-L187","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.go","line":33,"kind":"opaque","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.go","doc":"Reify `x`, returns `none` if the reification procedure failed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVExpr</span>.<span class=\"name\">of</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.LemmaM\">LemmaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr\">ReifiedBVExpr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.lean#L22-L288","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of","line":22,"kind":"opaque","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of","doc":"Reify an `Expr` that's a constant-width `BitVec`.\nUnless this function is called on something that is not a constant-width `BitVec` it is always\ngoing to return `some`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reify.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.of\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVExpr</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.LemmaM\">LemmaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr\">ReifiedBVExpr</a>)</span></span></div></div>"}]}