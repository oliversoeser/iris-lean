{"name":"Std.Data.Iterators.Lemmas.Producers.Repeat","instances":[],"imports":["Init.Data.Option.Lemmas","Std.Data.Iterators.Producers.Repeat","Std.Data.Iterators.Consumers.Access","Std.Data.Iterators.Consumers.Collect","Std.Data.Iterators.Combinators.Take","Std.Data.Iterators.Lemmas.Combinators.Take"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Lemmas/Producers/Repeat.lean#L50-L53","name":"Std.Iterators.Iter.toList_take_repeat_succ","line":50,"kind":"theorem","docLink":"./Std/Data/Iterators/Lemmas/Producers/Repeat.html#Std.Iterators.Iter.toList_take_repeat_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Repeat.html#Std.Iterators.Iter.toList_take_repeat_succ\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">toList_take_repeat_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Take.html#Std.Iterators.Iter.take\">take</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Producers/Repeat.html#Std.Iterators.Iter.repeat\">«repeat»</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span>)</span>)</span>.<a href=\"./Std/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">init</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Take.html#Std.Iterators.Iter.take\">take</a> <span class=\"fn\">k</span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Producers/Repeat.html#Std.Iterators.Iter.repeat\">«repeat»</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">init</span>)</span>)</span>)</span>.<a href=\"./Std/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toList\">toList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Lemmas/Producers/Repeat.lean#L46-L48","name":"Std.Iterators.Iter.isSome_atIdxSlow?_repeat","line":46,"kind":"theorem","docLink":"./Std/Data/Iterators/Lemmas/Producers/Repeat.html#Std.Iterators.Iter.isSome_atIdxSlow?_repeat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Repeat.html#Std.Iterators.Iter.isSome_atIdxSlow?_repeat\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">isSome_atIdxSlow?_repeat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/Iterators/Consumers/Access.html#Std.Iterators.Iter.atIdxSlow?\">atIdxSlow?</a> <span class=\"fn\">k</span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Producers/Repeat.html#Std.Iterators.Iter.repeat\">«repeat»</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Lemmas/Producers/Repeat.lean#L38-L44","name":"Std.Iterators.Iter.atIdxSlow?_repeat","line":38,"kind":"theorem","docLink":"./Std/Data/Iterators/Lemmas/Producers/Repeat.html#Std.Iterators.Iter.atIdxSlow?_repeat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Repeat.html#Std.Iterators.Iter.atIdxSlow?_repeat\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">atIdxSlow?_repeat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Consumers/Access.html#Std.Iterators.Iter.atIdxSlow?\">atIdxSlow?</a> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Producers/Repeat.html#Std.Iterators.Iter.repeat\">«repeat»</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<a href=\"./Init/Data/Nat/Basic.html#Nat.repeat\">Nat.repeat</a> <span class=\"fn\">f</span> <span class=\"fn\">n</span> <span class=\"fn\">init</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Lemmas/Producers/Repeat.lean#L30-L36","name":"Std.Iterators.Iter.atIdxSlow?_succ_repeat_eq_map","line":30,"kind":"theorem","docLink":"./Std/Data/Iterators/Lemmas/Producers/Repeat.html#Std.Iterators.Iter.atIdxSlow?_succ_repeat_eq_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Repeat.html#Std.Iterators.Iter.atIdxSlow?_succ_repeat_eq_map\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">atIdxSlow?_succ_repeat_eq_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Consumers/Access.html#Std.Iterators.Iter.atIdxSlow?\">atIdxSlow?</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Producers/Repeat.html#Std.Iterators.Iter.repeat\">«repeat»</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Std/Data/Iterators/Consumers/Access.html#Std.Iterators.Iter.atIdxSlow?\">atIdxSlow?</a> <span class=\"fn\">k</span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Producers/Repeat.html#Std.Iterators.Iter.repeat\">«repeat»</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Lemmas/Producers/Repeat.lean#L26-L28","name":"Std.Iterators.Iter.atIdxSlow?_succ_repeat","line":26,"kind":"theorem","docLink":"./Std/Data/Iterators/Lemmas/Producers/Repeat.html#Std.Iterators.Iter.atIdxSlow?_succ_repeat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Repeat.html#Std.Iterators.Iter.atIdxSlow?_succ_repeat\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">atIdxSlow?_succ_repeat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Consumers/Access.html#Std.Iterators.Iter.atIdxSlow?\">atIdxSlow?</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Producers/Repeat.html#Std.Iterators.Iter.repeat\">«repeat»</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Iterators/Consumers/Access.html#Std.Iterators.Iter.atIdxSlow?\">atIdxSlow?</a> <span class=\"fn\">k</span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Producers/Repeat.html#Std.Iterators.Iter.repeat\">«repeat»</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">init</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Lemmas/Producers/Repeat.lean#L22-L24","name":"Std.Iterators.Iter.atIdxSlow?_zero_repeat","line":22,"kind":"theorem","docLink":"./Std/Data/Iterators/Lemmas/Producers/Repeat.html#Std.Iterators.Iter.atIdxSlow?_zero_repeat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Repeat.html#Std.Iterators.Iter.atIdxSlow?_zero_repeat\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">atIdxSlow?_zero_repeat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Consumers/Access.html#Std.Iterators.Iter.atIdxSlow?\">atIdxSlow?</a> <span class=\"fn\">0</span> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Producers/Repeat.html#Std.Iterators.Iter.repeat\">«repeat»</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">init</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Std/Data/Iterators/Lemmas/Producers/Repeat.lean#L18-L20","name":"Std.Iterators.Iter.step_repeat","line":18,"kind":"theorem","docLink":"./Std/Data/Iterators/Lemmas/Producers/Repeat.html#Std.Iterators.Iter.step_repeat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Repeat.html#Std.Iterators.Iter.step_repeat\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">step_repeat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/Iterators/Producers/Repeat.html#Std.Iterators.Iter.repeat\">«repeat»</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span>)</span>.<a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.Iter.step\">step</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.yield\">PlausibleIterStep.yield</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Producers/Repeat.html#Std.Iterators.Iter.repeat\">«repeat»</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">init</span>)</span>)</span> <span class=\"fn\">init</span> <span class=\"fn\">⋯</span></span></div></div>"}]}