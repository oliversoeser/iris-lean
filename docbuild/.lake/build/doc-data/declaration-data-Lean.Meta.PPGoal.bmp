{"name":"Lean.Meta.PPGoal","instances":[],"imports":["Lean.Meta.InferType"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/PPGoal.lean#L103-L127","name":"Lean.Meta.ppGoal.ppVars","line":103,"kind":"def","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ppGoal.ppVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/PPGoal.html#Lean.Meta.ppGoal.ppVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ppGoal</span>.<span class=\"name\">ppVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indent</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tactic</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">varNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prevType?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fmt</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localDecl</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/PPGoal.lean#L93-L102","name":"Lean.Meta.ppGoal.pushPending","line":93,"kind":"def","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ppGoal.pushPending","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/PPGoal.html#Lean.Meta.ppGoal.pushPending\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ppGoal</span>.<span class=\"name\">pushPending</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indent</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ids</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fmt</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/PPGoal.lean#L78-L139","name":"Lean.Meta.ppGoal","line":78,"kind":"def","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ppGoal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/PPGoal.html#Lean.Meta.ppGoal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ppGoal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/PPGoal.lean#L71-L76","name":"Lean.Meta.getGoalPrefix","line":71,"kind":"def","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.getGoalPrefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/PPGoal.html#Lean.Meta.getGoalPrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getGoalPrefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarDecl</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">MetavarDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/PPGoal.lean#L47-L66","name":"Lean.Meta.ppGoal.shouldShowLetValue","line":47,"kind":"def","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ppGoal.shouldShowLetValue","doc":"Given the current values of the options `pp.showLetValues` and `pp.showLetValues.threshold`,\ndetermines whether the local let declaration's value should be omitted.\n\n- `tactic` is whether the goal is for a tactic metavariable.\n  In that case, uses the maximum of `pp.showLetValues.tactic.threshold` and `pp.showLetValues.threshold` for the threshold.\n  In tactics, we usually want to see let values.\n  In contrast, for the \"expected type\" view we usually do not.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/PPGoal.html#Lean.Meta.ppGoal.shouldShowLetValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ppGoal</span>.<span class=\"name\">shouldShowLetValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tactic</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/PPGoal.lean#L41-L45","name":"Lean.Meta.pp.showLetValues.tactic.threshold","line":41,"kind":"opaque","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.pp.showLetValues.tactic.threshold","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/PPGoal.html#Lean.Meta.pp.showLetValues.tactic.threshold\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">pp</span>.<span class=\"name\">showLetValues</span>.<span class=\"name\">tactic</span>.<span class=\"name\">threshold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/PPGoal.lean#L35-L39","name":"Lean.Meta.pp.showLetValues.threshold","line":35,"kind":"opaque","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.pp.showLetValues.threshold","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/PPGoal.html#Lean.Meta.pp.showLetValues.threshold\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">pp</span>.<span class=\"name\">showLetValues</span>.<span class=\"name\">threshold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/PPGoal.lean#L29-L33","name":"Lean.Meta.pp.showLetValues","line":29,"kind":"opaque","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.pp.showLetValues","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/PPGoal.html#Lean.Meta.pp.showLetValues\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">pp</span>.<span class=\"name\">showLetValues</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/PPGoal.lean#L23-L27","name":"Lean.Meta.pp.inaccessibleNames","line":23,"kind":"opaque","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.pp.inaccessibleNames","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/PPGoal.html#Lean.Meta.pp.inaccessibleNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">pp</span>.<span class=\"name\">inaccessibleNames</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/PPGoal.lean#L17-L21","name":"Lean.Meta.pp.implementationDetailHyps","line":17,"kind":"opaque","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.pp.implementationDetailHyps","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/PPGoal.html#Lean.Meta.pp.implementationDetailHyps\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">pp</span>.<span class=\"name\">implementationDetailHyps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/6741444a63eec253a7eae7a83f1beb3de015023d/src/Lean/Meta/PPGoal.lean#L11-L15","name":"Lean.Meta.pp.auxDecls","line":11,"kind":"opaque","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.pp.auxDecls","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/PPGoal.html#Lean.Meta.pp.auxDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">pp</span>.<span class=\"name\">auxDecls</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}